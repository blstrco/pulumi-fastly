// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Service, representing the configuration for a website, app,
    /// API, or anything else to be served through Fastly. A Service encompasses Domains
    /// and Backends.
    /// 
    /// The Service resource requires a domain name that is correctly set up to direct
    /// traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
    /// on their documentation site for guidance.
    /// 
    /// 
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-fastly/blob/master/website/docs/r/service_v1.html.markdown.
    /// </summary>
    public partial class Servicev1 : Pulumi.CustomResource
    {
        /// <summary>
        /// A set of ACL configuration blocks.  Defined below.
        /// </summary>
        [Output("acls")]
        public Output<ImmutableArray<Outputs.Servicev1Acls>> Acls { get; private set; } = null!;

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        /// </summary>
        [Output("activate")]
        public Output<bool?> Activate { get; private set; } = null!;

        /// <summary>
        /// The currently active version of your Fastly Service.
        /// </summary>
        [Output("activeVersion")]
        public Output<int> ActiveVersion { get; private set; } = null!;

        /// <summary>
        /// A set of Backends to service requests from your Domains.
        /// Defined below. Backends must be defined in this argument, or defined in the
        /// `vcl` argument below
        /// </summary>
        [Output("backends")]
        public Output<ImmutableArray<Outputs.Servicev1Backends>> Backends { get; private set; } = null!;

        /// <summary>
        /// A BigQuery endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("bigqueryloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Bigqueryloggings>> Bigqueryloggings { get; private set; } = null!;

        /// <summary>
        /// An Azure Blob Storage endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("blobstorageloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Blobstorageloggings>> Blobstorageloggings { get; private set; } = null!;

        /// <summary>
        /// A set of Cache Settings, allowing you to override
        /// </summary>
        [Output("cacheSettings")]
        public Output<ImmutableArray<Outputs.Servicev1CacheSettings>> CacheSettings { get; private set; } = null!;

        [Output("clonedVersion")]
        public Output<int> ClonedVersion { get; private set; } = null!;

        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// A set of conditions to add logic to any basic
        /// configuration object in this service. Defined below.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.Servicev1Conditions>> Conditions { get; private set; } = null!;

        /// <summary>
        /// Sets the host header.
        /// </summary>
        [Output("defaultHost")]
        public Output<string> DefaultHost { get; private set; } = null!;

        /// <summary>
        /// The default Time-to-live (TTL) for
        /// requests.
        /// </summary>
        [Output("defaultTtl")]
        public Output<int?> DefaultTtl { get; private set; } = null!;

        /// <summary>
        /// A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        /// </summary>
        [Output("dictionaries")]
        public Output<ImmutableArray<Outputs.Servicev1Dictionaries>> Dictionaries { get; private set; } = null!;

        /// <summary>
        /// A director to allow more control over balancing traffic over backends.
        /// when an item is not to be cached based on an above `condition`. Defined below
        /// </summary>
        [Output("directors")]
        public Output<ImmutableArray<Outputs.Servicev1Directors>> Directors { get; private set; } = null!;

        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`,
        /// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<Outputs.Servicev1Domains>> Domains { get; private set; } = null!;

        /// <summary>
        /// A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        [Output("dynamicsnippets")]
        public Output<ImmutableArray<Outputs.Servicev1Dynamicsnippets>> Dynamicsnippets { get; private set; } = null!;

        /// <summary>
        /// Services that are active cannot be destroyed. In
        /// order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// A gcs endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("gcsloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Gcsloggings>> Gcsloggings { get; private set; } = null!;

        /// <summary>
        /// A set of gzip rules to control automatic gzipping of
        /// content. Defined below.
        /// </summary>
        [Output("gzips")]
        public Output<ImmutableArray<Outputs.Servicev1Gzips>> Gzips { get; private set; } = null!;

        /// <summary>
        /// A set of Headers to manipulate for each request. Defined
        /// below.
        /// </summary>
        [Output("headers")]
        public Output<ImmutableArray<Outputs.Servicev1Headers>> Headers { get; private set; } = null!;

        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend.
        /// </summary>
        [Output("healthchecks")]
        public Output<ImmutableArray<Outputs.Servicev1Healthchecks>> Healthchecks { get; private set; } = null!;

        /// <summary>
        /// A logentries endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("logentries")]
        public Output<ImmutableArray<Outputs.Servicev1Logentries>> Logentries { get; private set; } = null!;

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A Papertrail endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("papertrails")]
        public Output<ImmutableArray<Outputs.Servicev1Papertrails>> Papertrails { get; private set; } = null!;

        /// <summary>
        /// A set of Request modifiers. Defined below
        /// </summary>
        [Output("requestSettings")]
        public Output<ImmutableArray<Outputs.Servicev1RequestSettings>> RequestSettings { get; private set; } = null!;

        /// <summary>
        /// Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        /// </summary>
        [Output("responseObjects")]
        public Output<ImmutableArray<Outputs.Servicev1ResponseObjects>> ResponseObjects { get; private set; } = null!;

        /// <summary>
        /// A set of S3 Buckets to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("s3loggings")]
        public Output<ImmutableArray<Outputs.Servicev1S3loggings>> S3loggings { get; private set; } = null!;

        /// <summary>
        /// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        [Output("snippets")]
        public Output<ImmutableArray<Outputs.Servicev1Snippets>> Snippets { get; private set; } = null!;

        /// <summary>
        /// A Splunk endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("splunks")]
        public Output<ImmutableArray<Outputs.Servicev1Splunks>> Splunks { get; private set; } = null!;

        /// <summary>
        /// A Sumologic endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("sumologics")]
        public Output<ImmutableArray<Outputs.Servicev1Sumologics>> Sumologics { get; private set; } = null!;

        /// <summary>
        /// A syslog endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("syslogs")]
        public Output<ImmutableArray<Outputs.Servicev1Syslogs>> Syslogs { get; private set; } = null!;

        /// <summary>
        /// A set of custom VCL configuration blocks. The
        /// ability to upload custom VCL code is not enabled by default for new Fastly
        /// accounts (see the [Fastly documentation](https://docs.fastly.com/guides/vcl/uploading-custom-vcl) for details).
        /// </summary>
        [Output("vcls")]
        public Output<ImmutableArray<Outputs.Servicev1Vcls>> Vcls { get; private set; } = null!;

        /// <summary>
        /// Description field for the version.
        /// </summary>
        [Output("versionComment")]
        public Output<string?> VersionComment { get; private set; } = null!;


        /// <summary>
        /// Create a Servicev1 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Servicev1(string name, Servicev1Args args, CustomResourceOptions? options = null)
            : base("fastly:index/servicev1:Servicev1", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Servicev1(string name, Input<string> id, Servicev1State? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/servicev1:Servicev1", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Servicev1 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Servicev1 Get(string name, Input<string> id, Servicev1State? state = null, CustomResourceOptions? options = null)
        {
            return new Servicev1(name, id, state, options);
        }
    }

    public sealed class Servicev1Args : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.Servicev1AclsArgs>? _acls;

        /// <summary>
        /// A set of ACL configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1AclsArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.Servicev1AclsArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        [Input("backends")]
        private InputList<Inputs.Servicev1BackendsArgs>? _backends;

        /// <summary>
        /// A set of Backends to service requests from your Domains.
        /// Defined below. Backends must be defined in this argument, or defined in the
        /// `vcl` argument below
        /// </summary>
        public InputList<Inputs.Servicev1BackendsArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.Servicev1BackendsArgs>());
            set => _backends = value;
        }

        [Input("bigqueryloggings")]
        private InputList<Inputs.Servicev1BigqueryloggingsArgs>? _bigqueryloggings;

        /// <summary>
        /// A BigQuery endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BigqueryloggingsArgs> Bigqueryloggings
        {
            get => _bigqueryloggings ?? (_bigqueryloggings = new InputList<Inputs.Servicev1BigqueryloggingsArgs>());
            set => _bigqueryloggings = value;
        }

        [Input("blobstorageloggings")]
        private InputList<Inputs.Servicev1BlobstorageloggingsArgs>? _blobstorageloggings;

        /// <summary>
        /// An Azure Blob Storage endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BlobstorageloggingsArgs> Blobstorageloggings
        {
            get => _blobstorageloggings ?? (_blobstorageloggings = new InputList<Inputs.Servicev1BlobstorageloggingsArgs>());
            set => _blobstorageloggings = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.Servicev1CacheSettingsArgs>? _cacheSettings;

        /// <summary>
        /// A set of Cache Settings, allowing you to override
        /// </summary>
        public InputList<Inputs.Servicev1CacheSettingsArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.Servicev1CacheSettingsArgs>());
            set => _cacheSettings = value;
        }

        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.Servicev1ConditionsArgs>? _conditions;

        /// <summary>
        /// A set of conditions to add logic to any basic
        /// configuration object in this service. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1ConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.Servicev1ConditionsArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// Sets the host header.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for
        /// requests.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.Servicev1DictionariesArgs>? _dictionaries;

        /// <summary>
        /// A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DictionariesArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.Servicev1DictionariesArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.Servicev1DirectorsArgs>? _directors;

        /// <summary>
        /// A director to allow more control over balancing traffic over backends.
        /// when an item is not to be cached based on an above `condition`. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1DirectorsArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.Servicev1DirectorsArgs>());
            set => _directors = value;
        }

        [Input("domains", required: true)]
        private InputList<Inputs.Servicev1DomainsArgs>? _domains;

        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`,
        /// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
        /// </summary>
        public InputList<Inputs.Servicev1DomainsArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.Servicev1DomainsArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.Servicev1DynamicsnippetsArgs>? _dynamicsnippets;

        /// <summary>
        /// A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DynamicsnippetsArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.Servicev1DynamicsnippetsArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In
        /// order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("gcsloggings")]
        private InputList<Inputs.Servicev1GcsloggingsArgs>? _gcsloggings;

        /// <summary>
        /// A gcs endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GcsloggingsArgs> Gcsloggings
        {
            get => _gcsloggings ?? (_gcsloggings = new InputList<Inputs.Servicev1GcsloggingsArgs>());
            set => _gcsloggings = value;
        }

        [Input("gzips")]
        private InputList<Inputs.Servicev1GzipsArgs>? _gzips;

        /// <summary>
        /// A set of gzip rules to control automatic gzipping of
        /// content. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GzipsArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.Servicev1GzipsArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.Servicev1HeadersArgs>? _headers;

        /// <summary>
        /// A set of Headers to manipulate for each request. Defined
        /// below.
        /// </summary>
        public InputList<Inputs.Servicev1HeadersArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.Servicev1HeadersArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.Servicev1HealthchecksArgs>? _healthchecks;

        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend.
        /// </summary>
        public InputList<Inputs.Servicev1HealthchecksArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.Servicev1HealthchecksArgs>());
            set => _healthchecks = value;
        }

        [Input("logentries")]
        private InputList<Inputs.Servicev1LogentriesArgs>? _logentries;

        /// <summary>
        /// A logentries endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LogentriesArgs> Logentries
        {
            get => _logentries ?? (_logentries = new InputList<Inputs.Servicev1LogentriesArgs>());
            set => _logentries = value;
        }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("papertrails")]
        private InputList<Inputs.Servicev1PapertrailsArgs>? _papertrails;

        /// <summary>
        /// A Papertrail endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1PapertrailsArgs> Papertrails
        {
            get => _papertrails ?? (_papertrails = new InputList<Inputs.Servicev1PapertrailsArgs>());
            set => _papertrails = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.Servicev1RequestSettingsArgs>? _requestSettings;

        /// <summary>
        /// A set of Request modifiers. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1RequestSettingsArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.Servicev1RequestSettingsArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.Servicev1ResponseObjectsArgs>? _responseObjects;

        /// <summary>
        /// Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        /// </summary>
        public InputList<Inputs.Servicev1ResponseObjectsArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.Servicev1ResponseObjectsArgs>());
            set => _responseObjects = value;
        }

        [Input("s3loggings")]
        private InputList<Inputs.Servicev1S3loggingsArgs>? _s3loggings;

        /// <summary>
        /// A set of S3 Buckets to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1S3loggingsArgs> S3loggings
        {
            get => _s3loggings ?? (_s3loggings = new InputList<Inputs.Servicev1S3loggingsArgs>());
            set => _s3loggings = value;
        }

        [Input("snippets")]
        private InputList<Inputs.Servicev1SnippetsArgs>? _snippets;

        /// <summary>
        /// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SnippetsArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.Servicev1SnippetsArgs>());
            set => _snippets = value;
        }

        [Input("splunks")]
        private InputList<Inputs.Servicev1SplunksArgs>? _splunks;

        /// <summary>
        /// A Splunk endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SplunksArgs> Splunks
        {
            get => _splunks ?? (_splunks = new InputList<Inputs.Servicev1SplunksArgs>());
            set => _splunks = value;
        }

        [Input("sumologics")]
        private InputList<Inputs.Servicev1SumologicsArgs>? _sumologics;

        /// <summary>
        /// A Sumologic endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SumologicsArgs> Sumologics
        {
            get => _sumologics ?? (_sumologics = new InputList<Inputs.Servicev1SumologicsArgs>());
            set => _sumologics = value;
        }

        [Input("syslogs")]
        private InputList<Inputs.Servicev1SyslogsArgs>? _syslogs;

        /// <summary>
        /// A syslog endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SyslogsArgs> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<Inputs.Servicev1SyslogsArgs>());
            set => _syslogs = value;
        }

        [Input("vcls")]
        private InputList<Inputs.Servicev1VclsArgs>? _vcls;

        /// <summary>
        /// A set of custom VCL configuration blocks. The
        /// ability to upload custom VCL code is not enabled by default for new Fastly
        /// accounts (see the [Fastly documentation](https://docs.fastly.com/guides/vcl/uploading-custom-vcl) for details).
        /// </summary>
        public InputList<Inputs.Servicev1VclsArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.Servicev1VclsArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version.
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        public Servicev1Args()
        {
        }
    }

    public sealed class Servicev1State : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.Servicev1AclsGetArgs>? _acls;

        /// <summary>
        /// A set of ACL configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1AclsGetArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.Servicev1AclsGetArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        /// <summary>
        /// The currently active version of your Fastly Service.
        /// </summary>
        [Input("activeVersion")]
        public Input<int>? ActiveVersion { get; set; }

        [Input("backends")]
        private InputList<Inputs.Servicev1BackendsGetArgs>? _backends;

        /// <summary>
        /// A set of Backends to service requests from your Domains.
        /// Defined below. Backends must be defined in this argument, or defined in the
        /// `vcl` argument below
        /// </summary>
        public InputList<Inputs.Servicev1BackendsGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.Servicev1BackendsGetArgs>());
            set => _backends = value;
        }

        [Input("bigqueryloggings")]
        private InputList<Inputs.Servicev1BigqueryloggingsGetArgs>? _bigqueryloggings;

        /// <summary>
        /// A BigQuery endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BigqueryloggingsGetArgs> Bigqueryloggings
        {
            get => _bigqueryloggings ?? (_bigqueryloggings = new InputList<Inputs.Servicev1BigqueryloggingsGetArgs>());
            set => _bigqueryloggings = value;
        }

        [Input("blobstorageloggings")]
        private InputList<Inputs.Servicev1BlobstorageloggingsGetArgs>? _blobstorageloggings;

        /// <summary>
        /// An Azure Blob Storage endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BlobstorageloggingsGetArgs> Blobstorageloggings
        {
            get => _blobstorageloggings ?? (_blobstorageloggings = new InputList<Inputs.Servicev1BlobstorageloggingsGetArgs>());
            set => _blobstorageloggings = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.Servicev1CacheSettingsGetArgs>? _cacheSettings;

        /// <summary>
        /// A set of Cache Settings, allowing you to override
        /// </summary>
        public InputList<Inputs.Servicev1CacheSettingsGetArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.Servicev1CacheSettingsGetArgs>());
            set => _cacheSettings = value;
        }

        [Input("clonedVersion")]
        public Input<int>? ClonedVersion { get; set; }

        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.Servicev1ConditionsGetArgs>? _conditions;

        /// <summary>
        /// A set of conditions to add logic to any basic
        /// configuration object in this service. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1ConditionsGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.Servicev1ConditionsGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// Sets the host header.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for
        /// requests.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.Servicev1DictionariesGetArgs>? _dictionaries;

        /// <summary>
        /// A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DictionariesGetArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.Servicev1DictionariesGetArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.Servicev1DirectorsGetArgs>? _directors;

        /// <summary>
        /// A director to allow more control over balancing traffic over backends.
        /// when an item is not to be cached based on an above `condition`. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1DirectorsGetArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.Servicev1DirectorsGetArgs>());
            set => _directors = value;
        }

        [Input("domains")]
        private InputList<Inputs.Servicev1DomainsGetArgs>? _domains;

        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`,
        /// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
        /// </summary>
        public InputList<Inputs.Servicev1DomainsGetArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.Servicev1DomainsGetArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.Servicev1DynamicsnippetsGetArgs>? _dynamicsnippets;

        /// <summary>
        /// A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DynamicsnippetsGetArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.Servicev1DynamicsnippetsGetArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In
        /// order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("gcsloggings")]
        private InputList<Inputs.Servicev1GcsloggingsGetArgs>? _gcsloggings;

        /// <summary>
        /// A gcs endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GcsloggingsGetArgs> Gcsloggings
        {
            get => _gcsloggings ?? (_gcsloggings = new InputList<Inputs.Servicev1GcsloggingsGetArgs>());
            set => _gcsloggings = value;
        }

        [Input("gzips")]
        private InputList<Inputs.Servicev1GzipsGetArgs>? _gzips;

        /// <summary>
        /// A set of gzip rules to control automatic gzipping of
        /// content. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GzipsGetArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.Servicev1GzipsGetArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.Servicev1HeadersGetArgs>? _headers;

        /// <summary>
        /// A set of Headers to manipulate for each request. Defined
        /// below.
        /// </summary>
        public InputList<Inputs.Servicev1HeadersGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.Servicev1HeadersGetArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.Servicev1HealthchecksGetArgs>? _healthchecks;

        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend.
        /// </summary>
        public InputList<Inputs.Servicev1HealthchecksGetArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.Servicev1HealthchecksGetArgs>());
            set => _healthchecks = value;
        }

        [Input("logentries")]
        private InputList<Inputs.Servicev1LogentriesGetArgs>? _logentries;

        /// <summary>
        /// A logentries endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LogentriesGetArgs> Logentries
        {
            get => _logentries ?? (_logentries = new InputList<Inputs.Servicev1LogentriesGetArgs>());
            set => _logentries = value;
        }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("papertrails")]
        private InputList<Inputs.Servicev1PapertrailsGetArgs>? _papertrails;

        /// <summary>
        /// A Papertrail endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1PapertrailsGetArgs> Papertrails
        {
            get => _papertrails ?? (_papertrails = new InputList<Inputs.Servicev1PapertrailsGetArgs>());
            set => _papertrails = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.Servicev1RequestSettingsGetArgs>? _requestSettings;

        /// <summary>
        /// A set of Request modifiers. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1RequestSettingsGetArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.Servicev1RequestSettingsGetArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.Servicev1ResponseObjectsGetArgs>? _responseObjects;

        /// <summary>
        /// Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        /// </summary>
        public InputList<Inputs.Servicev1ResponseObjectsGetArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.Servicev1ResponseObjectsGetArgs>());
            set => _responseObjects = value;
        }

        [Input("s3loggings")]
        private InputList<Inputs.Servicev1S3loggingsGetArgs>? _s3loggings;

        /// <summary>
        /// A set of S3 Buckets to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1S3loggingsGetArgs> S3loggings
        {
            get => _s3loggings ?? (_s3loggings = new InputList<Inputs.Servicev1S3loggingsGetArgs>());
            set => _s3loggings = value;
        }

        [Input("snippets")]
        private InputList<Inputs.Servicev1SnippetsGetArgs>? _snippets;

        /// <summary>
        /// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SnippetsGetArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.Servicev1SnippetsGetArgs>());
            set => _snippets = value;
        }

        [Input("splunks")]
        private InputList<Inputs.Servicev1SplunksGetArgs>? _splunks;

        /// <summary>
        /// A Splunk endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SplunksGetArgs> Splunks
        {
            get => _splunks ?? (_splunks = new InputList<Inputs.Servicev1SplunksGetArgs>());
            set => _splunks = value;
        }

        [Input("sumologics")]
        private InputList<Inputs.Servicev1SumologicsGetArgs>? _sumologics;

        /// <summary>
        /// A Sumologic endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SumologicsGetArgs> Sumologics
        {
            get => _sumologics ?? (_sumologics = new InputList<Inputs.Servicev1SumologicsGetArgs>());
            set => _sumologics = value;
        }

        [Input("syslogs")]
        private InputList<Inputs.Servicev1SyslogsGetArgs>? _syslogs;

        /// <summary>
        /// A syslog endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SyslogsGetArgs> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<Inputs.Servicev1SyslogsGetArgs>());
            set => _syslogs = value;
        }

        [Input("vcls")]
        private InputList<Inputs.Servicev1VclsGetArgs>? _vcls;

        /// <summary>
        /// A set of custom VCL configuration blocks. The
        /// ability to upload custom VCL code is not enabled by default for new Fastly
        /// accounts (see the [Fastly documentation](https://docs.fastly.com/guides/vcl/uploading-custom-vcl) for details).
        /// </summary>
        public InputList<Inputs.Servicev1VclsGetArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.Servicev1VclsGetArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version.
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        public Servicev1State()
        {
        }
    }

    namespace Inputs
    {

    public sealed class Servicev1AclsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the ACL.
        /// </summary>
        [Input("aclId")]
        public Input<string>? AclId { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1AclsArgs()
        {
        }
    }

    public sealed class Servicev1AclsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the ACL.
        /// </summary>
        [Input("aclId")]
        public Input<string>? AclId { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1AclsGetArgs()
        {
        }
    }

    public sealed class Servicev1BackendsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A hostname or IPv4 address of the Syslog endpoint.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Denotes if this Backend should be
        /// included in the pool of backends that requests are load balanced against.
        /// Default `true`.
        /// </summary>
        [Input("autoLoadbalance")]
        public Input<bool>? AutoLoadbalance { get; set; }

        /// <summary>
        /// How long to wait between bytes in milliseconds. Default `10000`.
        /// </summary>
        [Input("betweenBytesTimeout")]
        public Input<int>? BetweenBytesTimeout { get; set; }

        /// <summary>
        /// How long to wait for a timeout in milliseconds.
        /// Default `1000`
        /// </summary>
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        /// <summary>
        /// Number of errors to allow before the Backend is marked as down. Default `0`.
        /// </summary>
        [Input("errorThreshold")]
        public Input<int>? ErrorThreshold { get; set; }

        /// <summary>
        /// How long to wait for the first bytes in milliseconds. Default `15000`.
        /// </summary>
        [Input("firstByteTimeout")]
        public Input<int>? FirstByteTimeout { get; set; }

        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend.
        /// </summary>
        [Input("healthcheck")]
        public Input<string>? Healthcheck { get; set; }

        /// <summary>
        /// Maximum number of connections for this Backend.
        /// Default `200`.
        /// </summary>
        [Input("maxConn")]
        public Input<int>? MaxConn { get; set; }

        /// <summary>
        /// Maximum allowed TLS version on SSL connections to this backend.
        /// </summary>
        [Input("maxTlsVersion")]
        public Input<string>? MaxTlsVersion { get; set; }

        /// <summary>
        /// Minimum allowed TLS version on SSL connections to this backend.
        /// </summary>
        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The hostname to override the Host header.
        /// </summary>
        [Input("overrideHost")]
        public Input<string>? OverrideHost { get; set; }

        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        /// <summary>
        /// Selected POP to serve as a "shield" for origin servers.
        /// </summary>
        [Input("shield")]
        public Input<string>? Shield { get; set; }

        /// <summary>
        /// CA certificate attached to origin.
        /// </summary>
        [Input("sslCaCert")]
        public Input<string>? SslCaCert { get; set; }

        /// <summary>
        /// Overrides ssl_hostname, but only for cert verification. Does not affect SNI at all.
        /// </summary>
        [Input("sslCertHostname")]
        public Input<string>? SslCertHostname { get; set; }

        /// <summary>
        /// Be strict about checking SSL certs. Default `true`.
        /// </summary>
        [Input("sslCheckCert")]
        public Input<bool>? SslCheckCert { get; set; }

        /// <summary>
        /// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend.
        /// </summary>
        [Input("sslCiphers")]
        public Input<string>? SslCiphers { get; set; }

        /// <summary>
        /// Client certificate attached to origin. Used when connecting to the backend.
        /// </summary>
        [Input("sslClientCert")]
        public Input<string>? SslClientCert { get; set; }

        /// <summary>
        /// Client key attached to origin. Used when connecting to the backend.
        /// </summary>
        [Input("sslClientKey")]
        public Input<string>? SslClientKey { get; set; }

        /// <summary>
        /// Used for both SNI during the TLS handshake and to validate the cert.
        /// </summary>
        [Input("sslHostname")]
        public Input<string>? SslHostname { get; set; }

        /// <summary>
        /// Overrides ssl_hostname, but only for SNI in the handshake. Does not affect cert validation at all.
        /// </summary>
        [Input("sslSniHostname")]
        public Input<string>? SslSniHostname { get; set; }

        /// <summary>
        /// Whether or not to use SSL to reach the backend. Default `false`.
        /// </summary>
        [Input("useSsl")]
        public Input<bool>? UseSsl { get; set; }

        /// <summary>
        /// The [portion of traffic](https://docs.fastly.com/guides/performance-tuning/load-balancing-configuration.html#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives `weight / total` of the traffic. Default `100`.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public Servicev1BackendsArgs()
        {
        }
    }

    public sealed class Servicev1BackendsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A hostname or IPv4 address of the Syslog endpoint.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Denotes if this Backend should be
        /// included in the pool of backends that requests are load balanced against.
        /// Default `true`.
        /// </summary>
        [Input("autoLoadbalance")]
        public Input<bool>? AutoLoadbalance { get; set; }

        /// <summary>
        /// How long to wait between bytes in milliseconds. Default `10000`.
        /// </summary>
        [Input("betweenBytesTimeout")]
        public Input<int>? BetweenBytesTimeout { get; set; }

        /// <summary>
        /// How long to wait for a timeout in milliseconds.
        /// Default `1000`
        /// </summary>
        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        /// <summary>
        /// Number of errors to allow before the Backend is marked as down. Default `0`.
        /// </summary>
        [Input("errorThreshold")]
        public Input<int>? ErrorThreshold { get; set; }

        /// <summary>
        /// How long to wait for the first bytes in milliseconds. Default `15000`.
        /// </summary>
        [Input("firstByteTimeout")]
        public Input<int>? FirstByteTimeout { get; set; }

        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend.
        /// </summary>
        [Input("healthcheck")]
        public Input<string>? Healthcheck { get; set; }

        /// <summary>
        /// Maximum number of connections for this Backend.
        /// Default `200`.
        /// </summary>
        [Input("maxConn")]
        public Input<int>? MaxConn { get; set; }

        /// <summary>
        /// Maximum allowed TLS version on SSL connections to this backend.
        /// </summary>
        [Input("maxTlsVersion")]
        public Input<string>? MaxTlsVersion { get; set; }

        /// <summary>
        /// Minimum allowed TLS version on SSL connections to this backend.
        /// </summary>
        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The hostname to override the Host header.
        /// </summary>
        [Input("overrideHost")]
        public Input<string>? OverrideHost { get; set; }

        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        /// <summary>
        /// Selected POP to serve as a "shield" for origin servers.
        /// </summary>
        [Input("shield")]
        public Input<string>? Shield { get; set; }

        /// <summary>
        /// CA certificate attached to origin.
        /// </summary>
        [Input("sslCaCert")]
        public Input<string>? SslCaCert { get; set; }

        /// <summary>
        /// Overrides ssl_hostname, but only for cert verification. Does not affect SNI at all.
        /// </summary>
        [Input("sslCertHostname")]
        public Input<string>? SslCertHostname { get; set; }

        /// <summary>
        /// Be strict about checking SSL certs. Default `true`.
        /// </summary>
        [Input("sslCheckCert")]
        public Input<bool>? SslCheckCert { get; set; }

        /// <summary>
        /// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend.
        /// </summary>
        [Input("sslCiphers")]
        public Input<string>? SslCiphers { get; set; }

        /// <summary>
        /// Client certificate attached to origin. Used when connecting to the backend.
        /// </summary>
        [Input("sslClientCert")]
        public Input<string>? SslClientCert { get; set; }

        /// <summary>
        /// Client key attached to origin. Used when connecting to the backend.
        /// </summary>
        [Input("sslClientKey")]
        public Input<string>? SslClientKey { get; set; }

        /// <summary>
        /// Used for both SNI during the TLS handshake and to validate the cert.
        /// </summary>
        [Input("sslHostname")]
        public Input<string>? SslHostname { get; set; }

        /// <summary>
        /// Overrides ssl_hostname, but only for SNI in the handshake. Does not affect cert validation at all.
        /// </summary>
        [Input("sslSniHostname")]
        public Input<string>? SslSniHostname { get; set; }

        /// <summary>
        /// Whether or not to use SSL to reach the backend. Default `false`.
        /// </summary>
        [Input("useSsl")]
        public Input<bool>? UseSsl { get; set; }

        /// <summary>
        /// The [portion of traffic](https://docs.fastly.com/guides/performance-tuning/load-balancing-configuration.html#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives `weight / total` of the traffic. Default `100`.
        /// </summary>
        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public Servicev1BackendsGetArgs()
        {
        }
    }

    public sealed class Servicev1BigqueryloggingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of your BigQuery dataset.
        /// </summary>
        [Input("dataset", required: true)]
        public Input<string> Dataset { get; set; } = null!;

        /// <summary>
        /// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The ID of your GCP project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The secret key associated with the sservice account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// The ID of your BigQuery table.
        /// </summary>
        [Input("table", required: true)]
        public Input<string> Table { get; set; } = null!;

        /// <summary>
        /// Big query table name suffix template. If set will be interpreted as a strftime compatible string and used as the [Template Suffix for your table](https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables).
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        public Servicev1BigqueryloggingsArgs()
        {
        }
    }

    public sealed class Servicev1BigqueryloggingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of your BigQuery dataset.
        /// </summary>
        [Input("dataset", required: true)]
        public Input<string> Dataset { get; set; } = null!;

        /// <summary>
        /// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The ID of your GCP project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The secret key associated with the sservice account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// The ID of your BigQuery table.
        /// </summary>
        [Input("table", required: true)]
        public Input<string> Table { get; set; } = null!;

        /// <summary>
        /// Big query table name suffix template. If set will be interpreted as a strftime compatible string and used as the [Template Suffix for your table](https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables).
        /// </summary>
        [Input("template")]
        public Input<string>? Template { get; set; }

        public Servicev1BigqueryloggingsGetArgs()
        {
        }
    }

    public sealed class Servicev1BlobstorageloggingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique Azure Blob Storage namespace in which your data objects are stored.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the Azure Blob Storage container in which to store logs.
        /// </summary>
        [Input("container", required: true)]
        public Input<string> Container { get; set; } = null!;

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// Level of GZIP compression from `0`to `9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`.
        /// </summary>
        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work.
        /// </summary>
        [Input("sasToken", required: true)]
        public Input<string> SasToken { get; set; } = null!;

        /// <summary>
        /// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`.
        /// </summary>
        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1BlobstorageloggingsArgs()
        {
        }
    }

    public sealed class Servicev1BlobstorageloggingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique Azure Blob Storage namespace in which your data objects are stored.
        /// </summary>
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        /// <summary>
        /// The name of the Azure Blob Storage container in which to store logs.
        /// </summary>
        [Input("container", required: true)]
        public Input<string> Container { get; set; } = null!;

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// Level of GZIP compression from `0`to `9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`.
        /// </summary>
        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work.
        /// </summary>
        [Input("sasToken", required: true)]
        public Input<string> SasToken { get; set; } = null!;

        /// <summary>
        /// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`.
        /// </summary>
        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1BlobstorageloggingsGetArgs()
        {
        }
    }

    public sealed class Servicev1CacheSettingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allows you to terminate request handling and immediately
        /// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Max "Time To Live" for stale (unreachable) objects.
        /// </summary>
        [Input("staleTtl")]
        public Input<int>? StaleTtl { get; set; }

        /// <summary>
        /// The Time-To-Live (TTL) for the object.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public Servicev1CacheSettingsArgs()
        {
        }
    }

    public sealed class Servicev1CacheSettingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allows you to terminate request handling and immediately
        /// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Max "Time To Live" for stale (unreachable) objects.
        /// </summary>
        [Input("staleTtl")]
        public Input<int>? StaleTtl { get; set; }

        /// <summary>
        /// The Time-To-Live (TTL) for the object.
        /// </summary>
        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public Servicev1CacheSettingsGetArgs()
        {
        }
    }

    public sealed class Servicev1ConditionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The statement used to determine if the condition is met.
        /// </summary>
        [Input("statement", required: true)]
        public Input<string> Statement { get; set; } = null!;

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1ConditionsArgs()
        {
        }
    }

    public sealed class Servicev1ConditionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The statement used to determine if the condition is met.
        /// </summary>
        [Input("statement", required: true)]
        public Input<string> Statement { get; set; } = null!;

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1ConditionsGetArgs()
        {
        }
    }

    public sealed class Servicev1DictionariesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the dictionary.
        /// </summary>
        [Input("dictionaryId")]
        public Input<string>? DictionaryId { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("writeOnly")]
        public Input<bool>? WriteOnly { get; set; }

        public Servicev1DictionariesArgs()
        {
        }
    }

    public sealed class Servicev1DictionariesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the dictionary.
        /// </summary>
        [Input("dictionaryId")]
        public Input<string>? DictionaryId { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("writeOnly")]
        public Input<bool>? WriteOnly { get; set; }

        public Servicev1DictionariesGetArgs()
        {
        }
    }

    public sealed class Servicev1DirectorsArgs : Pulumi.ResourceArgs
    {
        [Input("backends", required: true)]
        private InputList<string>? _backends;

        /// <summary>
        /// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
        /// </summary>
        public InputList<string> Backends
        {
            get => _backends ?? (_backends = new InputList<string>());
            set => _backends = value;
        }

        /// <summary>
        /// Load balancing weight for the backends. Default `100`.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`.
        /// </summary>
        [Input("quorum")]
        public Input<int>? Quorum { get; set; }

        /// <summary>
        /// How many backends to search if it fails. Default `5`.
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        /// <summary>
        /// Selected POP to serve as a "shield" for origin servers.
        /// </summary>
        [Input("shield")]
        public Input<string>? Shield { get; set; }

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type")]
        public Input<int>? Type { get; set; }

        public Servicev1DirectorsArgs()
        {
        }
    }

    public sealed class Servicev1DirectorsGetArgs : Pulumi.ResourceArgs
    {
        [Input("backends", required: true)]
        private InputList<string>? _backends;

        /// <summary>
        /// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
        /// </summary>
        public InputList<string> Backends
        {
            get => _backends ?? (_backends = new InputList<string>());
            set => _backends = value;
        }

        /// <summary>
        /// Load balancing weight for the backends. Default `100`.
        /// </summary>
        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`.
        /// </summary>
        [Input("quorum")]
        public Input<int>? Quorum { get; set; }

        /// <summary>
        /// How many backends to search if it fails. Default `5`.
        /// </summary>
        [Input("retries")]
        public Input<int>? Retries { get; set; }

        /// <summary>
        /// Selected POP to serve as a "shield" for origin servers.
        /// </summary>
        [Input("shield")]
        public Input<string>? Shield { get; set; }

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type")]
        public Input<int>? Type { get; set; }

        public Servicev1DirectorsGetArgs()
        {
        }
    }

    public sealed class Servicev1DomainsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1DomainsArgs()
        {
        }
    }

    public sealed class Servicev1DomainsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1DomainsGetArgs()
        {
        }
    }

    public sealed class Servicev1DynamicsnippetsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the dynamic snippet.
        /// </summary>
        [Input("snippetId")]
        public Input<string>? SnippetId { get; set; }

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1DynamicsnippetsArgs()
        {
        }
    }

    public sealed class Servicev1DynamicsnippetsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the dynamic snippet.
        /// </summary>
        [Input("snippetId")]
        public Input<string>? SnippetId { get; set; }

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1DynamicsnippetsGetArgs()
        {
        }
    }

    public sealed class Servicev1GcsloggingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the bucket in which to store the logs.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Level of GZIP compression from `0`to `9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`.
        /// </summary>
        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The secret key associated with the sservice account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`.
        /// </summary>
        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1GcsloggingsArgs()
        {
        }
    }

    public sealed class Servicev1GcsloggingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the bucket in which to store the logs.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// Level of GZIP compression from `0`to `9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`.
        /// </summary>
        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The secret key associated with the sservice account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines.
        /// </summary>
        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        /// <summary>
        /// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`.
        /// </summary>
        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1GcsloggingsGetArgs()
        {
        }
    }

    public sealed class Servicev1GzipsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        [Input("contentTypes")]
        private InputList<string>? _contentTypes;

        /// <summary>
        /// The content-type for each type of content you wish to
        /// have dynamically gzip'ed. Example: `["text/html", "text/css"]`.
        /// </summary>
        public InputList<string> ContentTypes
        {
            get => _contentTypes ?? (_contentTypes = new InputList<string>());
            set => _contentTypes = value;
        }

        [Input("extensions")]
        private InputList<string>? _extensions;

        /// <summary>
        /// File extensions for each file type to dynamically
        /// gzip. Example: `["css", "js"]`.
        /// </summary>
        public InputList<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<string>());
            set => _extensions = value;
        }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1GzipsArgs()
        {
        }
    }

    public sealed class Servicev1GzipsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        [Input("contentTypes")]
        private InputList<string>? _contentTypes;

        /// <summary>
        /// The content-type for each type of content you wish to
        /// have dynamically gzip'ed. Example: `["text/html", "text/css"]`.
        /// </summary>
        public InputList<string> ContentTypes
        {
            get => _contentTypes ?? (_contentTypes = new InputList<string>());
            set => _contentTypes = value;
        }

        [Input("extensions")]
        private InputList<string>? _extensions;

        /// <summary>
        /// File extensions for each file type to dynamically
        /// gzip. Example: `["css", "js"]`.
        /// </summary>
        public InputList<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<string>());
            set => _extensions = value;
        }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1GzipsGetArgs()
        {
        }
    }

    public sealed class Servicev1HeadersArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allows you to terminate request handling and immediately
        /// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        /// <summary>
        /// The name of the header that is going to be affected by the Action.
        /// </summary>
        [Input("destination", required: true)]
        public Input<string> Destination { get; set; } = null!;

        /// <summary>
        /// Do not add the header if it is already present. (Only applies to the `set` action.). Default `false`.
        /// </summary>
        [Input("ignoreIfSet")]
        public Input<bool>? IgnoreIfSet { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Regular expression to use (Only applies to the `regex` and `regex_repeat` actions.)
        /// </summary>
        [Input("regex")]
        public Input<string>? Regex { get; set; }

        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// Variable to be used as a source for the header
        /// content. (Does not apply to the `delete` action.)
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Value to substitute in place of regular expression. (Only applies to the `regex` and `regex_repeat` actions.)
        /// </summary>
        [Input("substitution")]
        public Input<string>? Substitution { get; set; }

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1HeadersArgs()
        {
        }
    }

    public sealed class Servicev1HeadersGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allows you to terminate request handling and immediately
        /// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
        /// </summary>
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        /// <summary>
        /// The name of the header that is going to be affected by the Action.
        /// </summary>
        [Input("destination", required: true)]
        public Input<string> Destination { get; set; } = null!;

        /// <summary>
        /// Do not add the header if it is already present. (Only applies to the `set` action.). Default `false`.
        /// </summary>
        [Input("ignoreIfSet")]
        public Input<bool>? IgnoreIfSet { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// Regular expression to use (Only applies to the `regex` and `regex_repeat` actions.)
        /// </summary>
        [Input("regex")]
        public Input<string>? Regex { get; set; }

        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// Variable to be used as a source for the header
        /// content. (Does not apply to the `delete` action.)
        /// </summary>
        [Input("source")]
        public Input<string>? Source { get; set; }

        /// <summary>
        /// Value to substitute in place of regular expression. (Only applies to the `regex` and `regex_repeat` actions.)
        /// </summary>
        [Input("substitution")]
        public Input<string>? Substitution { get; set; }

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1HeadersGetArgs()
        {
        }
    }

    public sealed class Servicev1HealthchecksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// How often to run the Healthcheck in milliseconds. Default `5000`.
        /// </summary>
        [Input("checkInterval")]
        public Input<int>? CheckInterval { get; set; }

        /// <summary>
        /// The status code expected from the host. Default `200`.
        /// </summary>
        [Input("expectedResponse")]
        public Input<int>? ExpectedResponse { get; set; }

        /// <summary>
        /// The Host header to send for this Healthcheck.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`.
        /// </summary>
        [Input("httpVersion")]
        public Input<string>? HttpVersion { get; set; }

        /// <summary>
        /// When loading a config, the initial number of probes to be seen as OK. Default `2`.
        /// </summary>
        [Input("initial")]
        public Input<int>? Initial { get; set; }

        /// <summary>
        /// Which HTTP method to use. Default `HEAD`.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// How many Healthchecks must succeed to be considered healthy. Default `3`.
        /// </summary>
        [Input("threshold")]
        public Input<int>? Threshold { get; set; }

        /// <summary>
        /// Timeout in milliseconds. Default `500`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`.
        /// </summary>
        [Input("window")]
        public Input<int>? Window { get; set; }

        public Servicev1HealthchecksArgs()
        {
        }
    }

    public sealed class Servicev1HealthchecksGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// How often to run the Healthcheck in milliseconds. Default `5000`.
        /// </summary>
        [Input("checkInterval")]
        public Input<int>? CheckInterval { get; set; }

        /// <summary>
        /// The status code expected from the host. Default `200`.
        /// </summary>
        [Input("expectedResponse")]
        public Input<int>? ExpectedResponse { get; set; }

        /// <summary>
        /// The Host header to send for this Healthcheck.
        /// </summary>
        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        /// <summary>
        /// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`.
        /// </summary>
        [Input("httpVersion")]
        public Input<string>? HttpVersion { get; set; }

        /// <summary>
        /// When loading a config, the initial number of probes to be seen as OK. Default `2`.
        /// </summary>
        [Input("initial")]
        public Input<int>? Initial { get; set; }

        /// <summary>
        /// Which HTTP method to use. Default `HEAD`.
        /// </summary>
        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        /// <summary>
        /// How many Healthchecks must succeed to be considered healthy. Default `3`.
        /// </summary>
        [Input("threshold")]
        public Input<int>? Threshold { get; set; }

        /// <summary>
        /// Timeout in milliseconds. Default `500`.
        /// </summary>
        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        /// <summary>
        /// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`.
        /// </summary>
        [Input("window")]
        public Input<int>? Window { get; set; }

        public Servicev1HealthchecksGetArgs()
        {
        }
    }

    public sealed class Servicev1LogentriesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The Splunk token to be used for authentication.
        /// </summary>
        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        /// <summary>
        /// Whether to use TLS for secure logging. Defaults to `true`
        /// </summary>
        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public Servicev1LogentriesArgs()
        {
        }
    }

    public sealed class Servicev1LogentriesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The Splunk token to be used for authentication.
        /// </summary>
        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        /// <summary>
        /// Whether to use TLS for secure logging. Defaults to `true`
        /// </summary>
        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public Servicev1LogentriesGetArgs()
        {
        }
    }

    public sealed class Servicev1PapertrailsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A hostname or IPv4 address of the Syslog endpoint.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        public Servicev1PapertrailsArgs()
        {
        }
    }

    public sealed class Servicev1PapertrailsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A hostname or IPv4 address of the Syslog endpoint.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        public Servicev1PapertrailsGetArgs()
        {
        }
    }

    public sealed class Servicev1RequestSettingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allows you to terminate request handling and immediately
        /// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Disable collapsed forwarding, so you don't wait
        /// for other objects to origin.
        /// </summary>
        [Input("bypassBusyWait")]
        public Input<bool>? BypassBusyWait { get; set; }

        /// <summary>
        /// Sets the host header.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// Force a cache miss for the request. If specified,
        /// can be `true` or `false`.
        /// </summary>
        [Input("forceMiss")]
        public Input<bool>? ForceMiss { get; set; }

        /// <summary>
        /// Forces the request to use SSL (Redirects a non-SSL request to SSL).
        /// </summary>
        [Input("forceSsl")]
        public Input<bool>? ForceSsl { get; set; }

        /// <summary>
        /// Injects Fastly-Geo-Country, Fastly-Geo-City, and
        /// Fastly-Geo-Region into the request headers.
        /// </summary>
        [Input("geoHeaders")]
        public Input<bool>? GeoHeaders { get; set; }

        /// <summary>
        /// Comma separated list of varnish request object fields
        /// that should be in the hash key.
        /// </summary>
        [Input("hashKeys")]
        public Input<string>? HashKeys { get; set; }

        /// <summary>
        /// How old an object is allowed to be to serve
        /// `stale-if-error` or `stale-while-revalidate`, in seconds.
        /// </summary>
        [Input("maxStaleAge")]
        public Input<int>? MaxStaleAge { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        /// <summary>
        /// Injects the X-Timer info into the request for
        /// viewing origin fetch durations.
        /// </summary>
        [Input("timerSupport")]
        public Input<bool>? TimerSupport { get; set; }

        /// <summary>
        /// X-Forwarded-For, should be `clear`, `leave`, `append`,
        /// `append_all`, or `overwrite`. Default `append`.
        /// </summary>
        [Input("xff")]
        public Input<string>? Xff { get; set; }

        public Servicev1RequestSettingsArgs()
        {
        }
    }

    public sealed class Servicev1RequestSettingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Allows you to terminate request handling and immediately
        /// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
        /// </summary>
        [Input("action")]
        public Input<string>? Action { get; set; }

        /// <summary>
        /// Disable collapsed forwarding, so you don't wait
        /// for other objects to origin.
        /// </summary>
        [Input("bypassBusyWait")]
        public Input<bool>? BypassBusyWait { get; set; }

        /// <summary>
        /// Sets the host header.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// Force a cache miss for the request. If specified,
        /// can be `true` or `false`.
        /// </summary>
        [Input("forceMiss")]
        public Input<bool>? ForceMiss { get; set; }

        /// <summary>
        /// Forces the request to use SSL (Redirects a non-SSL request to SSL).
        /// </summary>
        [Input("forceSsl")]
        public Input<bool>? ForceSsl { get; set; }

        /// <summary>
        /// Injects Fastly-Geo-Country, Fastly-Geo-City, and
        /// Fastly-Geo-Region into the request headers.
        /// </summary>
        [Input("geoHeaders")]
        public Input<bool>? GeoHeaders { get; set; }

        /// <summary>
        /// Comma separated list of varnish request object fields
        /// that should be in the hash key.
        /// </summary>
        [Input("hashKeys")]
        public Input<string>? HashKeys { get; set; }

        /// <summary>
        /// How old an object is allowed to be to serve
        /// `stale-if-error` or `stale-while-revalidate`, in seconds.
        /// </summary>
        [Input("maxStaleAge")]
        public Input<int>? MaxStaleAge { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        /// <summary>
        /// Injects the X-Timer info into the request for
        /// viewing origin fetch durations.
        /// </summary>
        [Input("timerSupport")]
        public Input<bool>? TimerSupport { get; set; }

        /// <summary>
        /// X-Forwarded-For, should be `clear`, `leave`, `append`,
        /// `append_all`, or `overwrite`. Default `append`.
        /// </summary>
        [Input("xff")]
        public Input<string>? Xff { get; set; }

        public Servicev1RequestSettingsGetArgs()
        {
        }
    }

    public sealed class Servicev1ResponseObjectsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        /// <summary>
        /// The custom VCL code to upload.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The MIME type of the content.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        /// <summary>
        /// The HTTP Response. Default `Ok`.
        /// </summary>
        [Input("response")]
        public Input<string>? Response { get; set; }

        /// <summary>
        /// The HTTP Status Code. Default `200`.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        public Servicev1ResponseObjectsArgs()
        {
        }
    }

    public sealed class Servicev1ResponseObjectsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        /// <summary>
        /// The custom VCL code to upload.
        /// </summary>
        [Input("content")]
        public Input<string>? Content { get; set; }

        /// <summary>
        /// The MIME type of the content.
        /// </summary>
        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        /// <summary>
        /// The HTTP Response. Default `Ok`.
        /// </summary>
        [Input("response")]
        public Input<string>? Response { get; set; }

        /// <summary>
        /// The HTTP Status Code. Default `200`.
        /// </summary>
        [Input("status")]
        public Input<int>? Status { get; set; }

        public Servicev1ResponseObjectsGetArgs()
        {
        }
    }

    public sealed class Servicev1S3loggingsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the bucket in which to store the logs.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`,
        /// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// Level of GZIP compression from `0`to `9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`.
        /// </summary>
        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The S3 redundancy level. Should be formatted; one of: `standard`, `reduced_redundancy` or null. Default `null`.
        /// </summary>
        [Input("redundancy")]
        public Input<string>? Redundancy { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// AWS Access Key of an account with the required
        /// permissions to post logs. It is **strongly** recommended you create a separate
        /// IAM user with permissions to only operate on this Bucket. This key will be
        /// not be encrypted. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`.
        /// </summary>
        [Input("s3AccessKey")]
        public Input<string>? S3AccessKey { get; set; }

        /// <summary>
        /// AWS Secret Key of an account with the required
        /// permissions to post logs. It is **strongly** recommended you create a separate
        /// IAM user with permissions to only operate on this Bucket. This secret will be
        /// not be encrypted. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`.
        /// </summary>
        [Input("s3SecretKey")]
        public Input<string>? S3SecretKey { get; set; }

        [Input("serverSideEncryption")]
        public Input<string>? ServerSideEncryption { get; set; }

        [Input("serverSideEncryptionKmsKeyId")]
        public Input<string>? ServerSideEncryptionKmsKeyId { get; set; }

        /// <summary>
        /// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`.
        /// </summary>
        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1S3loggingsArgs()
        {
        }
    }

    public sealed class Servicev1S3loggingsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The name of the bucket in which to store the logs.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`,
        /// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// Level of GZIP compression from `0`to `9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`.
        /// </summary>
        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        [Input("path")]
        public Input<string>? Path { get; set; }

        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`.
        /// </summary>
        [Input("period")]
        public Input<int>? Period { get; set; }

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The S3 redundancy level. Should be formatted; one of: `standard`, `reduced_redundancy` or null. Default `null`.
        /// </summary>
        [Input("redundancy")]
        public Input<string>? Redundancy { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// AWS Access Key of an account with the required
        /// permissions to post logs. It is **strongly** recommended you create a separate
        /// IAM user with permissions to only operate on this Bucket. This key will be
        /// not be encrypted. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`.
        /// </summary>
        [Input("s3AccessKey")]
        public Input<string>? S3AccessKey { get; set; }

        /// <summary>
        /// AWS Secret Key of an account with the required
        /// permissions to post logs. It is **strongly** recommended you create a separate
        /// IAM user with permissions to only operate on this Bucket. This secret will be
        /// not be encrypted. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`.
        /// </summary>
        [Input("s3SecretKey")]
        public Input<string>? S3SecretKey { get; set; }

        [Input("serverSideEncryption")]
        public Input<string>? ServerSideEncryption { get; set; }

        [Input("serverSideEncryptionKmsKeyId")]
        public Input<string>? ServerSideEncryptionKmsKeyId { get; set; }

        /// <summary>
        /// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`.
        /// </summary>
        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1S3loggingsGetArgs()
        {
        }
    }

    public sealed class Servicev1SnippetsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The custom VCL code to upload.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1SnippetsArgs()
        {
        }
    }

    public sealed class Servicev1SnippetsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The custom VCL code to upload.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1SnippetsGetArgs()
        {
        }
    }

    public sealed class Servicev1SplunksArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The Splunk token to be used for authentication.
        /// </summary>
        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        /// <summary>
        /// The Splunk URL to stream logs to.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public Servicev1SplunksArgs()
        {
        }
    }

    public sealed class Servicev1SplunksGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The Splunk token to be used for authentication.
        /// </summary>
        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        /// <summary>
        /// The Splunk URL to stream logs to.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public Servicev1SplunksGetArgs()
        {
        }
    }

    public sealed class Servicev1SumologicsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The Splunk URL to stream logs to.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public Servicev1SumologicsArgs()
        {
        }
    }

    public sealed class Servicev1SumologicsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// The Splunk URL to stream logs to.
        /// </summary>
        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public Servicev1SumologicsGetArgs()
        {
        }
    }

    public sealed class Servicev1SyslogsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A hostname or IPv4 address of the Syslog endpoint.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
        /// </summary>
        [Input("tlsCaCert")]
        public Input<string>? TlsCaCert { get; set; }

        /// <summary>
        /// The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
        /// </summary>
        [Input("tlsClientCert")]
        public Input<string>? TlsClientCert { get; set; }

        /// <summary>
        /// The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
        /// </summary>
        [Input("tlsClientKey")]
        public Input<string>? TlsClientKey { get; set; }

        /// <summary>
        /// Used during the TLS handshake to validate the certificate.
        /// </summary>
        [Input("tlsHostname")]
        public Input<string>? TlsHostname { get; set; }

        /// <summary>
        /// The Splunk token to be used for authentication.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Whether to use TLS for secure logging. Defaults to `true`
        /// </summary>
        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public Servicev1SyslogsArgs()
        {
        }
    }

    public sealed class Servicev1SyslogsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// A hostname or IPv4 address of the Syslog endpoint.
        /// </summary>
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        [Input("placement")]
        public Input<string>? Placement { get; set; }

        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        /// <summary>
        /// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
        /// </summary>
        [Input("tlsCaCert")]
        public Input<string>? TlsCaCert { get; set; }

        /// <summary>
        /// The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
        /// </summary>
        [Input("tlsClientCert")]
        public Input<string>? TlsClientCert { get; set; }

        /// <summary>
        /// The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
        /// </summary>
        [Input("tlsClientKey")]
        public Input<string>? TlsClientKey { get; set; }

        /// <summary>
        /// Used during the TLS handshake to validate the certificate.
        /// </summary>
        [Input("tlsHostname")]
        public Input<string>? TlsHostname { get; set; }

        /// <summary>
        /// The Splunk token to be used for authentication.
        /// </summary>
        [Input("token")]
        public Input<string>? Token { get; set; }

        /// <summary>
        /// Whether to use TLS for secure logging. Defaults to `true`
        /// </summary>
        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public Servicev1SyslogsGetArgs()
        {
        }
    }

    public sealed class Servicev1VclsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The custom VCL code to upload.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// If `true`, use this block as the main configuration. If
        /// `false`, use this block as an includable library. Only a single VCL block can be
        /// marked as the main block. Default is `false`.
        /// </summary>
        [Input("main")]
        public Input<bool>? Main { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1VclsArgs()
        {
        }
    }

    public sealed class Servicev1VclsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The custom VCL code to upload.
        /// </summary>
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// If `true`, use this block as the main configuration. If
        /// `false`, use this block as an includable library. Only a single VCL block can be
        /// marked as the main block. Default is `false`.
        /// </summary>
        [Input("main")]
        public Input<bool>? Main { get; set; }

        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1VclsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class Servicev1Acls
    {
        /// <summary>
        /// The ID of the ACL.
        /// </summary>
        public readonly string AclId;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private Servicev1Acls(
            string aclId,
            string name)
        {
            AclId = aclId;
            Name = name;
        }
    }

    [OutputType]
    public sealed class Servicev1Backends
    {
        /// <summary>
        /// A hostname or IPv4 address of the Syslog endpoint.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Denotes if this Backend should be
        /// included in the pool of backends that requests are load balanced against.
        /// Default `true`.
        /// </summary>
        public readonly bool? AutoLoadbalance;
        /// <summary>
        /// How long to wait between bytes in milliseconds. Default `10000`.
        /// </summary>
        public readonly int? BetweenBytesTimeout;
        /// <summary>
        /// How long to wait for a timeout in milliseconds.
        /// Default `1000`
        /// </summary>
        public readonly int? ConnectTimeout;
        /// <summary>
        /// Number of errors to allow before the Backend is marked as down. Default `0`.
        /// </summary>
        public readonly int? ErrorThreshold;
        /// <summary>
        /// How long to wait for the first bytes in milliseconds. Default `15000`.
        /// </summary>
        public readonly int? FirstByteTimeout;
        /// <summary>
        /// Name of a defined `healthcheck` to assign to this backend.
        /// </summary>
        public readonly string? Healthcheck;
        /// <summary>
        /// Maximum number of connections for this Backend.
        /// Default `200`.
        /// </summary>
        public readonly int? MaxConn;
        /// <summary>
        /// Maximum allowed TLS version on SSL connections to this backend.
        /// </summary>
        public readonly string? MaxTlsVersion;
        /// <summary>
        /// Minimum allowed TLS version on SSL connections to this backend.
        /// </summary>
        public readonly string? MinTlsVersion;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The hostname to override the Host header.
        /// </summary>
        public readonly string? OverrideHost;
        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        public readonly string? RequestCondition;
        /// <summary>
        /// Selected POP to serve as a "shield" for origin servers.
        /// </summary>
        public readonly string? Shield;
        /// <summary>
        /// CA certificate attached to origin.
        /// </summary>
        public readonly string? SslCaCert;
        /// <summary>
        /// Overrides ssl_hostname, but only for cert verification. Does not affect SNI at all.
        /// </summary>
        public readonly string? SslCertHostname;
        /// <summary>
        /// Be strict about checking SSL certs. Default `true`.
        /// </summary>
        public readonly bool? SslCheckCert;
        /// <summary>
        /// Comma separated list of OpenSSL Ciphers to try when negotiating to the backend.
        /// </summary>
        public readonly string? SslCiphers;
        /// <summary>
        /// Client certificate attached to origin. Used when connecting to the backend.
        /// </summary>
        public readonly string? SslClientCert;
        /// <summary>
        /// Client key attached to origin. Used when connecting to the backend.
        /// </summary>
        public readonly string? SslClientKey;
        /// <summary>
        /// Used for both SNI during the TLS handshake and to validate the cert.
        /// </summary>
        public readonly string? SslHostname;
        /// <summary>
        /// Overrides ssl_hostname, but only for SNI in the handshake. Does not affect cert validation at all.
        /// </summary>
        public readonly string? SslSniHostname;
        /// <summary>
        /// Whether or not to use SSL to reach the backend. Default `false`.
        /// </summary>
        public readonly bool? UseSsl;
        /// <summary>
        /// The [portion of traffic](https://docs.fastly.com/guides/performance-tuning/load-balancing-configuration.html#how-weight-affects-load-balancing) to send to this Backend. Each Backend receives `weight / total` of the traffic. Default `100`.
        /// </summary>
        public readonly int? Weight;

        [OutputConstructor]
        private Servicev1Backends(
            string address,
            bool? autoLoadbalance,
            int? betweenBytesTimeout,
            int? connectTimeout,
            int? errorThreshold,
            int? firstByteTimeout,
            string? healthcheck,
            int? maxConn,
            string? maxTlsVersion,
            string? minTlsVersion,
            string name,
            string? overrideHost,
            int? port,
            string? requestCondition,
            string? shield,
            string? sslCaCert,
            string? sslCertHostname,
            bool? sslCheckCert,
            string? sslCiphers,
            string? sslClientCert,
            string? sslClientKey,
            string? sslHostname,
            string? sslSniHostname,
            bool? useSsl,
            int? weight)
        {
            Address = address;
            AutoLoadbalance = autoLoadbalance;
            BetweenBytesTimeout = betweenBytesTimeout;
            ConnectTimeout = connectTimeout;
            ErrorThreshold = errorThreshold;
            FirstByteTimeout = firstByteTimeout;
            Healthcheck = healthcheck;
            MaxConn = maxConn;
            MaxTlsVersion = maxTlsVersion;
            MinTlsVersion = minTlsVersion;
            Name = name;
            OverrideHost = overrideHost;
            Port = port;
            RequestCondition = requestCondition;
            Shield = shield;
            SslCaCert = sslCaCert;
            SslCertHostname = sslCertHostname;
            SslCheckCert = sslCheckCert;
            SslCiphers = sslCiphers;
            SslClientCert = sslClientCert;
            SslClientKey = sslClientKey;
            SslHostname = sslHostname;
            SslSniHostname = sslSniHostname;
            UseSsl = useSsl;
            Weight = weight;
        }
    }

    [OutputType]
    public sealed class Servicev1Bigqueryloggings
    {
        /// <summary>
        /// The ID of your BigQuery dataset.
        /// </summary>
        public readonly string Dataset;
        /// <summary>
        /// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
        /// </summary>
        public readonly string? Email;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The ID of your GCP project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The secret key associated with the sservice account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines.
        /// </summary>
        public readonly string? SecretKey;
        /// <summary>
        /// The ID of your BigQuery table.
        /// </summary>
        public readonly string Table;
        /// <summary>
        /// Big query table name suffix template. If set will be interpreted as a strftime compatible string and used as the [Template Suffix for your table](https://cloud.google.com/bigquery/streaming-data-into-bigquery#template-tables).
        /// </summary>
        public readonly string? Template;

        [OutputConstructor]
        private Servicev1Bigqueryloggings(
            string dataset,
            string? email,
            string? format,
            string name,
            string? placement,
            string projectId,
            string? responseCondition,
            string? secretKey,
            string table,
            string? template)
        {
            Dataset = dataset;
            Email = email;
            Format = format;
            Name = name;
            Placement = placement;
            ProjectId = projectId;
            ResponseCondition = responseCondition;
            SecretKey = secretKey;
            Table = table;
            Template = template;
        }
    }

    [OutputType]
    public sealed class Servicev1Blobstorageloggings
    {
        /// <summary>
        /// The unique Azure Blob Storage namespace in which your data objects are stored.
        /// </summary>
        public readonly string AccountName;
        /// <summary>
        /// The name of the Azure Blob Storage container in which to store logs.
        /// </summary>
        public readonly string Container;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// Level of GZIP compression from `0`to `9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`.
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`.
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The Azure shared access signature providing write access to the blob service objects. Be sure to update your token before it expires or the logging functionality will not work.
        /// </summary>
        public readonly string SasToken;
        /// <summary>
        /// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`.
        /// </summary>
        public readonly string? TimestampFormat;

        [OutputConstructor]
        private Servicev1Blobstorageloggings(
            string accountName,
            string container,
            string? format,
            int? formatVersion,
            int? gzipLevel,
            string? messageType,
            string name,
            string? path,
            int? period,
            string? placement,
            string? publicKey,
            string? responseCondition,
            string sasToken,
            string? timestampFormat)
        {
            AccountName = accountName;
            Container = container;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            Placement = placement;
            PublicKey = publicKey;
            ResponseCondition = responseCondition;
            SasToken = sasToken;
            TimestampFormat = timestampFormat;
        }
    }

    [OutputType]
    public sealed class Servicev1CacheSettings
    {
        /// <summary>
        /// Allows you to terminate request handling and immediately
        /// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
        /// </summary>
        public readonly string? Action;
        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        public readonly string? CacheCondition;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Max "Time To Live" for stale (unreachable) objects.
        /// </summary>
        public readonly int? StaleTtl;
        /// <summary>
        /// The Time-To-Live (TTL) for the object.
        /// </summary>
        public readonly int? Ttl;

        [OutputConstructor]
        private Servicev1CacheSettings(
            string? action,
            string? cacheCondition,
            string name,
            int? staleTtl,
            int? ttl)
        {
            Action = action;
            CacheCondition = cacheCondition;
            Name = name;
            StaleTtl = staleTtl;
            Ttl = ttl;
        }
    }

    [OutputType]
    public sealed class Servicev1Conditions
    {
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// The statement used to determine if the condition is met.
        /// </summary>
        public readonly string Statement;
        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private Servicev1Conditions(
            string name,
            int? priority,
            string statement,
            string type)
        {
            Name = name;
            Priority = priority;
            Statement = statement;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Dictionaries
    {
        /// <summary>
        /// The ID of the dictionary.
        /// </summary>
        public readonly string DictionaryId;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        public readonly bool? WriteOnly;

        [OutputConstructor]
        private Servicev1Dictionaries(
            string dictionaryId,
            string name,
            bool? writeOnly)
        {
            DictionaryId = dictionaryId;
            Name = name;
            WriteOnly = writeOnly;
        }
    }

    [OutputType]
    public sealed class Servicev1Directors
    {
        /// <summary>
        /// Names of defined backends to map the director to. Example: `[ "origin1", "origin2" ]`
        /// </summary>
        public readonly ImmutableArray<string> Backends;
        /// <summary>
        /// Load balancing weight for the backends. Default `100`.
        /// </summary>
        public readonly int? Capacity;
        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        public readonly string? Comment;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Percentage of capacity that needs to be up for the director itself to be considered up. Default `75`.
        /// </summary>
        public readonly int? Quorum;
        /// <summary>
        /// How many backends to search if it fails. Default `5`.
        /// </summary>
        public readonly int? Retries;
        /// <summary>
        /// Selected POP to serve as a "shield" for origin servers.
        /// </summary>
        public readonly string? Shield;
        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        public readonly int? Type;

        [OutputConstructor]
        private Servicev1Directors(
            ImmutableArray<string> backends,
            int? capacity,
            string? comment,
            string name,
            int? quorum,
            int? retries,
            string? shield,
            int? type)
        {
            Backends = backends;
            Capacity = capacity;
            Comment = comment;
            Name = name;
            Quorum = quorum;
            Retries = retries;
            Shield = shield;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Domains
    {
        /// <summary>
        /// An optional comment about the Director.
        /// </summary>
        public readonly string? Comment;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private Servicev1Domains(
            string? comment,
            string name)
        {
            Comment = comment;
            Name = name;
        }
    }

    [OutputType]
    public sealed class Servicev1Dynamicsnippets
    {
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// The ID of the dynamic snippet.
        /// </summary>
        public readonly string SnippetId;
        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private Servicev1Dynamicsnippets(
            string name,
            int? priority,
            string snippetId,
            string type)
        {
            Name = name;
            Priority = priority;
            SnippetId = snippetId;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Gcsloggings
    {
        /// <summary>
        /// The name of the bucket in which to store the logs.
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// The email for the service account with write access to your BigQuery dataset. If not provided, this will be pulled from a `FASTLY_BQ_EMAIL` environment variable.
        /// </summary>
        public readonly string? Email;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// Level of GZIP compression from `0`to `9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`.
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`.
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The secret key associated with the sservice account that has write access to your BigQuery table. If not provided, this will be pulled from the `FASTLY_BQ_SECRET_KEY` environment variable. Typical format for this is a private key in a string with newlines.
        /// </summary>
        public readonly string? SecretKey;
        /// <summary>
        /// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`.
        /// </summary>
        public readonly string? TimestampFormat;

        [OutputConstructor]
        private Servicev1Gcsloggings(
            string bucketName,
            string? email,
            string? format,
            int? gzipLevel,
            string? messageType,
            string name,
            string? path,
            int? period,
            string? placement,
            string? responseCondition,
            string? secretKey,
            string? timestampFormat)
        {
            BucketName = bucketName;
            Email = email;
            Format = format;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            Placement = placement;
            ResponseCondition = responseCondition;
            SecretKey = secretKey;
            TimestampFormat = timestampFormat;
        }
    }

    [OutputType]
    public sealed class Servicev1Gzips
    {
        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        public readonly string? CacheCondition;
        /// <summary>
        /// The content-type for each type of content you wish to
        /// have dynamically gzip'ed. Example: `["text/html", "text/css"]`.
        /// </summary>
        public readonly ImmutableArray<string> ContentTypes;
        /// <summary>
        /// File extensions for each file type to dynamically
        /// gzip. Example: `["css", "js"]`.
        /// </summary>
        public readonly ImmutableArray<string> Extensions;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private Servicev1Gzips(
            string? cacheCondition,
            ImmutableArray<string> contentTypes,
            ImmutableArray<string> extensions,
            string name)
        {
            CacheCondition = cacheCondition;
            ContentTypes = contentTypes;
            Extensions = extensions;
            Name = name;
        }
    }

    [OutputType]
    public sealed class Servicev1Headers
    {
        /// <summary>
        /// Allows you to terminate request handling and immediately
        /// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
        /// </summary>
        public readonly string Action;
        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        public readonly string? CacheCondition;
        /// <summary>
        /// The name of the header that is going to be affected by the Action.
        /// </summary>
        public readonly string Destination;
        /// <summary>
        /// Do not add the header if it is already present. (Only applies to the `set` action.). Default `false`.
        /// </summary>
        public readonly bool? IgnoreIfSet;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// Regular expression to use (Only applies to the `regex` and `regex_repeat` actions.)
        /// </summary>
        public readonly string Regex;
        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        public readonly string? RequestCondition;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// Variable to be used as a source for the header
        /// content. (Does not apply to the `delete` action.)
        /// </summary>
        public readonly string Source;
        /// <summary>
        /// Value to substitute in place of regular expression. (Only applies to the `regex` and `regex_repeat` actions.)
        /// </summary>
        public readonly string Substitution;
        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private Servicev1Headers(
            string action,
            string? cacheCondition,
            string destination,
            bool? ignoreIfSet,
            string name,
            int? priority,
            string regex,
            string? requestCondition,
            string? responseCondition,
            string source,
            string substitution,
            string type)
        {
            Action = action;
            CacheCondition = cacheCondition;
            Destination = destination;
            IgnoreIfSet = ignoreIfSet;
            Name = name;
            Priority = priority;
            Regex = regex;
            RequestCondition = requestCondition;
            ResponseCondition = responseCondition;
            Source = source;
            Substitution = substitution;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Healthchecks
    {
        /// <summary>
        /// How often to run the Healthcheck in milliseconds. Default `5000`.
        /// </summary>
        public readonly int? CheckInterval;
        /// <summary>
        /// The status code expected from the host. Default `200`.
        /// </summary>
        public readonly int? ExpectedResponse;
        /// <summary>
        /// The Host header to send for this Healthcheck.
        /// </summary>
        public readonly string Host;
        /// <summary>
        /// Whether to use version 1.0 or 1.1 HTTP. Default `1.1`.
        /// </summary>
        public readonly string? HttpVersion;
        /// <summary>
        /// When loading a config, the initial number of probes to be seen as OK. Default `2`.
        /// </summary>
        public readonly int? Initial;
        /// <summary>
        /// Which HTTP method to use. Default `HEAD`.
        /// </summary>
        public readonly string? Method;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// How many Healthchecks must succeed to be considered healthy. Default `3`.
        /// </summary>
        public readonly int? Threshold;
        /// <summary>
        /// Timeout in milliseconds. Default `500`.
        /// </summary>
        public readonly int? Timeout;
        /// <summary>
        /// The number of most recent Healthcheck queries to keep for this Healthcheck. Default `5`.
        /// </summary>
        public readonly int? Window;

        [OutputConstructor]
        private Servicev1Healthchecks(
            int? checkInterval,
            int? expectedResponse,
            string host,
            string? httpVersion,
            int? initial,
            string? method,
            string name,
            string path,
            int? threshold,
            int? timeout,
            int? window)
        {
            CheckInterval = checkInterval;
            ExpectedResponse = expectedResponse;
            Host = host;
            HttpVersion = httpVersion;
            Initial = initial;
            Method = method;
            Name = name;
            Path = path;
            Threshold = threshold;
            Timeout = timeout;
            Window = window;
        }
    }

    [OutputType]
    public sealed class Servicev1Logentries
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The Splunk token to be used for authentication.
        /// </summary>
        public readonly string Token;
        /// <summary>
        /// Whether to use TLS for secure logging. Defaults to `true`
        /// </summary>
        public readonly bool? UseTls;

        [OutputConstructor]
        private Servicev1Logentries(
            string? format,
            int? formatVersion,
            string name,
            string? placement,
            int? port,
            string? responseCondition,
            string token,
            bool? useTls)
        {
            Format = format;
            FormatVersion = formatVersion;
            Name = name;
            Placement = placement;
            Port = port;
            ResponseCondition = responseCondition;
            Token = token;
            UseTls = useTls;
        }
    }

    [OutputType]
    public sealed class Servicev1Papertrails
    {
        /// <summary>
        /// A hostname or IPv4 address of the Syslog endpoint.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        public readonly int Port;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;

        [OutputConstructor]
        private Servicev1Papertrails(
            string address,
            string? format,
            string name,
            string? placement,
            int port,
            string? responseCondition)
        {
            Address = address;
            Format = format;
            Name = name;
            Placement = placement;
            Port = port;
            ResponseCondition = responseCondition;
        }
    }

    [OutputType]
    public sealed class Servicev1RequestSettings
    {
        /// <summary>
        /// Allows you to terminate request handling and immediately
        /// perform an action. When set it can be `lookup` or `pass` (Ignore the cache completely).
        /// </summary>
        public readonly string? Action;
        /// <summary>
        /// Disable collapsed forwarding, so you don't wait
        /// for other objects to origin.
        /// </summary>
        public readonly bool? BypassBusyWait;
        /// <summary>
        /// Sets the host header.
        /// </summary>
        public readonly string? DefaultHost;
        /// <summary>
        /// Force a cache miss for the request. If specified,
        /// can be `true` or `false`.
        /// </summary>
        public readonly bool? ForceMiss;
        /// <summary>
        /// Forces the request to use SSL (Redirects a non-SSL request to SSL).
        /// </summary>
        public readonly bool? ForceSsl;
        /// <summary>
        /// Injects Fastly-Geo-Country, Fastly-Geo-City, and
        /// Fastly-Geo-Region into the request headers.
        /// </summary>
        public readonly bool? GeoHeaders;
        /// <summary>
        /// Comma separated list of varnish request object fields
        /// that should be in the hash key.
        /// </summary>
        public readonly string? HashKeys;
        /// <summary>
        /// How old an object is allowed to be to serve
        /// `stale-if-error` or `stale-while-revalidate`, in seconds.
        /// </summary>
        public readonly int? MaxStaleAge;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        public readonly string? RequestCondition;
        /// <summary>
        /// Injects the X-Timer info into the request for
        /// viewing origin fetch durations.
        /// </summary>
        public readonly bool? TimerSupport;
        /// <summary>
        /// X-Forwarded-For, should be `clear`, `leave`, `append`,
        /// `append_all`, or `overwrite`. Default `append`.
        /// </summary>
        public readonly string? Xff;

        [OutputConstructor]
        private Servicev1RequestSettings(
            string? action,
            bool? bypassBusyWait,
            string? defaultHost,
            bool? forceMiss,
            bool? forceSsl,
            bool? geoHeaders,
            string? hashKeys,
            int? maxStaleAge,
            string name,
            string? requestCondition,
            bool? timerSupport,
            string? xff)
        {
            Action = action;
            BypassBusyWait = bypassBusyWait;
            DefaultHost = defaultHost;
            ForceMiss = forceMiss;
            ForceSsl = forceSsl;
            GeoHeaders = geoHeaders;
            HashKeys = hashKeys;
            MaxStaleAge = maxStaleAge;
            Name = name;
            RequestCondition = requestCondition;
            TimerSupport = timerSupport;
            Xff = xff;
        }
    }

    [OutputType]
    public sealed class Servicev1ResponseObjects
    {
        /// <summary>
        /// Name of already defined `condition` to check after we have retrieved an object. If the condition passes then deliver this Request Object instead. This `condition` must be of type `CACHE`. For detailed information about Conditionals,
        /// see [Fastly's Documentation on Conditionals][fastly-conditionals].
        /// </summary>
        public readonly string? CacheCondition;
        /// <summary>
        /// The custom VCL code to upload.
        /// </summary>
        public readonly string? Content;
        /// <summary>
        /// The MIME type of the content.
        /// </summary>
        public readonly string? ContentType;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Name of already defined `condition` to be checked during the request phase. If the condition passes then this object will be delivered. This `condition` must be of type `REQUEST`.
        /// </summary>
        public readonly string? RequestCondition;
        /// <summary>
        /// The HTTP Response. Default `Ok`.
        /// </summary>
        public readonly string? Response;
        /// <summary>
        /// The HTTP Status Code. Default `200`.
        /// </summary>
        public readonly int? Status;

        [OutputConstructor]
        private Servicev1ResponseObjects(
            string? cacheCondition,
            string? content,
            string? contentType,
            string name,
            string? requestCondition,
            string? response,
            int? status)
        {
            CacheCondition = cacheCondition;
            Content = content;
            ContentType = contentType;
            Name = name;
            RequestCondition = requestCondition;
            Response = response;
            Status = status;
        }
    }

    [OutputType]
    public sealed class Servicev1S3loggings
    {
        /// <summary>
        /// The name of the bucket in which to store the logs.
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// If you created the S3 bucket outside of `us-east-1`,
        /// then specify the corresponding bucket endpoint. Example: `s3-us-west-2.amazonaws.com`.
        /// </summary>
        public readonly string? Domain;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// Level of GZIP compression from `0`to `9`. `0` means no compression. `1` is the fastest and the least compressed version, `9` is the slowest and the most compressed version. Default `0`.
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The path to upload logs to. Must end with a trailing slash. If this field is left empty, the files will be saved in the container's root path.
        /// </summary>
        public readonly string? Path;
        /// <summary>
        /// How frequently the logs should be transferred in seconds. Default `3600`.
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The S3 redundancy level. Should be formatted; one of: `standard`, `reduced_redundancy` or null. Default `null`.
        /// </summary>
        public readonly string? Redundancy;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// AWS Access Key of an account with the required
        /// permissions to post logs. It is **strongly** recommended you create a separate
        /// IAM user with permissions to only operate on this Bucket. This key will be
        /// not be encrypted. You can provide this key via an environment variable, `FASTLY_S3_ACCESS_KEY`.
        /// </summary>
        public readonly string? S3AccessKey;
        /// <summary>
        /// AWS Secret Key of an account with the required
        /// permissions to post logs. It is **strongly** recommended you create a separate
        /// IAM user with permissions to only operate on this Bucket. This secret will be
        /// not be encrypted. You can provide this secret via an environment variable, `FASTLY_S3_SECRET_KEY`.
        /// </summary>
        public readonly string? S3SecretKey;
        public readonly string? ServerSideEncryption;
        public readonly string? ServerSideEncryptionKmsKeyId;
        /// <summary>
        /// `strftime` specified timestamp formatting. Default `%Y-%m-%dT%H:%M:%S.000`.
        /// </summary>
        public readonly string? TimestampFormat;

        [OutputConstructor]
        private Servicev1S3loggings(
            string bucketName,
            string? domain,
            string? format,
            int? formatVersion,
            int? gzipLevel,
            string? messageType,
            string name,
            string? path,
            int? period,
            string? placement,
            string? redundancy,
            string? responseCondition,
            string? s3AccessKey,
            string? s3SecretKey,
            string? serverSideEncryption,
            string? serverSideEncryptionKmsKeyId,
            string? timestampFormat)
        {
            BucketName = bucketName;
            Domain = domain;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            Placement = placement;
            Redundancy = redundancy;
            ResponseCondition = responseCondition;
            S3AccessKey = s3AccessKey;
            S3SecretKey = s3SecretKey;
            ServerSideEncryption = serverSideEncryption;
            ServerSideEncryptionKmsKeyId = serverSideEncryptionKmsKeyId;
            TimestampFormat = timestampFormat;
        }
    }

    [OutputType]
    public sealed class Servicev1Snippets
    {
        /// <summary>
        /// The custom VCL code to upload.
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Priority determines the ordering for multiple snippets. Lower numbers execute first.  Defaults to `100`.
        /// </summary>
        public readonly int? Priority;
        /// <summary>
        /// The location in generated VCL where the snippet should be placed (can be one of `init`, `recv`, `hit`, `miss`, `pass`, `fetch`, `error`, `deliver`, `log` or `none`).
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private Servicev1Snippets(
            string content,
            string name,
            int? priority,
            string type)
        {
            Content = content;
            Name = name;
            Priority = priority;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Splunks
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The Splunk token to be used for authentication.
        /// </summary>
        public readonly string Token;
        /// <summary>
        /// The Splunk URL to stream logs to.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private Servicev1Splunks(
            string? format,
            int? formatVersion,
            string name,
            string? placement,
            string? responseCondition,
            string token,
            string url)
        {
            Format = format;
            FormatVersion = formatVersion;
            Name = name;
            Placement = placement;
            ResponseCondition = responseCondition;
            Token = token;
            Url = url;
        }
    }

    [OutputType]
    public sealed class Servicev1Sumologics
    {
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// The Splunk URL to stream logs to.
        /// </summary>
        public readonly string Url;

        [OutputConstructor]
        private Servicev1Sumologics(
            string? format,
            int? formatVersion,
            string? messageType,
            string name,
            string? placement,
            string? responseCondition,
            string url)
        {
            Format = format;
            FormatVersion = formatVersion;
            MessageType = messageType;
            Name = name;
            Placement = placement;
            ResponseCondition = responseCondition;
            Url = url;
        }
    }

    [OutputType]
    public sealed class Servicev1Syslogs
    {
        /// <summary>
        /// A hostname or IPv4 address of the Syslog endpoint.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting. Default `%h %l %u %t \"%r\" %&gt;s %b`.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// How the message should be formatted. Can be either `classic`, `loggly`, `logplex` or `blank`.  Default `classic`.
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// Where in the generated VCL the logging call should be placed, overriding any `format_version` default. Can be either `none` or `waf_debug`.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The port number configured in Logentries to send logs to. Defaults to `20000`.
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// A secure certificate to authenticate the server with. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CA_CERT`
        /// </summary>
        public readonly string? TlsCaCert;
        /// <summary>
        /// The client certificate used to make authenticated requests. Must be in PEM format. You can provide this certificate via an environment variable, `FASTLY_SYSLOG_CLIENT_CERT`
        /// </summary>
        public readonly string? TlsClientCert;
        /// <summary>
        /// The client private key used to make authenticated requests. Must be in PEM format. You can provide this key via an environment variable, `FASTLY_SYSLOG_CLIENT_KEY`
        /// </summary>
        public readonly string? TlsClientKey;
        /// <summary>
        /// Used during the TLS handshake to validate the certificate.
        /// </summary>
        public readonly string? TlsHostname;
        /// <summary>
        /// The Splunk token to be used for authentication.
        /// </summary>
        public readonly string? Token;
        /// <summary>
        /// Whether to use TLS for secure logging. Defaults to `true`
        /// </summary>
        public readonly bool? UseTls;

        [OutputConstructor]
        private Servicev1Syslogs(
            string address,
            string? format,
            int? formatVersion,
            string? messageType,
            string name,
            string? placement,
            int? port,
            string? responseCondition,
            string? tlsCaCert,
            string? tlsClientCert,
            string? tlsClientKey,
            string? tlsHostname,
            string? token,
            bool? useTls)
        {
            Address = address;
            Format = format;
            FormatVersion = formatVersion;
            MessageType = messageType;
            Name = name;
            Placement = placement;
            Port = port;
            ResponseCondition = responseCondition;
            TlsCaCert = tlsCaCert;
            TlsClientCert = tlsClientCert;
            TlsClientKey = tlsClientKey;
            TlsHostname = tlsHostname;
            Token = token;
            UseTls = useTls;
        }
    }

    [OutputType]
    public sealed class Servicev1Vcls
    {
        /// <summary>
        /// The custom VCL code to upload.
        /// </summary>
        public readonly string Content;
        /// <summary>
        /// If `true`, use this block as the main configuration. If
        /// `false`, use this block as an includable library. Only a single VCL block can be
        /// marked as the main block. Default is `false`.
        /// </summary>
        public readonly bool? Main;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private Servicev1Vcls(
            string content,
            bool? main,
            string name)
        {
            Content = content;
            Main = main;
            Name = name;
        }
    }
    }
}
