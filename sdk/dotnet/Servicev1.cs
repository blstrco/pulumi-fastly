// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly
{
    /// <summary>
    /// Provides a Fastly Service, representing the configuration for a website, app,
    /// API, or anything else to be served through Fastly. A Service encompasses Domains
    /// and Backends.
    /// 
    /// The Service resource requires a domain name that is correctly set up to direct
    /// traffic to the Fastly service. See Fastly's guide on [Adding CNAME Records][fastly-cname]
    /// on their documentation site for guidance.
    /// 
    /// &gt; This content is derived from https://github.com/terraform-providers/terraform-provider-fastly/blob/master/website/docs/r/service_v1.html.markdown.
    /// </summary>
    public partial class Servicev1 : Pulumi.CustomResource
    {
        /// <summary>
        /// A set of ACL configuration blocks.  Defined below.
        /// </summary>
        [Output("acls")]
        public Output<ImmutableArray<Outputs.Servicev1Acls>> Acls { get; private set; } = null!;

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        /// </summary>
        [Output("activate")]
        public Output<bool?> Activate { get; private set; } = null!;

        /// <summary>
        /// The currently active version of your Fastly Service.
        /// </summary>
        [Output("activeVersion")]
        public Output<int> ActiveVersion { get; private set; } = null!;

        /// <summary>
        /// A set of Backends to service requests from your Domains.
        /// Defined below. Backends must be defined in this argument, or defined in the
        /// `vcl` argument below
        /// </summary>
        [Output("backends")]
        public Output<ImmutableArray<Outputs.Servicev1Backends>> Backends { get; private set; } = null!;

        /// <summary>
        /// A BigQuery endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("bigqueryloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Bigqueryloggings>> Bigqueryloggings { get; private set; } = null!;

        /// <summary>
        /// An Azure Blob Storage endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("blobstorageloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Blobstorageloggings>> Blobstorageloggings { get; private set; } = null!;

        /// <summary>
        /// A set of Cache Settings, allowing you to override
        /// </summary>
        [Output("cacheSettings")]
        public Output<ImmutableArray<Outputs.Servicev1CacheSettings>> CacheSettings { get; private set; } = null!;

        [Output("clonedVersion")]
        public Output<int> ClonedVersion { get; private set; } = null!;

        /// <summary>
        /// A personal freeform descriptive note
        /// </summary>
        [Output("comment")]
        public Output<string?> Comment { get; private set; } = null!;

        /// <summary>
        /// A set of conditions to add logic to any basic
        /// configuration object in this service. Defined below.
        /// </summary>
        [Output("conditions")]
        public Output<ImmutableArray<Outputs.Servicev1Conditions>> Conditions { get; private set; } = null!;

        /// <summary>
        /// The default hostname.
        /// </summary>
        [Output("defaultHost")]
        public Output<string> DefaultHost { get; private set; } = null!;

        /// <summary>
        /// The default Time-to-live (TTL) for
        /// requests.
        /// </summary>
        [Output("defaultTtl")]
        public Output<int?> DefaultTtl { get; private set; } = null!;

        /// <summary>
        /// A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        /// </summary>
        [Output("dictionaries")]
        public Output<ImmutableArray<Outputs.Servicev1Dictionaries>> Dictionaries { get; private set; } = null!;

        /// <summary>
        /// A director to allow more control over balancing traffic over backends.
        /// when an item is not to be cached based on an above `condition`. Defined below
        /// </summary>
        [Output("directors")]
        public Output<ImmutableArray<Outputs.Servicev1Directors>> Directors { get; private set; } = null!;

        /// <summary>
        /// A set of Domain names to serve as entry points for your
        /// Service. Defined below.
        /// </summary>
        [Output("domains")]
        public Output<ImmutableArray<Outputs.Servicev1Domains>> Domains { get; private set; } = null!;

        /// <summary>
        /// A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        [Output("dynamicsnippets")]
        public Output<ImmutableArray<Outputs.Servicev1Dynamicsnippets>> Dynamicsnippets { get; private set; } = null!;

        /// <summary>
        /// Services that are active cannot be destroyed. In
        /// order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        /// </summary>
        [Output("forceDestroy")]
        public Output<bool?> ForceDestroy { get; private set; } = null!;

        /// <summary>
        /// A gcs endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("gcsloggings")]
        public Output<ImmutableArray<Outputs.Servicev1Gcsloggings>> Gcsloggings { get; private set; } = null!;

        /// <summary>
        /// A set of gzip rules to control automatic gzipping of
        /// content. Defined below.
        /// </summary>
        [Output("gzips")]
        public Output<ImmutableArray<Outputs.Servicev1Gzips>> Gzips { get; private set; } = null!;

        /// <summary>
        /// A set of Headers to manipulate for each request. Defined
        /// below.
        /// </summary>
        [Output("headers")]
        public Output<ImmutableArray<Outputs.Servicev1Headers>> Headers { get; private set; } = null!;

        /// <summary>
        /// Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
        /// </summary>
        [Output("healthchecks")]
        public Output<ImmutableArray<Outputs.Servicev1Healthchecks>> Healthchecks { get; private set; } = null!;

        /// <summary>
        /// A logentries endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("logentries")]
        public Output<ImmutableArray<Outputs.Servicev1Logentries>> Logentries { get; private set; } = null!;

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// A Papertrail endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("papertrails")]
        public Output<ImmutableArray<Outputs.Servicev1Papertrails>> Papertrails { get; private set; } = null!;

        /// <summary>
        /// A set of Request modifiers. Defined below
        /// </summary>
        [Output("requestSettings")]
        public Output<ImmutableArray<Outputs.Servicev1RequestSettings>> RequestSettings { get; private set; } = null!;

        /// <summary>
        /// Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        /// </summary>
        [Output("responseObjects")]
        public Output<ImmutableArray<Outputs.Servicev1ResponseObjects>> ResponseObjects { get; private set; } = null!;

        /// <summary>
        /// A set of S3 Buckets to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("s3loggings")]
        public Output<ImmutableArray<Outputs.Servicev1S3loggings>> S3loggings { get; private set; } = null!;

        /// <summary>
        /// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        [Output("snippets")]
        public Output<ImmutableArray<Outputs.Servicev1Snippets>> Snippets { get; private set; } = null!;

        /// <summary>
        /// A Splunk endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("splunks")]
        public Output<ImmutableArray<Outputs.Servicev1Splunks>> Splunks { get; private set; } = null!;

        /// <summary>
        /// A Sumologic endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("sumologics")]
        public Output<ImmutableArray<Outputs.Servicev1Sumologics>> Sumologics { get; private set; } = null!;

        /// <summary>
        /// A syslog endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        [Output("syslogs")]
        public Output<ImmutableArray<Outputs.Servicev1Syslogs>> Syslogs { get; private set; } = null!;

        /// <summary>
        /// A set of custom VCL configuration blocks. The
        /// ability to upload custom VCL code is not enabled by default for new Fastly
        /// accounts (see the [Fastly documentation](https://docs.fastly.com/guides/vcl/uploading-custom-vcl) for details).
        /// </summary>
        [Output("vcls")]
        public Output<ImmutableArray<Outputs.Servicev1Vcls>> Vcls { get; private set; } = null!;

        /// <summary>
        /// Description field for the version.
        /// </summary>
        [Output("versionComment")]
        public Output<string?> VersionComment { get; private set; } = null!;


        /// <summary>
        /// Create a Servicev1 resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Servicev1(string name, Servicev1Args args, CustomResourceOptions? options = null)
            : base("fastly:index/servicev1:Servicev1", name, args ?? ResourceArgs.Empty, MakeResourceOptions(options, ""))
        {
        }

        private Servicev1(string name, Input<string> id, Servicev1State? state = null, CustomResourceOptions? options = null)
            : base("fastly:index/servicev1:Servicev1", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Servicev1 resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Servicev1 Get(string name, Input<string> id, Servicev1State? state = null, CustomResourceOptions? options = null)
        {
            return new Servicev1(name, id, state, options);
        }
    }

    public sealed class Servicev1Args : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.Servicev1AclsArgs>? _acls;

        /// <summary>
        /// A set of ACL configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1AclsArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.Servicev1AclsArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        [Input("backends")]
        private InputList<Inputs.Servicev1BackendsArgs>? _backends;

        /// <summary>
        /// A set of Backends to service requests from your Domains.
        /// Defined below. Backends must be defined in this argument, or defined in the
        /// `vcl` argument below
        /// </summary>
        public InputList<Inputs.Servicev1BackendsArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.Servicev1BackendsArgs>());
            set => _backends = value;
        }

        [Input("bigqueryloggings")]
        private InputList<Inputs.Servicev1BigqueryloggingsArgs>? _bigqueryloggings;

        /// <summary>
        /// A BigQuery endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BigqueryloggingsArgs> Bigqueryloggings
        {
            get => _bigqueryloggings ?? (_bigqueryloggings = new InputList<Inputs.Servicev1BigqueryloggingsArgs>());
            set => _bigqueryloggings = value;
        }

        [Input("blobstorageloggings")]
        private InputList<Inputs.Servicev1BlobstorageloggingsArgs>? _blobstorageloggings;

        /// <summary>
        /// An Azure Blob Storage endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BlobstorageloggingsArgs> Blobstorageloggings
        {
            get => _blobstorageloggings ?? (_blobstorageloggings = new InputList<Inputs.Servicev1BlobstorageloggingsArgs>());
            set => _blobstorageloggings = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.Servicev1CacheSettingsArgs>? _cacheSettings;

        /// <summary>
        /// A set of Cache Settings, allowing you to override
        /// </summary>
        public InputList<Inputs.Servicev1CacheSettingsArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.Servicev1CacheSettingsArgs>());
            set => _cacheSettings = value;
        }

        /// <summary>
        /// A personal freeform descriptive note
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.Servicev1ConditionsArgs>? _conditions;

        /// <summary>
        /// A set of conditions to add logic to any basic
        /// configuration object in this service. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1ConditionsArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.Servicev1ConditionsArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The default hostname.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for
        /// requests.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.Servicev1DictionariesArgs>? _dictionaries;

        /// <summary>
        /// A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DictionariesArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.Servicev1DictionariesArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.Servicev1DirectorsArgs>? _directors;

        /// <summary>
        /// A director to allow more control over balancing traffic over backends.
        /// when an item is not to be cached based on an above `condition`. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1DirectorsArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.Servicev1DirectorsArgs>());
            set => _directors = value;
        }

        [Input("domains", required: true)]
        private InputList<Inputs.Servicev1DomainsArgs>? _domains;

        /// <summary>
        /// A set of Domain names to serve as entry points for your
        /// Service. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DomainsArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.Servicev1DomainsArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.Servicev1DynamicsnippetsArgs>? _dynamicsnippets;

        /// <summary>
        /// A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DynamicsnippetsArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.Servicev1DynamicsnippetsArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In
        /// order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("gcsloggings")]
        private InputList<Inputs.Servicev1GcsloggingsArgs>? _gcsloggings;

        /// <summary>
        /// A gcs endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GcsloggingsArgs> Gcsloggings
        {
            get => _gcsloggings ?? (_gcsloggings = new InputList<Inputs.Servicev1GcsloggingsArgs>());
            set => _gcsloggings = value;
        }

        [Input("gzips")]
        private InputList<Inputs.Servicev1GzipsArgs>? _gzips;

        /// <summary>
        /// A set of gzip rules to control automatic gzipping of
        /// content. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GzipsArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.Servicev1GzipsArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.Servicev1HeadersArgs>? _headers;

        /// <summary>
        /// A set of Headers to manipulate for each request. Defined
        /// below.
        /// </summary>
        public InputList<Inputs.Servicev1HeadersArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.Servicev1HeadersArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.Servicev1HealthchecksArgs>? _healthchecks;

        /// <summary>
        /// Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
        /// </summary>
        public InputList<Inputs.Servicev1HealthchecksArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.Servicev1HealthchecksArgs>());
            set => _healthchecks = value;
        }

        [Input("logentries")]
        private InputList<Inputs.Servicev1LogentriesArgs>? _logentries;

        /// <summary>
        /// A logentries endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LogentriesArgs> Logentries
        {
            get => _logentries ?? (_logentries = new InputList<Inputs.Servicev1LogentriesArgs>());
            set => _logentries = value;
        }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("papertrails")]
        private InputList<Inputs.Servicev1PapertrailsArgs>? _papertrails;

        /// <summary>
        /// A Papertrail endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1PapertrailsArgs> Papertrails
        {
            get => _papertrails ?? (_papertrails = new InputList<Inputs.Servicev1PapertrailsArgs>());
            set => _papertrails = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.Servicev1RequestSettingsArgs>? _requestSettings;

        /// <summary>
        /// A set of Request modifiers. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1RequestSettingsArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.Servicev1RequestSettingsArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.Servicev1ResponseObjectsArgs>? _responseObjects;

        /// <summary>
        /// Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        /// </summary>
        public InputList<Inputs.Servicev1ResponseObjectsArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.Servicev1ResponseObjectsArgs>());
            set => _responseObjects = value;
        }

        [Input("s3loggings")]
        private InputList<Inputs.Servicev1S3loggingsArgs>? _s3loggings;

        /// <summary>
        /// A set of S3 Buckets to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1S3loggingsArgs> S3loggings
        {
            get => _s3loggings ?? (_s3loggings = new InputList<Inputs.Servicev1S3loggingsArgs>());
            set => _s3loggings = value;
        }

        [Input("snippets")]
        private InputList<Inputs.Servicev1SnippetsArgs>? _snippets;

        /// <summary>
        /// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SnippetsArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.Servicev1SnippetsArgs>());
            set => _snippets = value;
        }

        [Input("splunks")]
        private InputList<Inputs.Servicev1SplunksArgs>? _splunks;

        /// <summary>
        /// A Splunk endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SplunksArgs> Splunks
        {
            get => _splunks ?? (_splunks = new InputList<Inputs.Servicev1SplunksArgs>());
            set => _splunks = value;
        }

        [Input("sumologics")]
        private InputList<Inputs.Servicev1SumologicsArgs>? _sumologics;

        /// <summary>
        /// A Sumologic endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SumologicsArgs> Sumologics
        {
            get => _sumologics ?? (_sumologics = new InputList<Inputs.Servicev1SumologicsArgs>());
            set => _sumologics = value;
        }

        [Input("syslogs")]
        private InputList<Inputs.Servicev1SyslogsArgs>? _syslogs;

        /// <summary>
        /// A syslog endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SyslogsArgs> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<Inputs.Servicev1SyslogsArgs>());
            set => _syslogs = value;
        }

        [Input("vcls")]
        private InputList<Inputs.Servicev1VclsArgs>? _vcls;

        /// <summary>
        /// A set of custom VCL configuration blocks. The
        /// ability to upload custom VCL code is not enabled by default for new Fastly
        /// accounts (see the [Fastly documentation](https://docs.fastly.com/guides/vcl/uploading-custom-vcl) for details).
        /// </summary>
        public InputList<Inputs.Servicev1VclsArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.Servicev1VclsArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version.
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        public Servicev1Args()
        {
        }
    }

    public sealed class Servicev1State : Pulumi.ResourceArgs
    {
        [Input("acls")]
        private InputList<Inputs.Servicev1AclsGetArgs>? _acls;

        /// <summary>
        /// A set of ACL configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1AclsGetArgs> Acls
        {
            get => _acls ?? (_acls = new InputList<Inputs.Servicev1AclsGetArgs>());
            set => _acls = value;
        }

        /// <summary>
        /// Conditionally prevents the Service from being activated. The apply step will continue to create a new draft version but will not activate it if this is set to false. Default true.
        /// </summary>
        [Input("activate")]
        public Input<bool>? Activate { get; set; }

        /// <summary>
        /// The currently active version of your Fastly Service.
        /// </summary>
        [Input("activeVersion")]
        public Input<int>? ActiveVersion { get; set; }

        [Input("backends")]
        private InputList<Inputs.Servicev1BackendsGetArgs>? _backends;

        /// <summary>
        /// A set of Backends to service requests from your Domains.
        /// Defined below. Backends must be defined in this argument, or defined in the
        /// `vcl` argument below
        /// </summary>
        public InputList<Inputs.Servicev1BackendsGetArgs> Backends
        {
            get => _backends ?? (_backends = new InputList<Inputs.Servicev1BackendsGetArgs>());
            set => _backends = value;
        }

        [Input("bigqueryloggings")]
        private InputList<Inputs.Servicev1BigqueryloggingsGetArgs>? _bigqueryloggings;

        /// <summary>
        /// A BigQuery endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BigqueryloggingsGetArgs> Bigqueryloggings
        {
            get => _bigqueryloggings ?? (_bigqueryloggings = new InputList<Inputs.Servicev1BigqueryloggingsGetArgs>());
            set => _bigqueryloggings = value;
        }

        [Input("blobstorageloggings")]
        private InputList<Inputs.Servicev1BlobstorageloggingsGetArgs>? _blobstorageloggings;

        /// <summary>
        /// An Azure Blob Storage endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1BlobstorageloggingsGetArgs> Blobstorageloggings
        {
            get => _blobstorageloggings ?? (_blobstorageloggings = new InputList<Inputs.Servicev1BlobstorageloggingsGetArgs>());
            set => _blobstorageloggings = value;
        }

        [Input("cacheSettings")]
        private InputList<Inputs.Servicev1CacheSettingsGetArgs>? _cacheSettings;

        /// <summary>
        /// A set of Cache Settings, allowing you to override
        /// </summary>
        public InputList<Inputs.Servicev1CacheSettingsGetArgs> CacheSettings
        {
            get => _cacheSettings ?? (_cacheSettings = new InputList<Inputs.Servicev1CacheSettingsGetArgs>());
            set => _cacheSettings = value;
        }

        [Input("clonedVersion")]
        public Input<int>? ClonedVersion { get; set; }

        /// <summary>
        /// A personal freeform descriptive note
        /// </summary>
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        [Input("conditions")]
        private InputList<Inputs.Servicev1ConditionsGetArgs>? _conditions;

        /// <summary>
        /// A set of conditions to add logic to any basic
        /// configuration object in this service. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1ConditionsGetArgs> Conditions
        {
            get => _conditions ?? (_conditions = new InputList<Inputs.Servicev1ConditionsGetArgs>());
            set => _conditions = value;
        }

        /// <summary>
        /// The default hostname.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        /// <summary>
        /// The default Time-to-live (TTL) for
        /// requests.
        /// </summary>
        [Input("defaultTtl")]
        public Input<int>? DefaultTtl { get; set; }

        [Input("dictionaries")]
        private InputList<Inputs.Servicev1DictionariesGetArgs>? _dictionaries;

        /// <summary>
        /// A set of dictionaries that allow the storing of key values pair for use within VCL functions. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DictionariesGetArgs> Dictionaries
        {
            get => _dictionaries ?? (_dictionaries = new InputList<Inputs.Servicev1DictionariesGetArgs>());
            set => _dictionaries = value;
        }

        [Input("directors")]
        private InputList<Inputs.Servicev1DirectorsGetArgs>? _directors;

        /// <summary>
        /// A director to allow more control over balancing traffic over backends.
        /// when an item is not to be cached based on an above `condition`. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1DirectorsGetArgs> Directors
        {
            get => _directors ?? (_directors = new InputList<Inputs.Servicev1DirectorsGetArgs>());
            set => _directors = value;
        }

        [Input("domains")]
        private InputList<Inputs.Servicev1DomainsGetArgs>? _domains;

        /// <summary>
        /// A set of Domain names to serve as entry points for your
        /// Service. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DomainsGetArgs> Domains
        {
            get => _domains ?? (_domains = new InputList<Inputs.Servicev1DomainsGetArgs>());
            set => _domains = value;
        }

        [Input("dynamicsnippets")]
        private InputList<Inputs.Servicev1DynamicsnippetsGetArgs>? _dynamicsnippets;

        /// <summary>
        /// A set of custom, "dynamic" VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1DynamicsnippetsGetArgs> Dynamicsnippets
        {
            get => _dynamicsnippets ?? (_dynamicsnippets = new InputList<Inputs.Servicev1DynamicsnippetsGetArgs>());
            set => _dynamicsnippets = value;
        }

        /// <summary>
        /// Services that are active cannot be destroyed. In
        /// order to destroy the Service, set `force_destroy` to `true`. Default `false`.
        /// </summary>
        [Input("forceDestroy")]
        public Input<bool>? ForceDestroy { get; set; }

        [Input("gcsloggings")]
        private InputList<Inputs.Servicev1GcsloggingsGetArgs>? _gcsloggings;

        /// <summary>
        /// A gcs endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GcsloggingsGetArgs> Gcsloggings
        {
            get => _gcsloggings ?? (_gcsloggings = new InputList<Inputs.Servicev1GcsloggingsGetArgs>());
            set => _gcsloggings = value;
        }

        [Input("gzips")]
        private InputList<Inputs.Servicev1GzipsGetArgs>? _gzips;

        /// <summary>
        /// A set of gzip rules to control automatic gzipping of
        /// content. Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1GzipsGetArgs> Gzips
        {
            get => _gzips ?? (_gzips = new InputList<Inputs.Servicev1GzipsGetArgs>());
            set => _gzips = value;
        }

        [Input("headers")]
        private InputList<Inputs.Servicev1HeadersGetArgs>? _headers;

        /// <summary>
        /// A set of Headers to manipulate for each request. Defined
        /// below.
        /// </summary>
        public InputList<Inputs.Servicev1HeadersGetArgs> Headers
        {
            get => _headers ?? (_headers = new InputList<Inputs.Servicev1HeadersGetArgs>());
            set => _headers = value;
        }

        [Input("healthchecks")]
        private InputList<Inputs.Servicev1HealthchecksGetArgs>? _healthchecks;

        /// <summary>
        /// Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
        /// </summary>
        public InputList<Inputs.Servicev1HealthchecksGetArgs> Healthchecks
        {
            get => _healthchecks ?? (_healthchecks = new InputList<Inputs.Servicev1HealthchecksGetArgs>());
            set => _healthchecks = value;
        }

        [Input("logentries")]
        private InputList<Inputs.Servicev1LogentriesGetArgs>? _logentries;

        /// <summary>
        /// A logentries endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1LogentriesGetArgs> Logentries
        {
            get => _logentries ?? (_logentries = new InputList<Inputs.Servicev1LogentriesGetArgs>());
            set => _logentries = value;
        }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("papertrails")]
        private InputList<Inputs.Servicev1PapertrailsGetArgs>? _papertrails;

        /// <summary>
        /// A Papertrail endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1PapertrailsGetArgs> Papertrails
        {
            get => _papertrails ?? (_papertrails = new InputList<Inputs.Servicev1PapertrailsGetArgs>());
            set => _papertrails = value;
        }

        [Input("requestSettings")]
        private InputList<Inputs.Servicev1RequestSettingsGetArgs>? _requestSettings;

        /// <summary>
        /// A set of Request modifiers. Defined below
        /// </summary>
        public InputList<Inputs.Servicev1RequestSettingsGetArgs> RequestSettings
        {
            get => _requestSettings ?? (_requestSettings = new InputList<Inputs.Servicev1RequestSettingsGetArgs>());
            set => _requestSettings = value;
        }

        [Input("responseObjects")]
        private InputList<Inputs.Servicev1ResponseObjectsGetArgs>? _responseObjects;

        /// <summary>
        /// Allows you to create synthetic responses that exist entirely on the varnish machine. Useful for creating error or maintenance pages that exists outside the scope of your datacenter. Best when used with Condition objects.
        /// </summary>
        public InputList<Inputs.Servicev1ResponseObjectsGetArgs> ResponseObjects
        {
            get => _responseObjects ?? (_responseObjects = new InputList<Inputs.Servicev1ResponseObjectsGetArgs>());
            set => _responseObjects = value;
        }

        [Input("s3loggings")]
        private InputList<Inputs.Servicev1S3loggingsGetArgs>? _s3loggings;

        /// <summary>
        /// A set of S3 Buckets to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1S3loggingsGetArgs> S3loggings
        {
            get => _s3loggings ?? (_s3loggings = new InputList<Inputs.Servicev1S3loggingsGetArgs>());
            set => _s3loggings = value;
        }

        [Input("snippets")]
        private InputList<Inputs.Servicev1SnippetsGetArgs>? _snippets;

        /// <summary>
        /// A set of custom, "regular" (non-dynamic) VCL Snippet configuration blocks.  Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SnippetsGetArgs> Snippets
        {
            get => _snippets ?? (_snippets = new InputList<Inputs.Servicev1SnippetsGetArgs>());
            set => _snippets = value;
        }

        [Input("splunks")]
        private InputList<Inputs.Servicev1SplunksGetArgs>? _splunks;

        /// <summary>
        /// A Splunk endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SplunksGetArgs> Splunks
        {
            get => _splunks ?? (_splunks = new InputList<Inputs.Servicev1SplunksGetArgs>());
            set => _splunks = value;
        }

        [Input("sumologics")]
        private InputList<Inputs.Servicev1SumologicsGetArgs>? _sumologics;

        /// <summary>
        /// A Sumologic endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SumologicsGetArgs> Sumologics
        {
            get => _sumologics ?? (_sumologics = new InputList<Inputs.Servicev1SumologicsGetArgs>());
            set => _sumologics = value;
        }

        [Input("syslogs")]
        private InputList<Inputs.Servicev1SyslogsGetArgs>? _syslogs;

        /// <summary>
        /// A syslog endpoint to send streaming logs too.
        /// Defined below.
        /// </summary>
        public InputList<Inputs.Servicev1SyslogsGetArgs> Syslogs
        {
            get => _syslogs ?? (_syslogs = new InputList<Inputs.Servicev1SyslogsGetArgs>());
            set => _syslogs = value;
        }

        [Input("vcls")]
        private InputList<Inputs.Servicev1VclsGetArgs>? _vcls;

        /// <summary>
        /// A set of custom VCL configuration blocks. The
        /// ability to upload custom VCL code is not enabled by default for new Fastly
        /// accounts (see the [Fastly documentation](https://docs.fastly.com/guides/vcl/uploading-custom-vcl) for details).
        /// </summary>
        public InputList<Inputs.Servicev1VclsGetArgs> Vcls
        {
            get => _vcls ?? (_vcls = new InputList<Inputs.Servicev1VclsGetArgs>());
            set => _vcls = value;
        }

        /// <summary>
        /// Description field for the version.
        /// </summary>
        [Input("versionComment")]
        public Input<string>? VersionComment { get; set; }

        public Servicev1State()
        {
        }
    }

    namespace Inputs
    {

    public sealed class Servicev1AclsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the ACL.
        /// </summary>
        [Input("aclId")]
        public Input<string>? AclId { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1AclsArgs()
        {
        }
    }

    public sealed class Servicev1AclsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the ACL.
        /// </summary>
        [Input("aclId")]
        public Input<string>? AclId { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1AclsGetArgs()
        {
        }
    }

    public sealed class Servicev1BackendsArgs : Pulumi.ResourceArgs
    {
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        [Input("autoLoadbalance")]
        public Input<bool>? AutoLoadbalance { get; set; }

        [Input("betweenBytesTimeout")]
        public Input<int>? BetweenBytesTimeout { get; set; }

        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        [Input("errorThreshold")]
        public Input<int>? ErrorThreshold { get; set; }

        [Input("firstByteTimeout")]
        public Input<int>? FirstByteTimeout { get; set; }

        /// <summary>
        /// Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
        /// </summary>
        [Input("healthcheck")]
        public Input<string>? Healthcheck { get; set; }

        [Input("maxConn")]
        public Input<int>? MaxConn { get; set; }

        [Input("maxTlsVersion")]
        public Input<string>? MaxTlsVersion { get; set; }

        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("overrideHost")]
        public Input<string>? OverrideHost { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        [Input("shield")]
        public Input<string>? Shield { get; set; }

        [Input("sslCaCert")]
        public Input<string>? SslCaCert { get; set; }

        [Input("sslCertHostname")]
        public Input<string>? SslCertHostname { get; set; }

        [Input("sslCheckCert")]
        public Input<bool>? SslCheckCert { get; set; }

        [Input("sslCiphers")]
        public Input<string>? SslCiphers { get; set; }

        [Input("sslClientCert")]
        public Input<string>? SslClientCert { get; set; }

        [Input("sslClientKey")]
        public Input<string>? SslClientKey { get; set; }

        [Input("sslHostname")]
        public Input<string>? SslHostname { get; set; }

        [Input("sslSniHostname")]
        public Input<string>? SslSniHostname { get; set; }

        [Input("useSsl")]
        public Input<bool>? UseSsl { get; set; }

        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public Servicev1BackendsArgs()
        {
        }
    }

    public sealed class Servicev1BackendsGetArgs : Pulumi.ResourceArgs
    {
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        [Input("autoLoadbalance")]
        public Input<bool>? AutoLoadbalance { get; set; }

        [Input("betweenBytesTimeout")]
        public Input<int>? BetweenBytesTimeout { get; set; }

        [Input("connectTimeout")]
        public Input<int>? ConnectTimeout { get; set; }

        [Input("errorThreshold")]
        public Input<int>? ErrorThreshold { get; set; }

        [Input("firstByteTimeout")]
        public Input<int>? FirstByteTimeout { get; set; }

        /// <summary>
        /// Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
        /// </summary>
        [Input("healthcheck")]
        public Input<string>? Healthcheck { get; set; }

        [Input("maxConn")]
        public Input<int>? MaxConn { get; set; }

        [Input("maxTlsVersion")]
        public Input<string>? MaxTlsVersion { get; set; }

        [Input("minTlsVersion")]
        public Input<string>? MinTlsVersion { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("overrideHost")]
        public Input<string>? OverrideHost { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        [Input("shield")]
        public Input<string>? Shield { get; set; }

        [Input("sslCaCert")]
        public Input<string>? SslCaCert { get; set; }

        [Input("sslCertHostname")]
        public Input<string>? SslCertHostname { get; set; }

        [Input("sslCheckCert")]
        public Input<bool>? SslCheckCert { get; set; }

        [Input("sslCiphers")]
        public Input<string>? SslCiphers { get; set; }

        [Input("sslClientCert")]
        public Input<string>? SslClientCert { get; set; }

        [Input("sslClientKey")]
        public Input<string>? SslClientKey { get; set; }

        [Input("sslHostname")]
        public Input<string>? SslHostname { get; set; }

        [Input("sslSniHostname")]
        public Input<string>? SslSniHostname { get; set; }

        [Input("useSsl")]
        public Input<bool>? UseSsl { get; set; }

        [Input("weight")]
        public Input<int>? Weight { get; set; }

        public Servicev1BackendsGetArgs()
        {
        }
    }

    public sealed class Servicev1BigqueryloggingsArgs : Pulumi.ResourceArgs
    {
        [Input("dataset", required: true)]
        public Input<string> Dataset { get; set; } = null!;

        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        [Input("table", required: true)]
        public Input<string> Table { get; set; } = null!;

        [Input("template")]
        public Input<string>? Template { get; set; }

        public Servicev1BigqueryloggingsArgs()
        {
        }
    }

    public sealed class Servicev1BigqueryloggingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("dataset", required: true)]
        public Input<string> Dataset { get; set; } = null!;

        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        [Input("table", required: true)]
        public Input<string> Table { get; set; } = null!;

        [Input("template")]
        public Input<string>? Template { get; set; }

        public Servicev1BigqueryloggingsGetArgs()
        {
        }
    }

    public sealed class Servicev1BlobstorageloggingsArgs : Pulumi.ResourceArgs
    {
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        [Input("container", required: true)]
        public Input<string> Container { get; set; } = null!;

        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("sasToken", required: true)]
        public Input<string> SasToken { get; set; } = null!;

        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1BlobstorageloggingsArgs()
        {
        }
    }

    public sealed class Servicev1BlobstorageloggingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("accountName", required: true)]
        public Input<string> AccountName { get; set; } = null!;

        [Input("container", required: true)]
        public Input<string> Container { get; set; } = null!;

        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("sasToken", required: true)]
        public Input<string> SasToken { get; set; } = null!;

        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1BlobstorageloggingsGetArgs()
        {
        }
    }

    public sealed class Servicev1CacheSettingsArgs : Pulumi.ResourceArgs
    {
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("staleTtl")]
        public Input<int>? StaleTtl { get; set; }

        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public Servicev1CacheSettingsArgs()
        {
        }
    }

    public sealed class Servicev1CacheSettingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("staleTtl")]
        public Input<int>? StaleTtl { get; set; }

        [Input("ttl")]
        public Input<int>? Ttl { get; set; }

        public Servicev1CacheSettingsGetArgs()
        {
        }
    }

    public sealed class Servicev1ConditionsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("statement", required: true)]
        public Input<string> Statement { get; set; } = null!;

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1ConditionsArgs()
        {
        }
    }

    public sealed class Servicev1ConditionsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("statement", required: true)]
        public Input<string> Statement { get; set; } = null!;

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1ConditionsGetArgs()
        {
        }
    }

    public sealed class Servicev1DictionariesArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the dictionary.
        /// </summary>
        [Input("dictionaryId")]
        public Input<string>? DictionaryId { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("writeOnly")]
        public Input<bool>? WriteOnly { get; set; }

        public Servicev1DictionariesArgs()
        {
        }
    }

    public sealed class Servicev1DictionariesGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The ID of the dictionary.
        /// </summary>
        [Input("dictionaryId")]
        public Input<string>? DictionaryId { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("writeOnly")]
        public Input<bool>? WriteOnly { get; set; }

        public Servicev1DictionariesGetArgs()
        {
        }
    }

    public sealed class Servicev1DirectorsArgs : Pulumi.ResourceArgs
    {
        [Input("backends", required: true)]
        private InputList<string>? _backends;
        public InputList<string> Backends
        {
            get => _backends ?? (_backends = new InputList<string>());
            set => _backends = value;
        }

        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("quorum")]
        public Input<int>? Quorum { get; set; }

        [Input("retries")]
        public Input<int>? Retries { get; set; }

        [Input("shield")]
        public Input<string>? Shield { get; set; }

        [Input("type")]
        public Input<int>? Type { get; set; }

        public Servicev1DirectorsArgs()
        {
        }
    }

    public sealed class Servicev1DirectorsGetArgs : Pulumi.ResourceArgs
    {
        [Input("backends", required: true)]
        private InputList<string>? _backends;
        public InputList<string> Backends
        {
            get => _backends ?? (_backends = new InputList<string>());
            set => _backends = value;
        }

        [Input("capacity")]
        public Input<int>? Capacity { get; set; }

        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("quorum")]
        public Input<int>? Quorum { get; set; }

        [Input("retries")]
        public Input<int>? Retries { get; set; }

        [Input("shield")]
        public Input<string>? Shield { get; set; }

        [Input("type")]
        public Input<int>? Type { get; set; }

        public Servicev1DirectorsGetArgs()
        {
        }
    }

    public sealed class Servicev1DomainsArgs : Pulumi.ResourceArgs
    {
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1DomainsArgs()
        {
        }
    }

    public sealed class Servicev1DomainsGetArgs : Pulumi.ResourceArgs
    {
        [Input("comment")]
        public Input<string>? Comment { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1DomainsGetArgs()
        {
        }
    }

    public sealed class Servicev1DynamicsnippetsArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the dynamic snippet.
        /// </summary>
        [Input("snippetId")]
        public Input<string>? SnippetId { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1DynamicsnippetsArgs()
        {
        }
    }

    public sealed class Servicev1DynamicsnippetsGetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        /// <summary>
        /// The ID of the dynamic snippet.
        /// </summary>
        [Input("snippetId")]
        public Input<string>? SnippetId { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1DynamicsnippetsGetArgs()
        {
        }
    }

    public sealed class Servicev1GcsloggingsArgs : Pulumi.ResourceArgs
    {
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1GcsloggingsArgs()
        {
        }
    }

    public sealed class Servicev1GcsloggingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        [Input("email")]
        public Input<string>? Email { get; set; }

        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("secretKey")]
        public Input<string>? SecretKey { get; set; }

        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1GcsloggingsGetArgs()
        {
        }
    }

    public sealed class Servicev1GzipsArgs : Pulumi.ResourceArgs
    {
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        [Input("contentTypes")]
        private InputList<string>? _contentTypes;
        public InputList<string> ContentTypes
        {
            get => _contentTypes ?? (_contentTypes = new InputList<string>());
            set => _contentTypes = value;
        }

        [Input("extensions")]
        private InputList<string>? _extensions;
        public InputList<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<string>());
            set => _extensions = value;
        }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1GzipsArgs()
        {
        }
    }

    public sealed class Servicev1GzipsGetArgs : Pulumi.ResourceArgs
    {
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        [Input("contentTypes")]
        private InputList<string>? _contentTypes;
        public InputList<string> ContentTypes
        {
            get => _contentTypes ?? (_contentTypes = new InputList<string>());
            set => _contentTypes = value;
        }

        [Input("extensions")]
        private InputList<string>? _extensions;
        public InputList<string> Extensions
        {
            get => _extensions ?? (_extensions = new InputList<string>());
            set => _extensions = value;
        }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1GzipsGetArgs()
        {
        }
    }

    public sealed class Servicev1HeadersArgs : Pulumi.ResourceArgs
    {
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        [Input("destination", required: true)]
        public Input<string> Destination { get; set; } = null!;

        [Input("ignoreIfSet")]
        public Input<bool>? IgnoreIfSet { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("regex")]
        public Input<string>? Regex { get; set; }

        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("substitution")]
        public Input<string>? Substitution { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1HeadersArgs()
        {
        }
    }

    public sealed class Servicev1HeadersGetArgs : Pulumi.ResourceArgs
    {
        [Input("action", required: true)]
        public Input<string> Action { get; set; } = null!;

        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        [Input("destination", required: true)]
        public Input<string> Destination { get; set; } = null!;

        [Input("ignoreIfSet")]
        public Input<bool>? IgnoreIfSet { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("regex")]
        public Input<string>? Regex { get; set; }

        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("source")]
        public Input<string>? Source { get; set; }

        [Input("substitution")]
        public Input<string>? Substitution { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1HeadersGetArgs()
        {
        }
    }

    public sealed class Servicev1HealthchecksArgs : Pulumi.ResourceArgs
    {
        [Input("checkInterval")]
        public Input<int>? CheckInterval { get; set; }

        [Input("expectedResponse")]
        public Input<int>? ExpectedResponse { get; set; }

        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("httpVersion")]
        public Input<string>? HttpVersion { get; set; }

        [Input("initial")]
        public Input<int>? Initial { get; set; }

        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("threshold")]
        public Input<int>? Threshold { get; set; }

        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        [Input("window")]
        public Input<int>? Window { get; set; }

        public Servicev1HealthchecksArgs()
        {
        }
    }

    public sealed class Servicev1HealthchecksGetArgs : Pulumi.ResourceArgs
    {
        [Input("checkInterval")]
        public Input<int>? CheckInterval { get; set; }

        [Input("expectedResponse")]
        public Input<int>? ExpectedResponse { get; set; }

        [Input("host", required: true)]
        public Input<string> Host { get; set; } = null!;

        [Input("httpVersion")]
        public Input<string>? HttpVersion { get; set; }

        [Input("initial")]
        public Input<int>? Initial { get; set; }

        [Input("method")]
        public Input<string>? Method { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("path", required: true)]
        public Input<string> Path { get; set; } = null!;

        [Input("threshold")]
        public Input<int>? Threshold { get; set; }

        [Input("timeout")]
        public Input<int>? Timeout { get; set; }

        [Input("window")]
        public Input<int>? Window { get; set; }

        public Servicev1HealthchecksGetArgs()
        {
        }
    }

    public sealed class Servicev1LogentriesArgs : Pulumi.ResourceArgs
    {
        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public Servicev1LogentriesArgs()
        {
        }
    }

    public sealed class Servicev1LogentriesGetArgs : Pulumi.ResourceArgs
    {
        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public Servicev1LogentriesGetArgs()
        {
        }
    }

    public sealed class Servicev1PapertrailsArgs : Pulumi.ResourceArgs
    {
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        public Servicev1PapertrailsArgs()
        {
        }
    }

    public sealed class Servicev1PapertrailsGetArgs : Pulumi.ResourceArgs
    {
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        [Input("format")]
        public Input<string>? Format { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        public Servicev1PapertrailsGetArgs()
        {
        }
    }

    public sealed class Servicev1RequestSettingsArgs : Pulumi.ResourceArgs
    {
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("bypassBusyWait")]
        public Input<bool>? BypassBusyWait { get; set; }

        /// <summary>
        /// The default hostname.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        [Input("forceMiss")]
        public Input<bool>? ForceMiss { get; set; }

        [Input("forceSsl")]
        public Input<bool>? ForceSsl { get; set; }

        [Input("geoHeaders")]
        public Input<bool>? GeoHeaders { get; set; }

        [Input("hashKeys")]
        public Input<string>? HashKeys { get; set; }

        [Input("maxStaleAge")]
        public Input<int>? MaxStaleAge { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        [Input("timerSupport")]
        public Input<bool>? TimerSupport { get; set; }

        [Input("xff")]
        public Input<string>? Xff { get; set; }

        public Servicev1RequestSettingsArgs()
        {
        }
    }

    public sealed class Servicev1RequestSettingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("action")]
        public Input<string>? Action { get; set; }

        [Input("bypassBusyWait")]
        public Input<bool>? BypassBusyWait { get; set; }

        /// <summary>
        /// The default hostname.
        /// </summary>
        [Input("defaultHost")]
        public Input<string>? DefaultHost { get; set; }

        [Input("forceMiss")]
        public Input<bool>? ForceMiss { get; set; }

        [Input("forceSsl")]
        public Input<bool>? ForceSsl { get; set; }

        [Input("geoHeaders")]
        public Input<bool>? GeoHeaders { get; set; }

        [Input("hashKeys")]
        public Input<string>? HashKeys { get; set; }

        [Input("maxStaleAge")]
        public Input<int>? MaxStaleAge { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        [Input("timerSupport")]
        public Input<bool>? TimerSupport { get; set; }

        [Input("xff")]
        public Input<string>? Xff { get; set; }

        public Servicev1RequestSettingsGetArgs()
        {
        }
    }

    public sealed class Servicev1ResponseObjectsArgs : Pulumi.ResourceArgs
    {
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        [Input("content")]
        public Input<string>? Content { get; set; }

        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        [Input("response")]
        public Input<string>? Response { get; set; }

        [Input("status")]
        public Input<int>? Status { get; set; }

        public Servicev1ResponseObjectsArgs()
        {
        }
    }

    public sealed class Servicev1ResponseObjectsGetArgs : Pulumi.ResourceArgs
    {
        [Input("cacheCondition")]
        public Input<string>? CacheCondition { get; set; }

        [Input("content")]
        public Input<string>? Content { get; set; }

        [Input("contentType")]
        public Input<string>? ContentType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("requestCondition")]
        public Input<string>? RequestCondition { get; set; }

        [Input("response")]
        public Input<string>? Response { get; set; }

        [Input("status")]
        public Input<int>? Status { get; set; }

        public Servicev1ResponseObjectsGetArgs()
        {
        }
    }

    public sealed class Servicev1S3loggingsArgs : Pulumi.ResourceArgs
    {
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// A set of Domain names to serve as entry points for your
        /// Service. Defined below.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("redundancy")]
        public Input<string>? Redundancy { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("s3AccessKey")]
        public Input<string>? S3AccessKey { get; set; }

        [Input("s3SecretKey")]
        public Input<string>? S3SecretKey { get; set; }

        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1S3loggingsArgs()
        {
        }
    }

    public sealed class Servicev1S3loggingsGetArgs : Pulumi.ResourceArgs
    {
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// A set of Domain names to serve as entry points for your
        /// Service. Defined below.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        [Input("gzipLevel")]
        public Input<int>? GzipLevel { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("path")]
        public Input<string>? Path { get; set; }

        [Input("period")]
        public Input<int>? Period { get; set; }

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("redundancy")]
        public Input<string>? Redundancy { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("s3AccessKey")]
        public Input<string>? S3AccessKey { get; set; }

        [Input("s3SecretKey")]
        public Input<string>? S3SecretKey { get; set; }

        [Input("timestampFormat")]
        public Input<string>? TimestampFormat { get; set; }

        public Servicev1S3loggingsGetArgs()
        {
        }
    }

    public sealed class Servicev1SnippetsArgs : Pulumi.ResourceArgs
    {
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1SnippetsArgs()
        {
        }
    }

    public sealed class Servicev1SnippetsGetArgs : Pulumi.ResourceArgs
    {
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("priority")]
        public Input<int>? Priority { get; set; }

        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public Servicev1SnippetsGetArgs()
        {
        }
    }

    public sealed class Servicev1SplunksArgs : Pulumi.ResourceArgs
    {
        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public Servicev1SplunksArgs()
        {
        }
    }

    public sealed class Servicev1SplunksGetArgs : Pulumi.ResourceArgs
    {
        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("token", required: true)]
        public Input<string> Token { get; set; } = null!;

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public Servicev1SplunksGetArgs()
        {
        }
    }

    public sealed class Servicev1SumologicsArgs : Pulumi.ResourceArgs
    {
        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public Servicev1SumologicsArgs()
        {
        }
    }

    public sealed class Servicev1SumologicsGetArgs : Pulumi.ResourceArgs
    {
        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("url", required: true)]
        public Input<string> Url { get; set; } = null!;

        public Servicev1SumologicsGetArgs()
        {
        }
    }

    public sealed class Servicev1SyslogsArgs : Pulumi.ResourceArgs
    {
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("tlsCaCert")]
        public Input<string>? TlsCaCert { get; set; }

        [Input("tlsHostname")]
        public Input<string>? TlsHostname { get; set; }

        [Input("token")]
        public Input<string>? Token { get; set; }

        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public Servicev1SyslogsArgs()
        {
        }
    }

    public sealed class Servicev1SyslogsGetArgs : Pulumi.ResourceArgs
    {
        [Input("address", required: true)]
        public Input<string> Address { get; set; } = null!;

        [Input("format")]
        public Input<string>? Format { get; set; }

        [Input("formatVersion")]
        public Input<int>? FormatVersion { get; set; }

        [Input("messageType")]
        public Input<string>? MessageType { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        [Input("placement")]
        public Input<string>? Placement { get; set; }

        [Input("port")]
        public Input<int>? Port { get; set; }

        [Input("responseCondition")]
        public Input<string>? ResponseCondition { get; set; }

        [Input("tlsCaCert")]
        public Input<string>? TlsCaCert { get; set; }

        [Input("tlsHostname")]
        public Input<string>? TlsHostname { get; set; }

        [Input("token")]
        public Input<string>? Token { get; set; }

        [Input("useTls")]
        public Input<bool>? UseTls { get; set; }

        public Servicev1SyslogsGetArgs()
        {
        }
    }

    public sealed class Servicev1VclsArgs : Pulumi.ResourceArgs
    {
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        [Input("main")]
        public Input<bool>? Main { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1VclsArgs()
        {
        }
    }

    public sealed class Servicev1VclsGetArgs : Pulumi.ResourceArgs
    {
        [Input("content", required: true)]
        public Input<string> Content { get; set; } = null!;

        [Input("main")]
        public Input<bool>? Main { get; set; }

        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public Servicev1VclsGetArgs()
        {
        }
    }
    }

    namespace Outputs
    {

    [OutputType]
    public sealed class Servicev1Acls
    {
        /// <summary>
        /// The ID of the ACL.
        /// </summary>
        public readonly string AclId;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private Servicev1Acls(
            string aclId,
            string name)
        {
            AclId = aclId;
            Name = name;
        }
    }

    [OutputType]
    public sealed class Servicev1Backends
    {
        public readonly string Address;
        public readonly bool? AutoLoadbalance;
        public readonly int? BetweenBytesTimeout;
        public readonly int? ConnectTimeout;
        public readonly int? ErrorThreshold;
        public readonly int? FirstByteTimeout;
        /// <summary>
        /// Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
        /// </summary>
        public readonly string? Healthcheck;
        public readonly int? MaxConn;
        public readonly string? MaxTlsVersion;
        public readonly string? MinTlsVersion;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? OverrideHost;
        public readonly int? Port;
        public readonly string? RequestCondition;
        public readonly string? Shield;
        public readonly string? SslCaCert;
        public readonly string? SslCertHostname;
        public readonly bool? SslCheckCert;
        public readonly string? SslCiphers;
        public readonly string? SslClientCert;
        public readonly string? SslClientKey;
        public readonly string? SslHostname;
        public readonly string? SslSniHostname;
        public readonly bool? UseSsl;
        public readonly int? Weight;

        [OutputConstructor]
        private Servicev1Backends(
            string address,
            bool? autoLoadbalance,
            int? betweenBytesTimeout,
            int? connectTimeout,
            int? errorThreshold,
            int? firstByteTimeout,
            string? healthcheck,
            int? maxConn,
            string? maxTlsVersion,
            string? minTlsVersion,
            string name,
            string? overrideHost,
            int? port,
            string? requestCondition,
            string? shield,
            string? sslCaCert,
            string? sslCertHostname,
            bool? sslCheckCert,
            string? sslCiphers,
            string? sslClientCert,
            string? sslClientKey,
            string? sslHostname,
            string? sslSniHostname,
            bool? useSsl,
            int? weight)
        {
            Address = address;
            AutoLoadbalance = autoLoadbalance;
            BetweenBytesTimeout = betweenBytesTimeout;
            ConnectTimeout = connectTimeout;
            ErrorThreshold = errorThreshold;
            FirstByteTimeout = firstByteTimeout;
            Healthcheck = healthcheck;
            MaxConn = maxConn;
            MaxTlsVersion = maxTlsVersion;
            MinTlsVersion = minTlsVersion;
            Name = name;
            OverrideHost = overrideHost;
            Port = port;
            RequestCondition = requestCondition;
            Shield = shield;
            SslCaCert = sslCaCert;
            SslCertHostname = sslCertHostname;
            SslCheckCert = sslCheckCert;
            SslCiphers = sslCiphers;
            SslClientCert = sslClientCert;
            SslClientKey = sslClientKey;
            SslHostname = sslHostname;
            SslSniHostname = sslSniHostname;
            UseSsl = useSsl;
            Weight = weight;
        }
    }

    [OutputType]
    public sealed class Servicev1Bigqueryloggings
    {
        public readonly string Dataset;
        public readonly string? Email;
        public readonly string? Format;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? Placement;
        public readonly string ProjectId;
        public readonly string? ResponseCondition;
        public readonly string? SecretKey;
        public readonly string Table;
        public readonly string? Template;

        [OutputConstructor]
        private Servicev1Bigqueryloggings(
            string dataset,
            string? email,
            string? format,
            string name,
            string? placement,
            string projectId,
            string? responseCondition,
            string? secretKey,
            string table,
            string? template)
        {
            Dataset = dataset;
            Email = email;
            Format = format;
            Name = name;
            Placement = placement;
            ProjectId = projectId;
            ResponseCondition = responseCondition;
            SecretKey = secretKey;
            Table = table;
            Template = template;
        }
    }

    [OutputType]
    public sealed class Servicev1Blobstorageloggings
    {
        public readonly string AccountName;
        public readonly string Container;
        public readonly string? Format;
        public readonly int? FormatVersion;
        public readonly int? GzipLevel;
        public readonly string? MessageType;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? Path;
        public readonly int? Period;
        public readonly string? Placement;
        public readonly string? PublicKey;
        public readonly string? ResponseCondition;
        public readonly string SasToken;
        public readonly string? TimestampFormat;

        [OutputConstructor]
        private Servicev1Blobstorageloggings(
            string accountName,
            string container,
            string? format,
            int? formatVersion,
            int? gzipLevel,
            string? messageType,
            string name,
            string? path,
            int? period,
            string? placement,
            string? publicKey,
            string? responseCondition,
            string sasToken,
            string? timestampFormat)
        {
            AccountName = accountName;
            Container = container;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            Placement = placement;
            PublicKey = publicKey;
            ResponseCondition = responseCondition;
            SasToken = sasToken;
            TimestampFormat = timestampFormat;
        }
    }

    [OutputType]
    public sealed class Servicev1CacheSettings
    {
        public readonly string? Action;
        public readonly string? CacheCondition;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly int? StaleTtl;
        public readonly int? Ttl;

        [OutputConstructor]
        private Servicev1CacheSettings(
            string? action,
            string? cacheCondition,
            string name,
            int? staleTtl,
            int? ttl)
        {
            Action = action;
            CacheCondition = cacheCondition;
            Name = name;
            StaleTtl = staleTtl;
            Ttl = ttl;
        }
    }

    [OutputType]
    public sealed class Servicev1Conditions
    {
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly int? Priority;
        public readonly string Statement;
        public readonly string Type;

        [OutputConstructor]
        private Servicev1Conditions(
            string name,
            int? priority,
            string statement,
            string type)
        {
            Name = name;
            Priority = priority;
            Statement = statement;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Dictionaries
    {
        /// <summary>
        /// The ID of the dictionary.
        /// </summary>
        public readonly string DictionaryId;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly bool? WriteOnly;

        [OutputConstructor]
        private Servicev1Dictionaries(
            string dictionaryId,
            string name,
            bool? writeOnly)
        {
            DictionaryId = dictionaryId;
            Name = name;
            WriteOnly = writeOnly;
        }
    }

    [OutputType]
    public sealed class Servicev1Directors
    {
        public readonly ImmutableArray<string> Backends;
        public readonly int? Capacity;
        public readonly string? Comment;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly int? Quorum;
        public readonly int? Retries;
        public readonly string? Shield;
        public readonly int? Type;

        [OutputConstructor]
        private Servicev1Directors(
            ImmutableArray<string> backends,
            int? capacity,
            string? comment,
            string name,
            int? quorum,
            int? retries,
            string? shield,
            int? type)
        {
            Backends = backends;
            Capacity = capacity;
            Comment = comment;
            Name = name;
            Quorum = quorum;
            Retries = retries;
            Shield = shield;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Domains
    {
        public readonly string? Comment;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private Servicev1Domains(
            string? comment,
            string name)
        {
            Comment = comment;
            Name = name;
        }
    }

    [OutputType]
    public sealed class Servicev1Dynamicsnippets
    {
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly int? Priority;
        /// <summary>
        /// The ID of the dynamic snippet.
        /// </summary>
        public readonly string SnippetId;
        public readonly string Type;

        [OutputConstructor]
        private Servicev1Dynamicsnippets(
            string name,
            int? priority,
            string snippetId,
            string type)
        {
            Name = name;
            Priority = priority;
            SnippetId = snippetId;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Gcsloggings
    {
        public readonly string BucketName;
        public readonly string? Email;
        public readonly string? Format;
        public readonly int? GzipLevel;
        public readonly string? MessageType;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? Path;
        public readonly int? Period;
        public readonly string? Placement;
        public readonly string? ResponseCondition;
        public readonly string? SecretKey;
        public readonly string? TimestampFormat;

        [OutputConstructor]
        private Servicev1Gcsloggings(
            string bucketName,
            string? email,
            string? format,
            int? gzipLevel,
            string? messageType,
            string name,
            string? path,
            int? period,
            string? placement,
            string? responseCondition,
            string? secretKey,
            string? timestampFormat)
        {
            BucketName = bucketName;
            Email = email;
            Format = format;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            Placement = placement;
            ResponseCondition = responseCondition;
            SecretKey = secretKey;
            TimestampFormat = timestampFormat;
        }
    }

    [OutputType]
    public sealed class Servicev1Gzips
    {
        public readonly string? CacheCondition;
        public readonly ImmutableArray<string> ContentTypes;
        public readonly ImmutableArray<string> Extensions;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private Servicev1Gzips(
            string? cacheCondition,
            ImmutableArray<string> contentTypes,
            ImmutableArray<string> extensions,
            string name)
        {
            CacheCondition = cacheCondition;
            ContentTypes = contentTypes;
            Extensions = extensions;
            Name = name;
        }
    }

    [OutputType]
    public sealed class Servicev1Headers
    {
        public readonly string Action;
        public readonly string? CacheCondition;
        public readonly string Destination;
        public readonly bool? IgnoreIfSet;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly int? Priority;
        public readonly string Regex;
        public readonly string? RequestCondition;
        public readonly string? ResponseCondition;
        public readonly string Source;
        public readonly string Substitution;
        public readonly string Type;

        [OutputConstructor]
        private Servicev1Headers(
            string action,
            string? cacheCondition,
            string destination,
            bool? ignoreIfSet,
            string name,
            int? priority,
            string regex,
            string? requestCondition,
            string? responseCondition,
            string source,
            string substitution,
            string type)
        {
            Action = action;
            CacheCondition = cacheCondition;
            Destination = destination;
            IgnoreIfSet = ignoreIfSet;
            Name = name;
            Priority = priority;
            Regex = regex;
            RequestCondition = requestCondition;
            ResponseCondition = responseCondition;
            Source = source;
            Substitution = substitution;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Healthchecks
    {
        public readonly int? CheckInterval;
        public readonly int? ExpectedResponse;
        public readonly string Host;
        public readonly string? HttpVersion;
        public readonly int? Initial;
        public readonly string? Method;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string Path;
        public readonly int? Threshold;
        public readonly int? Timeout;
        public readonly int? Window;

        [OutputConstructor]
        private Servicev1Healthchecks(
            int? checkInterval,
            int? expectedResponse,
            string host,
            string? httpVersion,
            int? initial,
            string? method,
            string name,
            string path,
            int? threshold,
            int? timeout,
            int? window)
        {
            CheckInterval = checkInterval;
            ExpectedResponse = expectedResponse;
            Host = host;
            HttpVersion = httpVersion;
            Initial = initial;
            Method = method;
            Name = name;
            Path = path;
            Threshold = threshold;
            Timeout = timeout;
            Window = window;
        }
    }

    [OutputType]
    public sealed class Servicev1Logentries
    {
        public readonly string? Format;
        public readonly int? FormatVersion;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? Placement;
        public readonly int? Port;
        public readonly string? ResponseCondition;
        public readonly string Token;
        public readonly bool? UseTls;

        [OutputConstructor]
        private Servicev1Logentries(
            string? format,
            int? formatVersion,
            string name,
            string? placement,
            int? port,
            string? responseCondition,
            string token,
            bool? useTls)
        {
            Format = format;
            FormatVersion = formatVersion;
            Name = name;
            Placement = placement;
            Port = port;
            ResponseCondition = responseCondition;
            Token = token;
            UseTls = useTls;
        }
    }

    [OutputType]
    public sealed class Servicev1Papertrails
    {
        public readonly string Address;
        public readonly string? Format;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? Placement;
        public readonly int Port;
        public readonly string? ResponseCondition;

        [OutputConstructor]
        private Servicev1Papertrails(
            string address,
            string? format,
            string name,
            string? placement,
            int port,
            string? responseCondition)
        {
            Address = address;
            Format = format;
            Name = name;
            Placement = placement;
            Port = port;
            ResponseCondition = responseCondition;
        }
    }

    [OutputType]
    public sealed class Servicev1RequestSettings
    {
        public readonly string? Action;
        public readonly bool? BypassBusyWait;
        /// <summary>
        /// The default hostname.
        /// </summary>
        public readonly string? DefaultHost;
        public readonly bool? ForceMiss;
        public readonly bool? ForceSsl;
        public readonly bool? GeoHeaders;
        public readonly string? HashKeys;
        public readonly int? MaxStaleAge;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? RequestCondition;
        public readonly bool? TimerSupport;
        public readonly string? Xff;

        [OutputConstructor]
        private Servicev1RequestSettings(
            string? action,
            bool? bypassBusyWait,
            string? defaultHost,
            bool? forceMiss,
            bool? forceSsl,
            bool? geoHeaders,
            string? hashKeys,
            int? maxStaleAge,
            string name,
            string? requestCondition,
            bool? timerSupport,
            string? xff)
        {
            Action = action;
            BypassBusyWait = bypassBusyWait;
            DefaultHost = defaultHost;
            ForceMiss = forceMiss;
            ForceSsl = forceSsl;
            GeoHeaders = geoHeaders;
            HashKeys = hashKeys;
            MaxStaleAge = maxStaleAge;
            Name = name;
            RequestCondition = requestCondition;
            TimerSupport = timerSupport;
            Xff = xff;
        }
    }

    [OutputType]
    public sealed class Servicev1ResponseObjects
    {
        public readonly string? CacheCondition;
        public readonly string? Content;
        public readonly string? ContentType;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? RequestCondition;
        public readonly string? Response;
        public readonly int? Status;

        [OutputConstructor]
        private Servicev1ResponseObjects(
            string? cacheCondition,
            string? content,
            string? contentType,
            string name,
            string? requestCondition,
            string? response,
            int? status)
        {
            CacheCondition = cacheCondition;
            Content = content;
            ContentType = contentType;
            Name = name;
            RequestCondition = requestCondition;
            Response = response;
            Status = status;
        }
    }

    [OutputType]
    public sealed class Servicev1S3loggings
    {
        public readonly string BucketName;
        /// <summary>
        /// A set of Domain names to serve as entry points for your
        /// Service. Defined below.
        /// </summary>
        public readonly string? Domain;
        public readonly string? Format;
        public readonly int? FormatVersion;
        public readonly int? GzipLevel;
        public readonly string? MessageType;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? Path;
        public readonly int? Period;
        public readonly string? Placement;
        public readonly string? Redundancy;
        public readonly string? ResponseCondition;
        public readonly string? S3AccessKey;
        public readonly string? S3SecretKey;
        public readonly string? TimestampFormat;

        [OutputConstructor]
        private Servicev1S3loggings(
            string bucketName,
            string? domain,
            string? format,
            int? formatVersion,
            int? gzipLevel,
            string? messageType,
            string name,
            string? path,
            int? period,
            string? placement,
            string? redundancy,
            string? responseCondition,
            string? s3AccessKey,
            string? s3SecretKey,
            string? timestampFormat)
        {
            BucketName = bucketName;
            Domain = domain;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Path = path;
            Period = period;
            Placement = placement;
            Redundancy = redundancy;
            ResponseCondition = responseCondition;
            S3AccessKey = s3AccessKey;
            S3SecretKey = s3SecretKey;
            TimestampFormat = timestampFormat;
        }
    }

    [OutputType]
    public sealed class Servicev1Snippets
    {
        public readonly string Content;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly int? Priority;
        public readonly string Type;

        [OutputConstructor]
        private Servicev1Snippets(
            string content,
            string name,
            int? priority,
            string type)
        {
            Content = content;
            Name = name;
            Priority = priority;
            Type = type;
        }
    }

    [OutputType]
    public sealed class Servicev1Splunks
    {
        public readonly string? Format;
        public readonly int? FormatVersion;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? Placement;
        public readonly string? ResponseCondition;
        public readonly string Token;
        public readonly string Url;

        [OutputConstructor]
        private Servicev1Splunks(
            string? format,
            int? formatVersion,
            string name,
            string? placement,
            string? responseCondition,
            string token,
            string url)
        {
            Format = format;
            FormatVersion = formatVersion;
            Name = name;
            Placement = placement;
            ResponseCondition = responseCondition;
            Token = token;
            Url = url;
        }
    }

    [OutputType]
    public sealed class Servicev1Sumologics
    {
        public readonly string? Format;
        public readonly int? FormatVersion;
        public readonly string? MessageType;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? Placement;
        public readonly string? ResponseCondition;
        public readonly string Url;

        [OutputConstructor]
        private Servicev1Sumologics(
            string? format,
            int? formatVersion,
            string? messageType,
            string name,
            string? placement,
            string? responseCondition,
            string url)
        {
            Format = format;
            FormatVersion = formatVersion;
            MessageType = messageType;
            Name = name;
            Placement = placement;
            ResponseCondition = responseCondition;
            Url = url;
        }
    }

    [OutputType]
    public sealed class Servicev1Syslogs
    {
        public readonly string Address;
        public readonly string? Format;
        public readonly int? FormatVersion;
        public readonly string? MessageType;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;
        public readonly string? Placement;
        public readonly int? Port;
        public readonly string? ResponseCondition;
        public readonly string? TlsCaCert;
        public readonly string? TlsHostname;
        public readonly string? Token;
        public readonly bool? UseTls;

        [OutputConstructor]
        private Servicev1Syslogs(
            string address,
            string? format,
            int? formatVersion,
            string? messageType,
            string name,
            string? placement,
            int? port,
            string? responseCondition,
            string? tlsCaCert,
            string? tlsHostname,
            string? token,
            bool? useTls)
        {
            Address = address;
            Format = format;
            FormatVersion = formatVersion;
            MessageType = messageType;
            Name = name;
            Placement = placement;
            Port = port;
            ResponseCondition = responseCondition;
            TlsCaCert = tlsCaCert;
            TlsHostname = tlsHostname;
            Token = token;
            UseTls = useTls;
        }
    }

    [OutputType]
    public sealed class Servicev1Vcls
    {
        public readonly string Content;
        public readonly bool? Main;
        /// <summary>
        /// The unique name for the Service to create.
        /// </summary>
        public readonly string Name;

        [OutputConstructor]
        private Servicev1Vcls(
            string content,
            bool? main,
            string name)
        {
            Content = content;
            Main = main;
            Name = name;
        }
    }
    }
}
