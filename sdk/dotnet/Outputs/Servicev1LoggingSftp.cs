// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Fastly.Outputs
{

    [OutputType]
    public sealed class Servicev1LoggingSftp
    {
        /// <summary>
        /// The SFTP address to stream logs to.
        /// </summary>
        public readonly string Address;
        /// <summary>
        /// Apache-style string or VCL variables to use for log formatting.
        /// </summary>
        public readonly string? Format;
        /// <summary>
        /// The version of the custom logging format used for the configured endpoint. Can be either `1` or `2`. The logging call gets placed by default in `vcl_log` if `format_version` is set to `2` and in `vcl_deliver` if `format_version` is set to `1`. Default `2`.
        /// </summary>
        public readonly int? FormatVersion;
        /// <summary>
        /// What level of GZIP encoding to have when dumping logs (default 0, no compression).
        /// </summary>
        public readonly int? GzipLevel;
        /// <summary>
        /// How the message should be formatted. One of: classic (default), loggly, logplex or blank.
        /// </summary>
        public readonly string? MessageType;
        /// <summary>
        /// A unique name to identify this dictionary.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The password for the server. If both `password` and `secret_key` are passed, `secret_key` will be preferred.
        /// </summary>
        public readonly string? Password;
        /// <summary>
        /// The path to upload log files to. If the path ends in / then it is treated as a directory.
        /// </summary>
        public readonly string Path;
        /// <summary>
        /// How frequently log files are finalized so they can be available for reading (in seconds, default `3600`).
        /// </summary>
        public readonly int? Period;
        /// <summary>
        /// The name of an existing condition in the configured endpoint, or leave blank to always execute.
        /// </summary>
        public readonly string? Placement;
        /// <summary>
        /// The port the SFTP service listens on. (Default: `22`).
        /// </summary>
        public readonly int? Port;
        /// <summary>
        /// A PGP public key that Fastly will use to encrypt your log files before writing them to disk.
        /// </summary>
        public readonly string? PublicKey;
        /// <summary>
        /// The name of the `condition` to apply. If empty, always execute.
        /// </summary>
        public readonly string? ResponseCondition;
        /// <summary>
        /// Your Google Cloud Platform account secret key. The private_key field in your service account authentication JSON.
        /// </summary>
        public readonly string? SecretKey;
        /// <summary>
        /// A list of host keys for all hosts we can connect to over SFTP.
        /// </summary>
        public readonly string SshKnownHosts;
        /// <summary>
        /// The strftime specified timestamp formatting (default `%Y-%m-%dT%H:%M:%S.000`).
        /// </summary>
        public readonly string? TimestampFormat;
        /// <summary>
        /// Your Google Cloud Platform service account email address. The client_email field in your service account authentication JSON.
        /// </summary>
        public readonly string User;

        [OutputConstructor]
        private Servicev1LoggingSftp(
            string address,

            string? format,

            int? formatVersion,

            int? gzipLevel,

            string? messageType,

            string name,

            string? password,

            string path,

            int? period,

            string? placement,

            int? port,

            string? publicKey,

            string? responseCondition,

            string? secretKey,

            string sshKnownHosts,

            string? timestampFormat,

            string user)
        {
            Address = address;
            Format = format;
            FormatVersion = formatVersion;
            GzipLevel = gzipLevel;
            MessageType = messageType;
            Name = name;
            Password = password;
            Path = path;
            Period = period;
            Placement = placement;
            Port = port;
            PublicKey = publicKey;
            ResponseCondition = responseCondition;
            SecretKey = secretKey;
            SshKnownHosts = sshKnownHosts;
            TimestampFormat = timestampFormat;
            User = user;
        }
    }
}
