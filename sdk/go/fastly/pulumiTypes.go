// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

// nolint: lll
package fastly

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

type ServiceACLEntriesv1Entry struct {
	Comment *string `pulumi:"comment"`
	Id *string `pulumi:"id"`
	Ip string `pulumi:"ip"`
	Negated *bool `pulumi:"negated"`
	Subnet *string `pulumi:"subnet"`
}

type ServiceACLEntriesv1EntryInput interface {
	pulumi.Input

	ToServiceACLEntriesv1EntryOutput() ServiceACLEntriesv1EntryOutput
	ToServiceACLEntriesv1EntryOutputWithContext(context.Context) ServiceACLEntriesv1EntryOutput
}

type ServiceACLEntriesv1EntryArgs struct {
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	Id pulumi.StringPtrInput `pulumi:"id"`
	Ip pulumi.StringInput `pulumi:"ip"`
	Negated pulumi.BoolPtrInput `pulumi:"negated"`
	Subnet pulumi.StringPtrInput `pulumi:"subnet"`
}

func (ServiceACLEntriesv1EntryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (i ServiceACLEntriesv1EntryArgs) ToServiceACLEntriesv1EntryOutput() ServiceACLEntriesv1EntryOutput {
	return i.ToServiceACLEntriesv1EntryOutputWithContext(context.Background())
}

func (i ServiceACLEntriesv1EntryArgs) ToServiceACLEntriesv1EntryOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1EntryOutput)
}

type ServiceACLEntriesv1EntryArrayInput interface {
	pulumi.Input

	ToServiceACLEntriesv1EntryArrayOutput() ServiceACLEntriesv1EntryArrayOutput
	ToServiceACLEntriesv1EntryArrayOutputWithContext(context.Context) ServiceACLEntriesv1EntryArrayOutput
}

type ServiceACLEntriesv1EntryArray []ServiceACLEntriesv1EntryInput

func (ServiceACLEntriesv1EntryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (i ServiceACLEntriesv1EntryArray) ToServiceACLEntriesv1EntryArrayOutput() ServiceACLEntriesv1EntryArrayOutput {
	return i.ToServiceACLEntriesv1EntryArrayOutputWithContext(context.Background())
}

func (i ServiceACLEntriesv1EntryArray) ToServiceACLEntriesv1EntryArrayOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceACLEntriesv1EntryArrayOutput)
}

type ServiceACLEntriesv1EntryOutput struct { *pulumi.OutputState }

func (ServiceACLEntriesv1EntryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (o ServiceACLEntriesv1EntryOutput) ToServiceACLEntriesv1EntryOutput() ServiceACLEntriesv1EntryOutput {
	return o
}

func (o ServiceACLEntriesv1EntryOutput) ToServiceACLEntriesv1EntryOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryOutput {
	return o
}

func (o ServiceACLEntriesv1EntryOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ServiceACLEntriesv1Entry) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

func (o ServiceACLEntriesv1EntryOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ServiceACLEntriesv1Entry) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o ServiceACLEntriesv1EntryOutput) Ip() pulumi.StringOutput {
	return o.ApplyT(func (v ServiceACLEntriesv1Entry) string { return v.Ip }).(pulumi.StringOutput)
}

func (o ServiceACLEntriesv1EntryOutput) Negated() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v ServiceACLEntriesv1Entry) *bool { return v.Negated }).(pulumi.BoolPtrOutput)
}

func (o ServiceACLEntriesv1EntryOutput) Subnet() pulumi.StringPtrOutput {
	return o.ApplyT(func (v ServiceACLEntriesv1Entry) *string { return v.Subnet }).(pulumi.StringPtrOutput)
}

type ServiceACLEntriesv1EntryArrayOutput struct { *pulumi.OutputState}

func (ServiceACLEntriesv1EntryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ServiceACLEntriesv1Entry)(nil)).Elem()
}

func (o ServiceACLEntriesv1EntryArrayOutput) ToServiceACLEntriesv1EntryArrayOutput() ServiceACLEntriesv1EntryArrayOutput {
	return o
}

func (o ServiceACLEntriesv1EntryArrayOutput) ToServiceACLEntriesv1EntryArrayOutputWithContext(ctx context.Context) ServiceACLEntriesv1EntryArrayOutput {
	return o
}

func (o ServiceACLEntriesv1EntryArrayOutput) Index(i pulumi.IntInput) ServiceACLEntriesv1EntryOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) ServiceACLEntriesv1Entry {
		return vs[0].([]ServiceACLEntriesv1Entry)[vs[1].(int)]
	}).(ServiceACLEntriesv1EntryOutput)
}

type Servicev1Acl struct {
	// The ID of the ACL.
	AclId *string `pulumi:"aclId"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
}

type Servicev1AclInput interface {
	pulumi.Input

	ToServicev1AclOutput() Servicev1AclOutput
	ToServicev1AclOutputWithContext(context.Context) Servicev1AclOutput
}

type Servicev1AclArgs struct {
	// The ID of the ACL.
	AclId pulumi.StringPtrInput `pulumi:"aclId"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1AclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Acl)(nil)).Elem()
}

func (i Servicev1AclArgs) ToServicev1AclOutput() Servicev1AclOutput {
	return i.ToServicev1AclOutputWithContext(context.Background())
}

func (i Servicev1AclArgs) ToServicev1AclOutputWithContext(ctx context.Context) Servicev1AclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1AclOutput)
}

type Servicev1AclArrayInput interface {
	pulumi.Input

	ToServicev1AclArrayOutput() Servicev1AclArrayOutput
	ToServicev1AclArrayOutputWithContext(context.Context) Servicev1AclArrayOutput
}

type Servicev1AclArray []Servicev1AclInput

func (Servicev1AclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Acl)(nil)).Elem()
}

func (i Servicev1AclArray) ToServicev1AclArrayOutput() Servicev1AclArrayOutput {
	return i.ToServicev1AclArrayOutputWithContext(context.Background())
}

func (i Servicev1AclArray) ToServicev1AclArrayOutputWithContext(ctx context.Context) Servicev1AclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1AclArrayOutput)
}

type Servicev1AclOutput struct { *pulumi.OutputState }

func (Servicev1AclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Acl)(nil)).Elem()
}

func (o Servicev1AclOutput) ToServicev1AclOutput() Servicev1AclOutput {
	return o
}

func (o Servicev1AclOutput) ToServicev1AclOutputWithContext(ctx context.Context) Servicev1AclOutput {
	return o
}

// The ID of the ACL.
func (o Servicev1AclOutput) AclId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Acl) *string { return v.AclId }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1AclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Acl) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1AclArrayOutput struct { *pulumi.OutputState}

func (Servicev1AclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Acl)(nil)).Elem()
}

func (o Servicev1AclArrayOutput) ToServicev1AclArrayOutput() Servicev1AclArrayOutput {
	return o
}

func (o Servicev1AclArrayOutput) ToServicev1AclArrayOutputWithContext(ctx context.Context) Servicev1AclArrayOutput {
	return o
}

func (o Servicev1AclArrayOutput) Index(i pulumi.IntInput) Servicev1AclOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Acl {
		return vs[0].([]Servicev1Acl)[vs[1].(int)]
	}).(Servicev1AclOutput)
}

type Servicev1Backend struct {
	Address string `pulumi:"address"`
	AutoLoadbalance *bool `pulumi:"autoLoadbalance"`
	BetweenBytesTimeout *int `pulumi:"betweenBytesTimeout"`
	ConnectTimeout *int `pulumi:"connectTimeout"`
	ErrorThreshold *int `pulumi:"errorThreshold"`
	FirstByteTimeout *int `pulumi:"firstByteTimeout"`
	// Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
	Healthcheck *string `pulumi:"healthcheck"`
	MaxConn *int `pulumi:"maxConn"`
	MaxTlsVersion *string `pulumi:"maxTlsVersion"`
	MinTlsVersion *string `pulumi:"minTlsVersion"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	OverrideHost *string `pulumi:"overrideHost"`
	Port *int `pulumi:"port"`
	RequestCondition *string `pulumi:"requestCondition"`
	Shield *string `pulumi:"shield"`
	SslCaCert *string `pulumi:"sslCaCert"`
	SslCertHostname *string `pulumi:"sslCertHostname"`
	SslCheckCert *bool `pulumi:"sslCheckCert"`
	SslCiphers *string `pulumi:"sslCiphers"`
	SslClientCert *string `pulumi:"sslClientCert"`
	SslClientKey *string `pulumi:"sslClientKey"`
	SslHostname *string `pulumi:"sslHostname"`
	SslSniHostname *string `pulumi:"sslSniHostname"`
	UseSsl *bool `pulumi:"useSsl"`
	Weight *int `pulumi:"weight"`
}

type Servicev1BackendInput interface {
	pulumi.Input

	ToServicev1BackendOutput() Servicev1BackendOutput
	ToServicev1BackendOutputWithContext(context.Context) Servicev1BackendOutput
}

type Servicev1BackendArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	AutoLoadbalance pulumi.BoolPtrInput `pulumi:"autoLoadbalance"`
	BetweenBytesTimeout pulumi.IntPtrInput `pulumi:"betweenBytesTimeout"`
	ConnectTimeout pulumi.IntPtrInput `pulumi:"connectTimeout"`
	ErrorThreshold pulumi.IntPtrInput `pulumi:"errorThreshold"`
	FirstByteTimeout pulumi.IntPtrInput `pulumi:"firstByteTimeout"`
	// Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
	Healthcheck pulumi.StringPtrInput `pulumi:"healthcheck"`
	MaxConn pulumi.IntPtrInput `pulumi:"maxConn"`
	MaxTlsVersion pulumi.StringPtrInput `pulumi:"maxTlsVersion"`
	MinTlsVersion pulumi.StringPtrInput `pulumi:"minTlsVersion"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	OverrideHost pulumi.StringPtrInput `pulumi:"overrideHost"`
	Port pulumi.IntPtrInput `pulumi:"port"`
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	Shield pulumi.StringPtrInput `pulumi:"shield"`
	SslCaCert pulumi.StringPtrInput `pulumi:"sslCaCert"`
	SslCertHostname pulumi.StringPtrInput `pulumi:"sslCertHostname"`
	SslCheckCert pulumi.BoolPtrInput `pulumi:"sslCheckCert"`
	SslCiphers pulumi.StringPtrInput `pulumi:"sslCiphers"`
	SslClientCert pulumi.StringPtrInput `pulumi:"sslClientCert"`
	SslClientKey pulumi.StringPtrInput `pulumi:"sslClientKey"`
	SslHostname pulumi.StringPtrInput `pulumi:"sslHostname"`
	SslSniHostname pulumi.StringPtrInput `pulumi:"sslSniHostname"`
	UseSsl pulumi.BoolPtrInput `pulumi:"useSsl"`
	Weight pulumi.IntPtrInput `pulumi:"weight"`
}

func (Servicev1BackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Backend)(nil)).Elem()
}

func (i Servicev1BackendArgs) ToServicev1BackendOutput() Servicev1BackendOutput {
	return i.ToServicev1BackendOutputWithContext(context.Background())
}

func (i Servicev1BackendArgs) ToServicev1BackendOutputWithContext(ctx context.Context) Servicev1BackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BackendOutput)
}

type Servicev1BackendArrayInput interface {
	pulumi.Input

	ToServicev1BackendArrayOutput() Servicev1BackendArrayOutput
	ToServicev1BackendArrayOutputWithContext(context.Context) Servicev1BackendArrayOutput
}

type Servicev1BackendArray []Servicev1BackendInput

func (Servicev1BackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Backend)(nil)).Elem()
}

func (i Servicev1BackendArray) ToServicev1BackendArrayOutput() Servicev1BackendArrayOutput {
	return i.ToServicev1BackendArrayOutputWithContext(context.Background())
}

func (i Servicev1BackendArray) ToServicev1BackendArrayOutputWithContext(ctx context.Context) Servicev1BackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BackendArrayOutput)
}

type Servicev1BackendOutput struct { *pulumi.OutputState }

func (Servicev1BackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Backend)(nil)).Elem()
}

func (o Servicev1BackendOutput) ToServicev1BackendOutput() Servicev1BackendOutput {
	return o
}

func (o Servicev1BackendOutput) ToServicev1BackendOutputWithContext(ctx context.Context) Servicev1BackendOutput {
	return o
}

func (o Servicev1BackendOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Backend) string { return v.Address }).(pulumi.StringOutput)
}

func (o Servicev1BackendOutput) AutoLoadbalance() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *bool { return v.AutoLoadbalance }).(pulumi.BoolPtrOutput)
}

func (o Servicev1BackendOutput) BetweenBytesTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *int { return v.BetweenBytesTimeout }).(pulumi.IntPtrOutput)
}

func (o Servicev1BackendOutput) ConnectTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *int { return v.ConnectTimeout }).(pulumi.IntPtrOutput)
}

func (o Servicev1BackendOutput) ErrorThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *int { return v.ErrorThreshold }).(pulumi.IntPtrOutput)
}

func (o Servicev1BackendOutput) FirstByteTimeout() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *int { return v.FirstByteTimeout }).(pulumi.IntPtrOutput)
}

// Automated healthchecks on the cache that can change how Fastly interacts with the cache based on its health.
func (o Servicev1BackendOutput) Healthcheck() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.Healthcheck }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) MaxConn() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *int { return v.MaxConn }).(pulumi.IntPtrOutput)
}

func (o Servicev1BackendOutput) MaxTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.MaxTlsVersion }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) MinTlsVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.MinTlsVersion }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1BackendOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Backend) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1BackendOutput) OverrideHost() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.OverrideHost }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o Servicev1BackendOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.SslCaCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslCertHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.SslCertHostname }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslCheckCert() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *bool { return v.SslCheckCert }).(pulumi.BoolPtrOutput)
}

func (o Servicev1BackendOutput) SslCiphers() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.SslCiphers }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.SslClientCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.SslClientKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.SslHostname }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) SslSniHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *string { return v.SslSniHostname }).(pulumi.StringPtrOutput)
}

func (o Servicev1BackendOutput) UseSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *bool { return v.UseSsl }).(pulumi.BoolPtrOutput)
}

func (o Servicev1BackendOutput) Weight() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Backend) *int { return v.Weight }).(pulumi.IntPtrOutput)
}

type Servicev1BackendArrayOutput struct { *pulumi.OutputState}

func (Servicev1BackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Backend)(nil)).Elem()
}

func (o Servicev1BackendArrayOutput) ToServicev1BackendArrayOutput() Servicev1BackendArrayOutput {
	return o
}

func (o Servicev1BackendArrayOutput) ToServicev1BackendArrayOutputWithContext(ctx context.Context) Servicev1BackendArrayOutput {
	return o
}

func (o Servicev1BackendArrayOutput) Index(i pulumi.IntInput) Servicev1BackendOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Backend {
		return vs[0].([]Servicev1Backend)[vs[1].(int)]
	}).(Servicev1BackendOutput)
}

type Servicev1Bigquerylogging struct {
	Dataset string `pulumi:"dataset"`
	Email *string `pulumi:"email"`
	Format *string `pulumi:"format"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Placement *string `pulumi:"placement"`
	ProjectId string `pulumi:"projectId"`
	ResponseCondition *string `pulumi:"responseCondition"`
	SecretKey *string `pulumi:"secretKey"`
	Table string `pulumi:"table"`
	Template *string `pulumi:"template"`
}

type Servicev1BigqueryloggingInput interface {
	pulumi.Input

	ToServicev1BigqueryloggingOutput() Servicev1BigqueryloggingOutput
	ToServicev1BigqueryloggingOutputWithContext(context.Context) Servicev1BigqueryloggingOutput
}

type Servicev1BigqueryloggingArgs struct {
	Dataset pulumi.StringInput `pulumi:"dataset"`
	Email pulumi.StringPtrInput `pulumi:"email"`
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	Table pulumi.StringInput `pulumi:"table"`
	Template pulumi.StringPtrInput `pulumi:"template"`
}

func (Servicev1BigqueryloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Bigquerylogging)(nil)).Elem()
}

func (i Servicev1BigqueryloggingArgs) ToServicev1BigqueryloggingOutput() Servicev1BigqueryloggingOutput {
	return i.ToServicev1BigqueryloggingOutputWithContext(context.Background())
}

func (i Servicev1BigqueryloggingArgs) ToServicev1BigqueryloggingOutputWithContext(ctx context.Context) Servicev1BigqueryloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BigqueryloggingOutput)
}

type Servicev1BigqueryloggingArrayInput interface {
	pulumi.Input

	ToServicev1BigqueryloggingArrayOutput() Servicev1BigqueryloggingArrayOutput
	ToServicev1BigqueryloggingArrayOutputWithContext(context.Context) Servicev1BigqueryloggingArrayOutput
}

type Servicev1BigqueryloggingArray []Servicev1BigqueryloggingInput

func (Servicev1BigqueryloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Bigquerylogging)(nil)).Elem()
}

func (i Servicev1BigqueryloggingArray) ToServicev1BigqueryloggingArrayOutput() Servicev1BigqueryloggingArrayOutput {
	return i.ToServicev1BigqueryloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1BigqueryloggingArray) ToServicev1BigqueryloggingArrayOutputWithContext(ctx context.Context) Servicev1BigqueryloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BigqueryloggingArrayOutput)
}

type Servicev1BigqueryloggingOutput struct { *pulumi.OutputState }

func (Servicev1BigqueryloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Bigquerylogging)(nil)).Elem()
}

func (o Servicev1BigqueryloggingOutput) ToServicev1BigqueryloggingOutput() Servicev1BigqueryloggingOutput {
	return o
}

func (o Servicev1BigqueryloggingOutput) ToServicev1BigqueryloggingOutputWithContext(ctx context.Context) Servicev1BigqueryloggingOutput {
	return o
}

func (o Servicev1BigqueryloggingOutput) Dataset() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) string { return v.Dataset }).(pulumi.StringOutput)
}

func (o Servicev1BigqueryloggingOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) *string { return v.Email }).(pulumi.StringPtrOutput)
}

func (o Servicev1BigqueryloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1BigqueryloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1BigqueryloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1BigqueryloggingOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o Servicev1BigqueryloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1BigqueryloggingOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1BigqueryloggingOutput) Table() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) string { return v.Table }).(pulumi.StringOutput)
}

func (o Servicev1BigqueryloggingOutput) Template() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Bigquerylogging) *string { return v.Template }).(pulumi.StringPtrOutput)
}

type Servicev1BigqueryloggingArrayOutput struct { *pulumi.OutputState}

func (Servicev1BigqueryloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Bigquerylogging)(nil)).Elem()
}

func (o Servicev1BigqueryloggingArrayOutput) ToServicev1BigqueryloggingArrayOutput() Servicev1BigqueryloggingArrayOutput {
	return o
}

func (o Servicev1BigqueryloggingArrayOutput) ToServicev1BigqueryloggingArrayOutputWithContext(ctx context.Context) Servicev1BigqueryloggingArrayOutput {
	return o
}

func (o Servicev1BigqueryloggingArrayOutput) Index(i pulumi.IntInput) Servicev1BigqueryloggingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Bigquerylogging {
		return vs[0].([]Servicev1Bigquerylogging)[vs[1].(int)]
	}).(Servicev1BigqueryloggingOutput)
}

type Servicev1Blobstoragelogging struct {
	AccountName string `pulumi:"accountName"`
	Container string `pulumi:"container"`
	Format *string `pulumi:"format"`
	FormatVersion *int `pulumi:"formatVersion"`
	GzipLevel *int `pulumi:"gzipLevel"`
	MessageType *string `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Path *string `pulumi:"path"`
	Period *int `pulumi:"period"`
	Placement *string `pulumi:"placement"`
	PublicKey *string `pulumi:"publicKey"`
	ResponseCondition *string `pulumi:"responseCondition"`
	SasToken string `pulumi:"sasToken"`
	TimestampFormat *string `pulumi:"timestampFormat"`
}

type Servicev1BlobstorageloggingInput interface {
	pulumi.Input

	ToServicev1BlobstorageloggingOutput() Servicev1BlobstorageloggingOutput
	ToServicev1BlobstorageloggingOutputWithContext(context.Context) Servicev1BlobstorageloggingOutput
}

type Servicev1BlobstorageloggingArgs struct {
	AccountName pulumi.StringInput `pulumi:"accountName"`
	Container pulumi.StringInput `pulumi:"container"`
	Format pulumi.StringPtrInput `pulumi:"format"`
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Path pulumi.StringPtrInput `pulumi:"path"`
	Period pulumi.IntPtrInput `pulumi:"period"`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	PublicKey pulumi.StringPtrInput `pulumi:"publicKey"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	SasToken pulumi.StringInput `pulumi:"sasToken"`
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1BlobstorageloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Blobstoragelogging)(nil)).Elem()
}

func (i Servicev1BlobstorageloggingArgs) ToServicev1BlobstorageloggingOutput() Servicev1BlobstorageloggingOutput {
	return i.ToServicev1BlobstorageloggingOutputWithContext(context.Background())
}

func (i Servicev1BlobstorageloggingArgs) ToServicev1BlobstorageloggingOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BlobstorageloggingOutput)
}

type Servicev1BlobstorageloggingArrayInput interface {
	pulumi.Input

	ToServicev1BlobstorageloggingArrayOutput() Servicev1BlobstorageloggingArrayOutput
	ToServicev1BlobstorageloggingArrayOutputWithContext(context.Context) Servicev1BlobstorageloggingArrayOutput
}

type Servicev1BlobstorageloggingArray []Servicev1BlobstorageloggingInput

func (Servicev1BlobstorageloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Blobstoragelogging)(nil)).Elem()
}

func (i Servicev1BlobstorageloggingArray) ToServicev1BlobstorageloggingArrayOutput() Servicev1BlobstorageloggingArrayOutput {
	return i.ToServicev1BlobstorageloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1BlobstorageloggingArray) ToServicev1BlobstorageloggingArrayOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1BlobstorageloggingArrayOutput)
}

type Servicev1BlobstorageloggingOutput struct { *pulumi.OutputState }

func (Servicev1BlobstorageloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Blobstoragelogging)(nil)).Elem()
}

func (o Servicev1BlobstorageloggingOutput) ToServicev1BlobstorageloggingOutput() Servicev1BlobstorageloggingOutput {
	return o
}

func (o Servicev1BlobstorageloggingOutput) ToServicev1BlobstorageloggingOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingOutput {
	return o
}

func (o Servicev1BlobstorageloggingOutput) AccountName() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) string { return v.AccountName }).(pulumi.StringOutput)
}

func (o Servicev1BlobstorageloggingOutput) Container() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) string { return v.Container }).(pulumi.StringOutput)
}

func (o Servicev1BlobstorageloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o Servicev1BlobstorageloggingOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

func (o Servicev1BlobstorageloggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

func (o Servicev1BlobstorageloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1BlobstorageloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1BlobstorageloggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o Servicev1BlobstorageloggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

func (o Servicev1BlobstorageloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1BlobstorageloggingOutput) PublicKey() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *string { return v.PublicKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1BlobstorageloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1BlobstorageloggingOutput) SasToken() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) string { return v.SasToken }).(pulumi.StringOutput)
}

func (o Servicev1BlobstorageloggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Blobstoragelogging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1BlobstorageloggingArrayOutput struct { *pulumi.OutputState}

func (Servicev1BlobstorageloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Blobstoragelogging)(nil)).Elem()
}

func (o Servicev1BlobstorageloggingArrayOutput) ToServicev1BlobstorageloggingArrayOutput() Servicev1BlobstorageloggingArrayOutput {
	return o
}

func (o Servicev1BlobstorageloggingArrayOutput) ToServicev1BlobstorageloggingArrayOutputWithContext(ctx context.Context) Servicev1BlobstorageloggingArrayOutput {
	return o
}

func (o Servicev1BlobstorageloggingArrayOutput) Index(i pulumi.IntInput) Servicev1BlobstorageloggingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Blobstoragelogging {
		return vs[0].([]Servicev1Blobstoragelogging)[vs[1].(int)]
	}).(Servicev1BlobstorageloggingOutput)
}

type Servicev1CacheSetting struct {
	Action *string `pulumi:"action"`
	CacheCondition *string `pulumi:"cacheCondition"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	StaleTtl *int `pulumi:"staleTtl"`
	Ttl *int `pulumi:"ttl"`
}

type Servicev1CacheSettingInput interface {
	pulumi.Input

	ToServicev1CacheSettingOutput() Servicev1CacheSettingOutput
	ToServicev1CacheSettingOutputWithContext(context.Context) Servicev1CacheSettingOutput
}

type Servicev1CacheSettingArgs struct {
	Action pulumi.StringPtrInput `pulumi:"action"`
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	StaleTtl pulumi.IntPtrInput `pulumi:"staleTtl"`
	Ttl pulumi.IntPtrInput `pulumi:"ttl"`
}

func (Servicev1CacheSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1CacheSetting)(nil)).Elem()
}

func (i Servicev1CacheSettingArgs) ToServicev1CacheSettingOutput() Servicev1CacheSettingOutput {
	return i.ToServicev1CacheSettingOutputWithContext(context.Background())
}

func (i Servicev1CacheSettingArgs) ToServicev1CacheSettingOutputWithContext(ctx context.Context) Servicev1CacheSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1CacheSettingOutput)
}

type Servicev1CacheSettingArrayInput interface {
	pulumi.Input

	ToServicev1CacheSettingArrayOutput() Servicev1CacheSettingArrayOutput
	ToServicev1CacheSettingArrayOutputWithContext(context.Context) Servicev1CacheSettingArrayOutput
}

type Servicev1CacheSettingArray []Servicev1CacheSettingInput

func (Servicev1CacheSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1CacheSetting)(nil)).Elem()
}

func (i Servicev1CacheSettingArray) ToServicev1CacheSettingArrayOutput() Servicev1CacheSettingArrayOutput {
	return i.ToServicev1CacheSettingArrayOutputWithContext(context.Background())
}

func (i Servicev1CacheSettingArray) ToServicev1CacheSettingArrayOutputWithContext(ctx context.Context) Servicev1CacheSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1CacheSettingArrayOutput)
}

type Servicev1CacheSettingOutput struct { *pulumi.OutputState }

func (Servicev1CacheSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1CacheSetting)(nil)).Elem()
}

func (o Servicev1CacheSettingOutput) ToServicev1CacheSettingOutput() Servicev1CacheSettingOutput {
	return o
}

func (o Servicev1CacheSettingOutput) ToServicev1CacheSettingOutputWithContext(ctx context.Context) Servicev1CacheSettingOutput {
	return o
}

func (o Servicev1CacheSettingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1CacheSetting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o Servicev1CacheSettingOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1CacheSetting) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1CacheSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1CacheSetting) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1CacheSettingOutput) StaleTtl() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1CacheSetting) *int { return v.StaleTtl }).(pulumi.IntPtrOutput)
}

func (o Servicev1CacheSettingOutput) Ttl() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1CacheSetting) *int { return v.Ttl }).(pulumi.IntPtrOutput)
}

type Servicev1CacheSettingArrayOutput struct { *pulumi.OutputState}

func (Servicev1CacheSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1CacheSetting)(nil)).Elem()
}

func (o Servicev1CacheSettingArrayOutput) ToServicev1CacheSettingArrayOutput() Servicev1CacheSettingArrayOutput {
	return o
}

func (o Servicev1CacheSettingArrayOutput) ToServicev1CacheSettingArrayOutputWithContext(ctx context.Context) Servicev1CacheSettingArrayOutput {
	return o
}

func (o Servicev1CacheSettingArrayOutput) Index(i pulumi.IntInput) Servicev1CacheSettingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1CacheSetting {
		return vs[0].([]Servicev1CacheSetting)[vs[1].(int)]
	}).(Servicev1CacheSettingOutput)
}

type Servicev1Condition struct {
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Priority *int `pulumi:"priority"`
	Statement string `pulumi:"statement"`
	Type string `pulumi:"type"`
}

type Servicev1ConditionInput interface {
	pulumi.Input

	ToServicev1ConditionOutput() Servicev1ConditionOutput
	ToServicev1ConditionOutputWithContext(context.Context) Servicev1ConditionOutput
}

type Servicev1ConditionArgs struct {
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	Statement pulumi.StringInput `pulumi:"statement"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1ConditionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Condition)(nil)).Elem()
}

func (i Servicev1ConditionArgs) ToServicev1ConditionOutput() Servicev1ConditionOutput {
	return i.ToServicev1ConditionOutputWithContext(context.Background())
}

func (i Servicev1ConditionArgs) ToServicev1ConditionOutputWithContext(ctx context.Context) Servicev1ConditionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ConditionOutput)
}

type Servicev1ConditionArrayInput interface {
	pulumi.Input

	ToServicev1ConditionArrayOutput() Servicev1ConditionArrayOutput
	ToServicev1ConditionArrayOutputWithContext(context.Context) Servicev1ConditionArrayOutput
}

type Servicev1ConditionArray []Servicev1ConditionInput

func (Servicev1ConditionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Condition)(nil)).Elem()
}

func (i Servicev1ConditionArray) ToServicev1ConditionArrayOutput() Servicev1ConditionArrayOutput {
	return i.ToServicev1ConditionArrayOutputWithContext(context.Background())
}

func (i Servicev1ConditionArray) ToServicev1ConditionArrayOutputWithContext(ctx context.Context) Servicev1ConditionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ConditionArrayOutput)
}

type Servicev1ConditionOutput struct { *pulumi.OutputState }

func (Servicev1ConditionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Condition)(nil)).Elem()
}

func (o Servicev1ConditionOutput) ToServicev1ConditionOutput() Servicev1ConditionOutput {
	return o
}

func (o Servicev1ConditionOutput) ToServicev1ConditionOutputWithContext(ctx context.Context) Servicev1ConditionOutput {
	return o
}

// The unique name for the Service to create.
func (o Servicev1ConditionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Condition) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1ConditionOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Condition) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o Servicev1ConditionOutput) Statement() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Condition) string { return v.Statement }).(pulumi.StringOutput)
}

func (o Servicev1ConditionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Condition) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1ConditionArrayOutput struct { *pulumi.OutputState}

func (Servicev1ConditionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Condition)(nil)).Elem()
}

func (o Servicev1ConditionArrayOutput) ToServicev1ConditionArrayOutput() Servicev1ConditionArrayOutput {
	return o
}

func (o Servicev1ConditionArrayOutput) ToServicev1ConditionArrayOutputWithContext(ctx context.Context) Servicev1ConditionArrayOutput {
	return o
}

func (o Servicev1ConditionArrayOutput) Index(i pulumi.IntInput) Servicev1ConditionOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Condition {
		return vs[0].([]Servicev1Condition)[vs[1].(int)]
	}).(Servicev1ConditionOutput)
}

type Servicev1Dictionary struct {
	// The ID of the dictionary.
	DictionaryId *string `pulumi:"dictionaryId"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	WriteOnly *bool `pulumi:"writeOnly"`
}

type Servicev1DictionaryInput interface {
	pulumi.Input

	ToServicev1DictionaryOutput() Servicev1DictionaryOutput
	ToServicev1DictionaryOutputWithContext(context.Context) Servicev1DictionaryOutput
}

type Servicev1DictionaryArgs struct {
	// The ID of the dictionary.
	DictionaryId pulumi.StringPtrInput `pulumi:"dictionaryId"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	WriteOnly pulumi.BoolPtrInput `pulumi:"writeOnly"`
}

func (Servicev1DictionaryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dictionary)(nil)).Elem()
}

func (i Servicev1DictionaryArgs) ToServicev1DictionaryOutput() Servicev1DictionaryOutput {
	return i.ToServicev1DictionaryOutputWithContext(context.Background())
}

func (i Servicev1DictionaryArgs) ToServicev1DictionaryOutputWithContext(ctx context.Context) Servicev1DictionaryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DictionaryOutput)
}

type Servicev1DictionaryArrayInput interface {
	pulumi.Input

	ToServicev1DictionaryArrayOutput() Servicev1DictionaryArrayOutput
	ToServicev1DictionaryArrayOutputWithContext(context.Context) Servicev1DictionaryArrayOutput
}

type Servicev1DictionaryArray []Servicev1DictionaryInput

func (Servicev1DictionaryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dictionary)(nil)).Elem()
}

func (i Servicev1DictionaryArray) ToServicev1DictionaryArrayOutput() Servicev1DictionaryArrayOutput {
	return i.ToServicev1DictionaryArrayOutputWithContext(context.Background())
}

func (i Servicev1DictionaryArray) ToServicev1DictionaryArrayOutputWithContext(ctx context.Context) Servicev1DictionaryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DictionaryArrayOutput)
}

type Servicev1DictionaryOutput struct { *pulumi.OutputState }

func (Servicev1DictionaryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dictionary)(nil)).Elem()
}

func (o Servicev1DictionaryOutput) ToServicev1DictionaryOutput() Servicev1DictionaryOutput {
	return o
}

func (o Servicev1DictionaryOutput) ToServicev1DictionaryOutputWithContext(ctx context.Context) Servicev1DictionaryOutput {
	return o
}

// The ID of the dictionary.
func (o Servicev1DictionaryOutput) DictionaryId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Dictionary) *string { return v.DictionaryId }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1DictionaryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Dictionary) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1DictionaryOutput) WriteOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1Dictionary) *bool { return v.WriteOnly }).(pulumi.BoolPtrOutput)
}

type Servicev1DictionaryArrayOutput struct { *pulumi.OutputState}

func (Servicev1DictionaryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dictionary)(nil)).Elem()
}

func (o Servicev1DictionaryArrayOutput) ToServicev1DictionaryArrayOutput() Servicev1DictionaryArrayOutput {
	return o
}

func (o Servicev1DictionaryArrayOutput) ToServicev1DictionaryArrayOutputWithContext(ctx context.Context) Servicev1DictionaryArrayOutput {
	return o
}

func (o Servicev1DictionaryArrayOutput) Index(i pulumi.IntInput) Servicev1DictionaryOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Dictionary {
		return vs[0].([]Servicev1Dictionary)[vs[1].(int)]
	}).(Servicev1DictionaryOutput)
}

type Servicev1Director struct {
	Backends []string `pulumi:"backends"`
	Capacity *int `pulumi:"capacity"`
	Comment *string `pulumi:"comment"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Quorum *int `pulumi:"quorum"`
	Retries *int `pulumi:"retries"`
	Shield *string `pulumi:"shield"`
	Type *int `pulumi:"type"`
}

type Servicev1DirectorInput interface {
	pulumi.Input

	ToServicev1DirectorOutput() Servicev1DirectorOutput
	ToServicev1DirectorOutputWithContext(context.Context) Servicev1DirectorOutput
}

type Servicev1DirectorArgs struct {
	Backends pulumi.StringArrayInput `pulumi:"backends"`
	Capacity pulumi.IntPtrInput `pulumi:"capacity"`
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Quorum pulumi.IntPtrInput `pulumi:"quorum"`
	Retries pulumi.IntPtrInput `pulumi:"retries"`
	Shield pulumi.StringPtrInput `pulumi:"shield"`
	Type pulumi.IntPtrInput `pulumi:"type"`
}

func (Servicev1DirectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Director)(nil)).Elem()
}

func (i Servicev1DirectorArgs) ToServicev1DirectorOutput() Servicev1DirectorOutput {
	return i.ToServicev1DirectorOutputWithContext(context.Background())
}

func (i Servicev1DirectorArgs) ToServicev1DirectorOutputWithContext(ctx context.Context) Servicev1DirectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DirectorOutput)
}

type Servicev1DirectorArrayInput interface {
	pulumi.Input

	ToServicev1DirectorArrayOutput() Servicev1DirectorArrayOutput
	ToServicev1DirectorArrayOutputWithContext(context.Context) Servicev1DirectorArrayOutput
}

type Servicev1DirectorArray []Servicev1DirectorInput

func (Servicev1DirectorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Director)(nil)).Elem()
}

func (i Servicev1DirectorArray) ToServicev1DirectorArrayOutput() Servicev1DirectorArrayOutput {
	return i.ToServicev1DirectorArrayOutputWithContext(context.Background())
}

func (i Servicev1DirectorArray) ToServicev1DirectorArrayOutputWithContext(ctx context.Context) Servicev1DirectorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DirectorArrayOutput)
}

type Servicev1DirectorOutput struct { *pulumi.OutputState }

func (Servicev1DirectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Director)(nil)).Elem()
}

func (o Servicev1DirectorOutput) ToServicev1DirectorOutput() Servicev1DirectorOutput {
	return o
}

func (o Servicev1DirectorOutput) ToServicev1DirectorOutputWithContext(ctx context.Context) Servicev1DirectorOutput {
	return o
}

func (o Servicev1DirectorOutput) Backends() pulumi.StringArrayOutput {
	return o.ApplyT(func (v Servicev1Director) []string { return v.Backends }).(pulumi.StringArrayOutput)
}

func (o Servicev1DirectorOutput) Capacity() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Director) *int { return v.Capacity }).(pulumi.IntPtrOutput)
}

func (o Servicev1DirectorOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Director) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1DirectorOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Director) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1DirectorOutput) Quorum() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Director) *int { return v.Quorum }).(pulumi.IntPtrOutput)
}

func (o Servicev1DirectorOutput) Retries() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Director) *int { return v.Retries }).(pulumi.IntPtrOutput)
}

func (o Servicev1DirectorOutput) Shield() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Director) *string { return v.Shield }).(pulumi.StringPtrOutput)
}

func (o Servicev1DirectorOutput) Type() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Director) *int { return v.Type }).(pulumi.IntPtrOutput)
}

type Servicev1DirectorArrayOutput struct { *pulumi.OutputState}

func (Servicev1DirectorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Director)(nil)).Elem()
}

func (o Servicev1DirectorArrayOutput) ToServicev1DirectorArrayOutput() Servicev1DirectorArrayOutput {
	return o
}

func (o Servicev1DirectorArrayOutput) ToServicev1DirectorArrayOutputWithContext(ctx context.Context) Servicev1DirectorArrayOutput {
	return o
}

func (o Servicev1DirectorArrayOutput) Index(i pulumi.IntInput) Servicev1DirectorOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Director {
		return vs[0].([]Servicev1Director)[vs[1].(int)]
	}).(Servicev1DirectorOutput)
}

type Servicev1Domain struct {
	Comment *string `pulumi:"comment"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
}

type Servicev1DomainInput interface {
	pulumi.Input

	ToServicev1DomainOutput() Servicev1DomainOutput
	ToServicev1DomainOutputWithContext(context.Context) Servicev1DomainOutput
}

type Servicev1DomainArgs struct {
	Comment pulumi.StringPtrInput `pulumi:"comment"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1DomainArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Domain)(nil)).Elem()
}

func (i Servicev1DomainArgs) ToServicev1DomainOutput() Servicev1DomainOutput {
	return i.ToServicev1DomainOutputWithContext(context.Background())
}

func (i Servicev1DomainArgs) ToServicev1DomainOutputWithContext(ctx context.Context) Servicev1DomainOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DomainOutput)
}

type Servicev1DomainArrayInput interface {
	pulumi.Input

	ToServicev1DomainArrayOutput() Servicev1DomainArrayOutput
	ToServicev1DomainArrayOutputWithContext(context.Context) Servicev1DomainArrayOutput
}

type Servicev1DomainArray []Servicev1DomainInput

func (Servicev1DomainArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Domain)(nil)).Elem()
}

func (i Servicev1DomainArray) ToServicev1DomainArrayOutput() Servicev1DomainArrayOutput {
	return i.ToServicev1DomainArrayOutputWithContext(context.Background())
}

func (i Servicev1DomainArray) ToServicev1DomainArrayOutputWithContext(ctx context.Context) Servicev1DomainArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DomainArrayOutput)
}

type Servicev1DomainOutput struct { *pulumi.OutputState }

func (Servicev1DomainOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Domain)(nil)).Elem()
}

func (o Servicev1DomainOutput) ToServicev1DomainOutput() Servicev1DomainOutput {
	return o
}

func (o Servicev1DomainOutput) ToServicev1DomainOutputWithContext(ctx context.Context) Servicev1DomainOutput {
	return o
}

func (o Servicev1DomainOutput) Comment() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Domain) *string { return v.Comment }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1DomainOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Domain) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1DomainArrayOutput struct { *pulumi.OutputState}

func (Servicev1DomainArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Domain)(nil)).Elem()
}

func (o Servicev1DomainArrayOutput) ToServicev1DomainArrayOutput() Servicev1DomainArrayOutput {
	return o
}

func (o Servicev1DomainArrayOutput) ToServicev1DomainArrayOutputWithContext(ctx context.Context) Servicev1DomainArrayOutput {
	return o
}

func (o Servicev1DomainArrayOutput) Index(i pulumi.IntInput) Servicev1DomainOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Domain {
		return vs[0].([]Servicev1Domain)[vs[1].(int)]
	}).(Servicev1DomainOutput)
}

type Servicev1Dynamicsnippet struct {
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Priority *int `pulumi:"priority"`
	// The ID of the dynamic snippet.
	SnippetId *string `pulumi:"snippetId"`
	Type string `pulumi:"type"`
}

type Servicev1DynamicsnippetInput interface {
	pulumi.Input

	ToServicev1DynamicsnippetOutput() Servicev1DynamicsnippetOutput
	ToServicev1DynamicsnippetOutputWithContext(context.Context) Servicev1DynamicsnippetOutput
}

type Servicev1DynamicsnippetArgs struct {
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	// The ID of the dynamic snippet.
	SnippetId pulumi.StringPtrInput `pulumi:"snippetId"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1DynamicsnippetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dynamicsnippet)(nil)).Elem()
}

func (i Servicev1DynamicsnippetArgs) ToServicev1DynamicsnippetOutput() Servicev1DynamicsnippetOutput {
	return i.ToServicev1DynamicsnippetOutputWithContext(context.Background())
}

func (i Servicev1DynamicsnippetArgs) ToServicev1DynamicsnippetOutputWithContext(ctx context.Context) Servicev1DynamicsnippetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DynamicsnippetOutput)
}

type Servicev1DynamicsnippetArrayInput interface {
	pulumi.Input

	ToServicev1DynamicsnippetArrayOutput() Servicev1DynamicsnippetArrayOutput
	ToServicev1DynamicsnippetArrayOutputWithContext(context.Context) Servicev1DynamicsnippetArrayOutput
}

type Servicev1DynamicsnippetArray []Servicev1DynamicsnippetInput

func (Servicev1DynamicsnippetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dynamicsnippet)(nil)).Elem()
}

func (i Servicev1DynamicsnippetArray) ToServicev1DynamicsnippetArrayOutput() Servicev1DynamicsnippetArrayOutput {
	return i.ToServicev1DynamicsnippetArrayOutputWithContext(context.Background())
}

func (i Servicev1DynamicsnippetArray) ToServicev1DynamicsnippetArrayOutputWithContext(ctx context.Context) Servicev1DynamicsnippetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1DynamicsnippetArrayOutput)
}

type Servicev1DynamicsnippetOutput struct { *pulumi.OutputState }

func (Servicev1DynamicsnippetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Dynamicsnippet)(nil)).Elem()
}

func (o Servicev1DynamicsnippetOutput) ToServicev1DynamicsnippetOutput() Servicev1DynamicsnippetOutput {
	return o
}

func (o Servicev1DynamicsnippetOutput) ToServicev1DynamicsnippetOutputWithContext(ctx context.Context) Servicev1DynamicsnippetOutput {
	return o
}

// The unique name for the Service to create.
func (o Servicev1DynamicsnippetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Dynamicsnippet) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1DynamicsnippetOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Dynamicsnippet) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

// The ID of the dynamic snippet.
func (o Servicev1DynamicsnippetOutput) SnippetId() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Dynamicsnippet) *string { return v.SnippetId }).(pulumi.StringPtrOutput)
}

func (o Servicev1DynamicsnippetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Dynamicsnippet) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1DynamicsnippetArrayOutput struct { *pulumi.OutputState}

func (Servicev1DynamicsnippetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Dynamicsnippet)(nil)).Elem()
}

func (o Servicev1DynamicsnippetArrayOutput) ToServicev1DynamicsnippetArrayOutput() Servicev1DynamicsnippetArrayOutput {
	return o
}

func (o Servicev1DynamicsnippetArrayOutput) ToServicev1DynamicsnippetArrayOutputWithContext(ctx context.Context) Servicev1DynamicsnippetArrayOutput {
	return o
}

func (o Servicev1DynamicsnippetArrayOutput) Index(i pulumi.IntInput) Servicev1DynamicsnippetOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Dynamicsnippet {
		return vs[0].([]Servicev1Dynamicsnippet)[vs[1].(int)]
	}).(Servicev1DynamicsnippetOutput)
}

type Servicev1Gcslogging struct {
	BucketName string `pulumi:"bucketName"`
	Email *string `pulumi:"email"`
	Format *string `pulumi:"format"`
	GzipLevel *int `pulumi:"gzipLevel"`
	MessageType *string `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Path *string `pulumi:"path"`
	Period *int `pulumi:"period"`
	Placement *string `pulumi:"placement"`
	ResponseCondition *string `pulumi:"responseCondition"`
	SecretKey *string `pulumi:"secretKey"`
	TimestampFormat *string `pulumi:"timestampFormat"`
}

type Servicev1GcsloggingInput interface {
	pulumi.Input

	ToServicev1GcsloggingOutput() Servicev1GcsloggingOutput
	ToServicev1GcsloggingOutputWithContext(context.Context) Servicev1GcsloggingOutput
}

type Servicev1GcsloggingArgs struct {
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	Email pulumi.StringPtrInput `pulumi:"email"`
	Format pulumi.StringPtrInput `pulumi:"format"`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Path pulumi.StringPtrInput `pulumi:"path"`
	Period pulumi.IntPtrInput `pulumi:"period"`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	SecretKey pulumi.StringPtrInput `pulumi:"secretKey"`
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1GcsloggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gcslogging)(nil)).Elem()
}

func (i Servicev1GcsloggingArgs) ToServicev1GcsloggingOutput() Servicev1GcsloggingOutput {
	return i.ToServicev1GcsloggingOutputWithContext(context.Background())
}

func (i Servicev1GcsloggingArgs) ToServicev1GcsloggingOutputWithContext(ctx context.Context) Servicev1GcsloggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GcsloggingOutput)
}

type Servicev1GcsloggingArrayInput interface {
	pulumi.Input

	ToServicev1GcsloggingArrayOutput() Servicev1GcsloggingArrayOutput
	ToServicev1GcsloggingArrayOutputWithContext(context.Context) Servicev1GcsloggingArrayOutput
}

type Servicev1GcsloggingArray []Servicev1GcsloggingInput

func (Servicev1GcsloggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gcslogging)(nil)).Elem()
}

func (i Servicev1GcsloggingArray) ToServicev1GcsloggingArrayOutput() Servicev1GcsloggingArrayOutput {
	return i.ToServicev1GcsloggingArrayOutputWithContext(context.Background())
}

func (i Servicev1GcsloggingArray) ToServicev1GcsloggingArrayOutputWithContext(ctx context.Context) Servicev1GcsloggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GcsloggingArrayOutput)
}

type Servicev1GcsloggingOutput struct { *pulumi.OutputState }

func (Servicev1GcsloggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gcslogging)(nil)).Elem()
}

func (o Servicev1GcsloggingOutput) ToServicev1GcsloggingOutput() Servicev1GcsloggingOutput {
	return o
}

func (o Servicev1GcsloggingOutput) ToServicev1GcsloggingOutputWithContext(ctx context.Context) Servicev1GcsloggingOutput {
	return o
}

func (o Servicev1GcsloggingOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o Servicev1GcsloggingOutput) Email() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *string { return v.Email }).(pulumi.StringPtrOutput)
}

func (o Servicev1GcsloggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o Servicev1GcsloggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

func (o Servicev1GcsloggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1GcsloggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1GcsloggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o Servicev1GcsloggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

func (o Servicev1GcsloggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1GcsloggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1GcsloggingOutput) SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *string { return v.SecretKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1GcsloggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Gcslogging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1GcsloggingArrayOutput struct { *pulumi.OutputState}

func (Servicev1GcsloggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gcslogging)(nil)).Elem()
}

func (o Servicev1GcsloggingArrayOutput) ToServicev1GcsloggingArrayOutput() Servicev1GcsloggingArrayOutput {
	return o
}

func (o Servicev1GcsloggingArrayOutput) ToServicev1GcsloggingArrayOutputWithContext(ctx context.Context) Servicev1GcsloggingArrayOutput {
	return o
}

func (o Servicev1GcsloggingArrayOutput) Index(i pulumi.IntInput) Servicev1GcsloggingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Gcslogging {
		return vs[0].([]Servicev1Gcslogging)[vs[1].(int)]
	}).(Servicev1GcsloggingOutput)
}

type Servicev1Gzip struct {
	CacheCondition *string `pulumi:"cacheCondition"`
	ContentTypes []string `pulumi:"contentTypes"`
	Extensions []string `pulumi:"extensions"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
}

type Servicev1GzipInput interface {
	pulumi.Input

	ToServicev1GzipOutput() Servicev1GzipOutput
	ToServicev1GzipOutputWithContext(context.Context) Servicev1GzipOutput
}

type Servicev1GzipArgs struct {
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	ContentTypes pulumi.StringArrayInput `pulumi:"contentTypes"`
	Extensions pulumi.StringArrayInput `pulumi:"extensions"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1GzipArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gzip)(nil)).Elem()
}

func (i Servicev1GzipArgs) ToServicev1GzipOutput() Servicev1GzipOutput {
	return i.ToServicev1GzipOutputWithContext(context.Background())
}

func (i Servicev1GzipArgs) ToServicev1GzipOutputWithContext(ctx context.Context) Servicev1GzipOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GzipOutput)
}

type Servicev1GzipArrayInput interface {
	pulumi.Input

	ToServicev1GzipArrayOutput() Servicev1GzipArrayOutput
	ToServicev1GzipArrayOutputWithContext(context.Context) Servicev1GzipArrayOutput
}

type Servicev1GzipArray []Servicev1GzipInput

func (Servicev1GzipArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gzip)(nil)).Elem()
}

func (i Servicev1GzipArray) ToServicev1GzipArrayOutput() Servicev1GzipArrayOutput {
	return i.ToServicev1GzipArrayOutputWithContext(context.Background())
}

func (i Servicev1GzipArray) ToServicev1GzipArrayOutputWithContext(ctx context.Context) Servicev1GzipArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1GzipArrayOutput)
}

type Servicev1GzipOutput struct { *pulumi.OutputState }

func (Servicev1GzipOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Gzip)(nil)).Elem()
}

func (o Servicev1GzipOutput) ToServicev1GzipOutput() Servicev1GzipOutput {
	return o
}

func (o Servicev1GzipOutput) ToServicev1GzipOutputWithContext(ctx context.Context) Servicev1GzipOutput {
	return o
}

func (o Servicev1GzipOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Gzip) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1GzipOutput) ContentTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func (v Servicev1Gzip) []string { return v.ContentTypes }).(pulumi.StringArrayOutput)
}

func (o Servicev1GzipOutput) Extensions() pulumi.StringArrayOutput {
	return o.ApplyT(func (v Servicev1Gzip) []string { return v.Extensions }).(pulumi.StringArrayOutput)
}

// The unique name for the Service to create.
func (o Servicev1GzipOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Gzip) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1GzipArrayOutput struct { *pulumi.OutputState}

func (Servicev1GzipArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Gzip)(nil)).Elem()
}

func (o Servicev1GzipArrayOutput) ToServicev1GzipArrayOutput() Servicev1GzipArrayOutput {
	return o
}

func (o Servicev1GzipArrayOutput) ToServicev1GzipArrayOutputWithContext(ctx context.Context) Servicev1GzipArrayOutput {
	return o
}

func (o Servicev1GzipArrayOutput) Index(i pulumi.IntInput) Servicev1GzipOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Gzip {
		return vs[0].([]Servicev1Gzip)[vs[1].(int)]
	}).(Servicev1GzipOutput)
}

type Servicev1Header struct {
	Action string `pulumi:"action"`
	CacheCondition *string `pulumi:"cacheCondition"`
	Destination string `pulumi:"destination"`
	IgnoreIfSet *bool `pulumi:"ignoreIfSet"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Priority *int `pulumi:"priority"`
	Regex *string `pulumi:"regex"`
	RequestCondition *string `pulumi:"requestCondition"`
	ResponseCondition *string `pulumi:"responseCondition"`
	Source *string `pulumi:"source"`
	Substitution *string `pulumi:"substitution"`
	Type string `pulumi:"type"`
}

type Servicev1HeaderInput interface {
	pulumi.Input

	ToServicev1HeaderOutput() Servicev1HeaderOutput
	ToServicev1HeaderOutputWithContext(context.Context) Servicev1HeaderOutput
}

type Servicev1HeaderArgs struct {
	Action pulumi.StringInput `pulumi:"action"`
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	Destination pulumi.StringInput `pulumi:"destination"`
	IgnoreIfSet pulumi.BoolPtrInput `pulumi:"ignoreIfSet"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	Regex pulumi.StringPtrInput `pulumi:"regex"`
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	Source pulumi.StringPtrInput `pulumi:"source"`
	Substitution pulumi.StringPtrInput `pulumi:"substitution"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1HeaderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Header)(nil)).Elem()
}

func (i Servicev1HeaderArgs) ToServicev1HeaderOutput() Servicev1HeaderOutput {
	return i.ToServicev1HeaderOutputWithContext(context.Background())
}

func (i Servicev1HeaderArgs) ToServicev1HeaderOutputWithContext(ctx context.Context) Servicev1HeaderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HeaderOutput)
}

type Servicev1HeaderArrayInput interface {
	pulumi.Input

	ToServicev1HeaderArrayOutput() Servicev1HeaderArrayOutput
	ToServicev1HeaderArrayOutputWithContext(context.Context) Servicev1HeaderArrayOutput
}

type Servicev1HeaderArray []Servicev1HeaderInput

func (Servicev1HeaderArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Header)(nil)).Elem()
}

func (i Servicev1HeaderArray) ToServicev1HeaderArrayOutput() Servicev1HeaderArrayOutput {
	return i.ToServicev1HeaderArrayOutputWithContext(context.Background())
}

func (i Servicev1HeaderArray) ToServicev1HeaderArrayOutputWithContext(ctx context.Context) Servicev1HeaderArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HeaderArrayOutput)
}

type Servicev1HeaderOutput struct { *pulumi.OutputState }

func (Servicev1HeaderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Header)(nil)).Elem()
}

func (o Servicev1HeaderOutput) ToServicev1HeaderOutput() Servicev1HeaderOutput {
	return o
}

func (o Servicev1HeaderOutput) ToServicev1HeaderOutputWithContext(ctx context.Context) Servicev1HeaderOutput {
	return o
}

func (o Servicev1HeaderOutput) Action() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Header) string { return v.Action }).(pulumi.StringOutput)
}

func (o Servicev1HeaderOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Header) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1HeaderOutput) Destination() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Header) string { return v.Destination }).(pulumi.StringOutput)
}

func (o Servicev1HeaderOutput) IgnoreIfSet() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1Header) *bool { return v.IgnoreIfSet }).(pulumi.BoolPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1HeaderOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Header) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1HeaderOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Header) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o Servicev1HeaderOutput) Regex() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Header) *string { return v.Regex }).(pulumi.StringPtrOutput)
}

func (o Servicev1HeaderOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Header) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1HeaderOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Header) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1HeaderOutput) Source() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Header) *string { return v.Source }).(pulumi.StringPtrOutput)
}

func (o Servicev1HeaderOutput) Substitution() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Header) *string { return v.Substitution }).(pulumi.StringPtrOutput)
}

func (o Servicev1HeaderOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Header) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1HeaderArrayOutput struct { *pulumi.OutputState}

func (Servicev1HeaderArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Header)(nil)).Elem()
}

func (o Servicev1HeaderArrayOutput) ToServicev1HeaderArrayOutput() Servicev1HeaderArrayOutput {
	return o
}

func (o Servicev1HeaderArrayOutput) ToServicev1HeaderArrayOutputWithContext(ctx context.Context) Servicev1HeaderArrayOutput {
	return o
}

func (o Servicev1HeaderArrayOutput) Index(i pulumi.IntInput) Servicev1HeaderOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Header {
		return vs[0].([]Servicev1Header)[vs[1].(int)]
	}).(Servicev1HeaderOutput)
}

type Servicev1Healthcheck struct {
	CheckInterval *int `pulumi:"checkInterval"`
	ExpectedResponse *int `pulumi:"expectedResponse"`
	Host string `pulumi:"host"`
	HttpVersion *string `pulumi:"httpVersion"`
	Initial *int `pulumi:"initial"`
	Method *string `pulumi:"method"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Path string `pulumi:"path"`
	Threshold *int `pulumi:"threshold"`
	Timeout *int `pulumi:"timeout"`
	Window *int `pulumi:"window"`
}

type Servicev1HealthcheckInput interface {
	pulumi.Input

	ToServicev1HealthcheckOutput() Servicev1HealthcheckOutput
	ToServicev1HealthcheckOutputWithContext(context.Context) Servicev1HealthcheckOutput
}

type Servicev1HealthcheckArgs struct {
	CheckInterval pulumi.IntPtrInput `pulumi:"checkInterval"`
	ExpectedResponse pulumi.IntPtrInput `pulumi:"expectedResponse"`
	Host pulumi.StringInput `pulumi:"host"`
	HttpVersion pulumi.StringPtrInput `pulumi:"httpVersion"`
	Initial pulumi.IntPtrInput `pulumi:"initial"`
	Method pulumi.StringPtrInput `pulumi:"method"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Path pulumi.StringInput `pulumi:"path"`
	Threshold pulumi.IntPtrInput `pulumi:"threshold"`
	Timeout pulumi.IntPtrInput `pulumi:"timeout"`
	Window pulumi.IntPtrInput `pulumi:"window"`
}

func (Servicev1HealthcheckArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Healthcheck)(nil)).Elem()
}

func (i Servicev1HealthcheckArgs) ToServicev1HealthcheckOutput() Servicev1HealthcheckOutput {
	return i.ToServicev1HealthcheckOutputWithContext(context.Background())
}

func (i Servicev1HealthcheckArgs) ToServicev1HealthcheckOutputWithContext(ctx context.Context) Servicev1HealthcheckOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HealthcheckOutput)
}

type Servicev1HealthcheckArrayInput interface {
	pulumi.Input

	ToServicev1HealthcheckArrayOutput() Servicev1HealthcheckArrayOutput
	ToServicev1HealthcheckArrayOutputWithContext(context.Context) Servicev1HealthcheckArrayOutput
}

type Servicev1HealthcheckArray []Servicev1HealthcheckInput

func (Servicev1HealthcheckArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Healthcheck)(nil)).Elem()
}

func (i Servicev1HealthcheckArray) ToServicev1HealthcheckArrayOutput() Servicev1HealthcheckArrayOutput {
	return i.ToServicev1HealthcheckArrayOutputWithContext(context.Background())
}

func (i Servicev1HealthcheckArray) ToServicev1HealthcheckArrayOutputWithContext(ctx context.Context) Servicev1HealthcheckArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1HealthcheckArrayOutput)
}

type Servicev1HealthcheckOutput struct { *pulumi.OutputState }

func (Servicev1HealthcheckOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Healthcheck)(nil)).Elem()
}

func (o Servicev1HealthcheckOutput) ToServicev1HealthcheckOutput() Servicev1HealthcheckOutput {
	return o
}

func (o Servicev1HealthcheckOutput) ToServicev1HealthcheckOutputWithContext(ctx context.Context) Servicev1HealthcheckOutput {
	return o
}

func (o Servicev1HealthcheckOutput) CheckInterval() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) *int { return v.CheckInterval }).(pulumi.IntPtrOutput)
}

func (o Servicev1HealthcheckOutput) ExpectedResponse() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) *int { return v.ExpectedResponse }).(pulumi.IntPtrOutput)
}

func (o Servicev1HealthcheckOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) string { return v.Host }).(pulumi.StringOutput)
}

func (o Servicev1HealthcheckOutput) HttpVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) *string { return v.HttpVersion }).(pulumi.StringPtrOutput)
}

func (o Servicev1HealthcheckOutput) Initial() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) *int { return v.Initial }).(pulumi.IntPtrOutput)
}

func (o Servicev1HealthcheckOutput) Method() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) *string { return v.Method }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1HealthcheckOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1HealthcheckOutput) Path() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) string { return v.Path }).(pulumi.StringOutput)
}

func (o Servicev1HealthcheckOutput) Threshold() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) *int { return v.Threshold }).(pulumi.IntPtrOutput)
}

func (o Servicev1HealthcheckOutput) Timeout() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) *int { return v.Timeout }).(pulumi.IntPtrOutput)
}

func (o Servicev1HealthcheckOutput) Window() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Healthcheck) *int { return v.Window }).(pulumi.IntPtrOutput)
}

type Servicev1HealthcheckArrayOutput struct { *pulumi.OutputState}

func (Servicev1HealthcheckArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Healthcheck)(nil)).Elem()
}

func (o Servicev1HealthcheckArrayOutput) ToServicev1HealthcheckArrayOutput() Servicev1HealthcheckArrayOutput {
	return o
}

func (o Servicev1HealthcheckArrayOutput) ToServicev1HealthcheckArrayOutputWithContext(ctx context.Context) Servicev1HealthcheckArrayOutput {
	return o
}

func (o Servicev1HealthcheckArrayOutput) Index(i pulumi.IntInput) Servicev1HealthcheckOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Healthcheck {
		return vs[0].([]Servicev1Healthcheck)[vs[1].(int)]
	}).(Servicev1HealthcheckOutput)
}

type Servicev1Logentry struct {
	Format *string `pulumi:"format"`
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Placement *string `pulumi:"placement"`
	Port *int `pulumi:"port"`
	ResponseCondition *string `pulumi:"responseCondition"`
	Token string `pulumi:"token"`
	UseTls *bool `pulumi:"useTls"`
}

type Servicev1LogentryInput interface {
	pulumi.Input

	ToServicev1LogentryOutput() Servicev1LogentryOutput
	ToServicev1LogentryOutputWithContext(context.Context) Servicev1LogentryOutput
}

type Servicev1LogentryArgs struct {
	Format pulumi.StringPtrInput `pulumi:"format"`
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	Port pulumi.IntPtrInput `pulumi:"port"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	Token pulumi.StringInput `pulumi:"token"`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (Servicev1LogentryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Logentry)(nil)).Elem()
}

func (i Servicev1LogentryArgs) ToServicev1LogentryOutput() Servicev1LogentryOutput {
	return i.ToServicev1LogentryOutputWithContext(context.Background())
}

func (i Servicev1LogentryArgs) ToServicev1LogentryOutputWithContext(ctx context.Context) Servicev1LogentryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LogentryOutput)
}

type Servicev1LogentryArrayInput interface {
	pulumi.Input

	ToServicev1LogentryArrayOutput() Servicev1LogentryArrayOutput
	ToServicev1LogentryArrayOutputWithContext(context.Context) Servicev1LogentryArrayOutput
}

type Servicev1LogentryArray []Servicev1LogentryInput

func (Servicev1LogentryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Logentry)(nil)).Elem()
}

func (i Servicev1LogentryArray) ToServicev1LogentryArrayOutput() Servicev1LogentryArrayOutput {
	return i.ToServicev1LogentryArrayOutputWithContext(context.Background())
}

func (i Servicev1LogentryArray) ToServicev1LogentryArrayOutputWithContext(ctx context.Context) Servicev1LogentryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1LogentryArrayOutput)
}

type Servicev1LogentryOutput struct { *pulumi.OutputState }

func (Servicev1LogentryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Logentry)(nil)).Elem()
}

func (o Servicev1LogentryOutput) ToServicev1LogentryOutput() Servicev1LogentryOutput {
	return o
}

func (o Servicev1LogentryOutput) ToServicev1LogentryOutputWithContext(ctx context.Context) Servicev1LogentryOutput {
	return o
}

func (o Servicev1LogentryOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Logentry) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o Servicev1LogentryOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Logentry) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1LogentryOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Logentry) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1LogentryOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Logentry) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1LogentryOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Logentry) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o Servicev1LogentryOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Logentry) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1LogentryOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Logentry) string { return v.Token }).(pulumi.StringOutput)
}

func (o Servicev1LogentryOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1Logentry) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type Servicev1LogentryArrayOutput struct { *pulumi.OutputState}

func (Servicev1LogentryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Logentry)(nil)).Elem()
}

func (o Servicev1LogentryArrayOutput) ToServicev1LogentryArrayOutput() Servicev1LogentryArrayOutput {
	return o
}

func (o Servicev1LogentryArrayOutput) ToServicev1LogentryArrayOutputWithContext(ctx context.Context) Servicev1LogentryArrayOutput {
	return o
}

func (o Servicev1LogentryArrayOutput) Index(i pulumi.IntInput) Servicev1LogentryOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Logentry {
		return vs[0].([]Servicev1Logentry)[vs[1].(int)]
	}).(Servicev1LogentryOutput)
}

type Servicev1Papertrail struct {
	Address string `pulumi:"address"`
	Format *string `pulumi:"format"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Placement *string `pulumi:"placement"`
	Port int `pulumi:"port"`
	ResponseCondition *string `pulumi:"responseCondition"`
}

type Servicev1PapertrailInput interface {
	pulumi.Input

	ToServicev1PapertrailOutput() Servicev1PapertrailOutput
	ToServicev1PapertrailOutputWithContext(context.Context) Servicev1PapertrailOutput
}

type Servicev1PapertrailArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	Format pulumi.StringPtrInput `pulumi:"format"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	Port pulumi.IntInput `pulumi:"port"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
}

func (Servicev1PapertrailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Papertrail)(nil)).Elem()
}

func (i Servicev1PapertrailArgs) ToServicev1PapertrailOutput() Servicev1PapertrailOutput {
	return i.ToServicev1PapertrailOutputWithContext(context.Background())
}

func (i Servicev1PapertrailArgs) ToServicev1PapertrailOutputWithContext(ctx context.Context) Servicev1PapertrailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PapertrailOutput)
}

type Servicev1PapertrailArrayInput interface {
	pulumi.Input

	ToServicev1PapertrailArrayOutput() Servicev1PapertrailArrayOutput
	ToServicev1PapertrailArrayOutputWithContext(context.Context) Servicev1PapertrailArrayOutput
}

type Servicev1PapertrailArray []Servicev1PapertrailInput

func (Servicev1PapertrailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Papertrail)(nil)).Elem()
}

func (i Servicev1PapertrailArray) ToServicev1PapertrailArrayOutput() Servicev1PapertrailArrayOutput {
	return i.ToServicev1PapertrailArrayOutputWithContext(context.Background())
}

func (i Servicev1PapertrailArray) ToServicev1PapertrailArrayOutputWithContext(ctx context.Context) Servicev1PapertrailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1PapertrailArrayOutput)
}

type Servicev1PapertrailOutput struct { *pulumi.OutputState }

func (Servicev1PapertrailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Papertrail)(nil)).Elem()
}

func (o Servicev1PapertrailOutput) ToServicev1PapertrailOutput() Servicev1PapertrailOutput {
	return o
}

func (o Servicev1PapertrailOutput) ToServicev1PapertrailOutputWithContext(ctx context.Context) Servicev1PapertrailOutput {
	return o
}

func (o Servicev1PapertrailOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Papertrail) string { return v.Address }).(pulumi.StringOutput)
}

func (o Servicev1PapertrailOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Papertrail) *string { return v.Format }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1PapertrailOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Papertrail) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1PapertrailOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Papertrail) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1PapertrailOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func (v Servicev1Papertrail) int { return v.Port }).(pulumi.IntOutput)
}

func (o Servicev1PapertrailOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Papertrail) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

type Servicev1PapertrailArrayOutput struct { *pulumi.OutputState}

func (Servicev1PapertrailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Papertrail)(nil)).Elem()
}

func (o Servicev1PapertrailArrayOutput) ToServicev1PapertrailArrayOutput() Servicev1PapertrailArrayOutput {
	return o
}

func (o Servicev1PapertrailArrayOutput) ToServicev1PapertrailArrayOutputWithContext(ctx context.Context) Servicev1PapertrailArrayOutput {
	return o
}

func (o Servicev1PapertrailArrayOutput) Index(i pulumi.IntInput) Servicev1PapertrailOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Papertrail {
		return vs[0].([]Servicev1Papertrail)[vs[1].(int)]
	}).(Servicev1PapertrailOutput)
}

type Servicev1RequestSetting struct {
	Action *string `pulumi:"action"`
	BypassBusyWait *bool `pulumi:"bypassBusyWait"`
	// The default hostname.
	DefaultHost *string `pulumi:"defaultHost"`
	ForceMiss *bool `pulumi:"forceMiss"`
	ForceSsl *bool `pulumi:"forceSsl"`
	GeoHeaders *bool `pulumi:"geoHeaders"`
	HashKeys *string `pulumi:"hashKeys"`
	MaxStaleAge *int `pulumi:"maxStaleAge"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	RequestCondition *string `pulumi:"requestCondition"`
	TimerSupport *bool `pulumi:"timerSupport"`
	Xff *string `pulumi:"xff"`
}

type Servicev1RequestSettingInput interface {
	pulumi.Input

	ToServicev1RequestSettingOutput() Servicev1RequestSettingOutput
	ToServicev1RequestSettingOutputWithContext(context.Context) Servicev1RequestSettingOutput
}

type Servicev1RequestSettingArgs struct {
	Action pulumi.StringPtrInput `pulumi:"action"`
	BypassBusyWait pulumi.BoolPtrInput `pulumi:"bypassBusyWait"`
	// The default hostname.
	DefaultHost pulumi.StringPtrInput `pulumi:"defaultHost"`
	ForceMiss pulumi.BoolPtrInput `pulumi:"forceMiss"`
	ForceSsl pulumi.BoolPtrInput `pulumi:"forceSsl"`
	GeoHeaders pulumi.BoolPtrInput `pulumi:"geoHeaders"`
	HashKeys pulumi.StringPtrInput `pulumi:"hashKeys"`
	MaxStaleAge pulumi.IntPtrInput `pulumi:"maxStaleAge"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	TimerSupport pulumi.BoolPtrInput `pulumi:"timerSupport"`
	Xff pulumi.StringPtrInput `pulumi:"xff"`
}

func (Servicev1RequestSettingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1RequestSetting)(nil)).Elem()
}

func (i Servicev1RequestSettingArgs) ToServicev1RequestSettingOutput() Servicev1RequestSettingOutput {
	return i.ToServicev1RequestSettingOutputWithContext(context.Background())
}

func (i Servicev1RequestSettingArgs) ToServicev1RequestSettingOutputWithContext(ctx context.Context) Servicev1RequestSettingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1RequestSettingOutput)
}

type Servicev1RequestSettingArrayInput interface {
	pulumi.Input

	ToServicev1RequestSettingArrayOutput() Servicev1RequestSettingArrayOutput
	ToServicev1RequestSettingArrayOutputWithContext(context.Context) Servicev1RequestSettingArrayOutput
}

type Servicev1RequestSettingArray []Servicev1RequestSettingInput

func (Servicev1RequestSettingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1RequestSetting)(nil)).Elem()
}

func (i Servicev1RequestSettingArray) ToServicev1RequestSettingArrayOutput() Servicev1RequestSettingArrayOutput {
	return i.ToServicev1RequestSettingArrayOutputWithContext(context.Background())
}

func (i Servicev1RequestSettingArray) ToServicev1RequestSettingArrayOutputWithContext(ctx context.Context) Servicev1RequestSettingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1RequestSettingArrayOutput)
}

type Servicev1RequestSettingOutput struct { *pulumi.OutputState }

func (Servicev1RequestSettingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1RequestSetting)(nil)).Elem()
}

func (o Servicev1RequestSettingOutput) ToServicev1RequestSettingOutput() Servicev1RequestSettingOutput {
	return o
}

func (o Servicev1RequestSettingOutput) ToServicev1RequestSettingOutputWithContext(ctx context.Context) Servicev1RequestSettingOutput {
	return o
}

func (o Servicev1RequestSettingOutput) Action() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *string { return v.Action }).(pulumi.StringPtrOutput)
}

func (o Servicev1RequestSettingOutput) BypassBusyWait() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *bool { return v.BypassBusyWait }).(pulumi.BoolPtrOutput)
}

// The default hostname.
func (o Servicev1RequestSettingOutput) DefaultHost() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *string { return v.DefaultHost }).(pulumi.StringPtrOutput)
}

func (o Servicev1RequestSettingOutput) ForceMiss() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *bool { return v.ForceMiss }).(pulumi.BoolPtrOutput)
}

func (o Servicev1RequestSettingOutput) ForceSsl() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *bool { return v.ForceSsl }).(pulumi.BoolPtrOutput)
}

func (o Servicev1RequestSettingOutput) GeoHeaders() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *bool { return v.GeoHeaders }).(pulumi.BoolPtrOutput)
}

func (o Servicev1RequestSettingOutput) HashKeys() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *string { return v.HashKeys }).(pulumi.StringPtrOutput)
}

func (o Servicev1RequestSettingOutput) MaxStaleAge() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *int { return v.MaxStaleAge }).(pulumi.IntPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1RequestSettingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1RequestSettingOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1RequestSettingOutput) TimerSupport() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *bool { return v.TimerSupport }).(pulumi.BoolPtrOutput)
}

func (o Servicev1RequestSettingOutput) Xff() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1RequestSetting) *string { return v.Xff }).(pulumi.StringPtrOutput)
}

type Servicev1RequestSettingArrayOutput struct { *pulumi.OutputState}

func (Servicev1RequestSettingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1RequestSetting)(nil)).Elem()
}

func (o Servicev1RequestSettingArrayOutput) ToServicev1RequestSettingArrayOutput() Servicev1RequestSettingArrayOutput {
	return o
}

func (o Servicev1RequestSettingArrayOutput) ToServicev1RequestSettingArrayOutputWithContext(ctx context.Context) Servicev1RequestSettingArrayOutput {
	return o
}

func (o Servicev1RequestSettingArrayOutput) Index(i pulumi.IntInput) Servicev1RequestSettingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1RequestSetting {
		return vs[0].([]Servicev1RequestSetting)[vs[1].(int)]
	}).(Servicev1RequestSettingOutput)
}

type Servicev1ResponseObject struct {
	CacheCondition *string `pulumi:"cacheCondition"`
	Content *string `pulumi:"content"`
	ContentType *string `pulumi:"contentType"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	RequestCondition *string `pulumi:"requestCondition"`
	Response *string `pulumi:"response"`
	Status *int `pulumi:"status"`
}

type Servicev1ResponseObjectInput interface {
	pulumi.Input

	ToServicev1ResponseObjectOutput() Servicev1ResponseObjectOutput
	ToServicev1ResponseObjectOutputWithContext(context.Context) Servicev1ResponseObjectOutput
}

type Servicev1ResponseObjectArgs struct {
	CacheCondition pulumi.StringPtrInput `pulumi:"cacheCondition"`
	Content pulumi.StringPtrInput `pulumi:"content"`
	ContentType pulumi.StringPtrInput `pulumi:"contentType"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	RequestCondition pulumi.StringPtrInput `pulumi:"requestCondition"`
	Response pulumi.StringPtrInput `pulumi:"response"`
	Status pulumi.IntPtrInput `pulumi:"status"`
}

func (Servicev1ResponseObjectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1ResponseObject)(nil)).Elem()
}

func (i Servicev1ResponseObjectArgs) ToServicev1ResponseObjectOutput() Servicev1ResponseObjectOutput {
	return i.ToServicev1ResponseObjectOutputWithContext(context.Background())
}

func (i Servicev1ResponseObjectArgs) ToServicev1ResponseObjectOutputWithContext(ctx context.Context) Servicev1ResponseObjectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ResponseObjectOutput)
}

type Servicev1ResponseObjectArrayInput interface {
	pulumi.Input

	ToServicev1ResponseObjectArrayOutput() Servicev1ResponseObjectArrayOutput
	ToServicev1ResponseObjectArrayOutputWithContext(context.Context) Servicev1ResponseObjectArrayOutput
}

type Servicev1ResponseObjectArray []Servicev1ResponseObjectInput

func (Servicev1ResponseObjectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1ResponseObject)(nil)).Elem()
}

func (i Servicev1ResponseObjectArray) ToServicev1ResponseObjectArrayOutput() Servicev1ResponseObjectArrayOutput {
	return i.ToServicev1ResponseObjectArrayOutputWithContext(context.Background())
}

func (i Servicev1ResponseObjectArray) ToServicev1ResponseObjectArrayOutputWithContext(ctx context.Context) Servicev1ResponseObjectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1ResponseObjectArrayOutput)
}

type Servicev1ResponseObjectOutput struct { *pulumi.OutputState }

func (Servicev1ResponseObjectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1ResponseObject)(nil)).Elem()
}

func (o Servicev1ResponseObjectOutput) ToServicev1ResponseObjectOutput() Servicev1ResponseObjectOutput {
	return o
}

func (o Servicev1ResponseObjectOutput) ToServicev1ResponseObjectOutputWithContext(ctx context.Context) Servicev1ResponseObjectOutput {
	return o
}

func (o Servicev1ResponseObjectOutput) CacheCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1ResponseObject) *string { return v.CacheCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1ResponseObjectOutput) Content() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1ResponseObject) *string { return v.Content }).(pulumi.StringPtrOutput)
}

func (o Servicev1ResponseObjectOutput) ContentType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1ResponseObject) *string { return v.ContentType }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1ResponseObjectOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1ResponseObject) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1ResponseObjectOutput) RequestCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1ResponseObject) *string { return v.RequestCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1ResponseObjectOutput) Response() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1ResponseObject) *string { return v.Response }).(pulumi.StringPtrOutput)
}

func (o Servicev1ResponseObjectOutput) Status() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1ResponseObject) *int { return v.Status }).(pulumi.IntPtrOutput)
}

type Servicev1ResponseObjectArrayOutput struct { *pulumi.OutputState}

func (Servicev1ResponseObjectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1ResponseObject)(nil)).Elem()
}

func (o Servicev1ResponseObjectArrayOutput) ToServicev1ResponseObjectArrayOutput() Servicev1ResponseObjectArrayOutput {
	return o
}

func (o Servicev1ResponseObjectArrayOutput) ToServicev1ResponseObjectArrayOutputWithContext(ctx context.Context) Servicev1ResponseObjectArrayOutput {
	return o
}

func (o Servicev1ResponseObjectArrayOutput) Index(i pulumi.IntInput) Servicev1ResponseObjectOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1ResponseObject {
		return vs[0].([]Servicev1ResponseObject)[vs[1].(int)]
	}).(Servicev1ResponseObjectOutput)
}

type Servicev1S3logging struct {
	BucketName string `pulumi:"bucketName"`
	// A set of Domain names to serve as entry points for your
	// Service. Defined below.
	Domain *string `pulumi:"domain"`
	Format *string `pulumi:"format"`
	FormatVersion *int `pulumi:"formatVersion"`
	GzipLevel *int `pulumi:"gzipLevel"`
	MessageType *string `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Path *string `pulumi:"path"`
	Period *int `pulumi:"period"`
	Placement *string `pulumi:"placement"`
	Redundancy *string `pulumi:"redundancy"`
	ResponseCondition *string `pulumi:"responseCondition"`
	S3AccessKey *string `pulumi:"s3AccessKey"`
	S3SecretKey *string `pulumi:"s3SecretKey"`
	TimestampFormat *string `pulumi:"timestampFormat"`
}

type Servicev1S3loggingInput interface {
	pulumi.Input

	ToServicev1S3loggingOutput() Servicev1S3loggingOutput
	ToServicev1S3loggingOutputWithContext(context.Context) Servicev1S3loggingOutput
}

type Servicev1S3loggingArgs struct {
	BucketName pulumi.StringInput `pulumi:"bucketName"`
	// A set of Domain names to serve as entry points for your
	// Service. Defined below.
	Domain pulumi.StringPtrInput `pulumi:"domain"`
	Format pulumi.StringPtrInput `pulumi:"format"`
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	GzipLevel pulumi.IntPtrInput `pulumi:"gzipLevel"`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Path pulumi.StringPtrInput `pulumi:"path"`
	Period pulumi.IntPtrInput `pulumi:"period"`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	Redundancy pulumi.StringPtrInput `pulumi:"redundancy"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	S3AccessKey pulumi.StringPtrInput `pulumi:"s3AccessKey"`
	S3SecretKey pulumi.StringPtrInput `pulumi:"s3SecretKey"`
	TimestampFormat pulumi.StringPtrInput `pulumi:"timestampFormat"`
}

func (Servicev1S3loggingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1S3logging)(nil)).Elem()
}

func (i Servicev1S3loggingArgs) ToServicev1S3loggingOutput() Servicev1S3loggingOutput {
	return i.ToServicev1S3loggingOutputWithContext(context.Background())
}

func (i Servicev1S3loggingArgs) ToServicev1S3loggingOutputWithContext(ctx context.Context) Servicev1S3loggingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1S3loggingOutput)
}

type Servicev1S3loggingArrayInput interface {
	pulumi.Input

	ToServicev1S3loggingArrayOutput() Servicev1S3loggingArrayOutput
	ToServicev1S3loggingArrayOutputWithContext(context.Context) Servicev1S3loggingArrayOutput
}

type Servicev1S3loggingArray []Servicev1S3loggingInput

func (Servicev1S3loggingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1S3logging)(nil)).Elem()
}

func (i Servicev1S3loggingArray) ToServicev1S3loggingArrayOutput() Servicev1S3loggingArrayOutput {
	return i.ToServicev1S3loggingArrayOutputWithContext(context.Background())
}

func (i Servicev1S3loggingArray) ToServicev1S3loggingArrayOutputWithContext(ctx context.Context) Servicev1S3loggingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1S3loggingArrayOutput)
}

type Servicev1S3loggingOutput struct { *pulumi.OutputState }

func (Servicev1S3loggingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1S3logging)(nil)).Elem()
}

func (o Servicev1S3loggingOutput) ToServicev1S3loggingOutput() Servicev1S3loggingOutput {
	return o
}

func (o Servicev1S3loggingOutput) ToServicev1S3loggingOutputWithContext(ctx context.Context) Servicev1S3loggingOutput {
	return o
}

func (o Servicev1S3loggingOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1S3logging) string { return v.BucketName }).(pulumi.StringOutput)
}

// A set of Domain names to serve as entry points for your
// Service. Defined below.
func (o Servicev1S3loggingOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

func (o Servicev1S3loggingOutput) GzipLevel() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *int { return v.GzipLevel }).(pulumi.IntPtrOutput)
}

func (o Servicev1S3loggingOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1S3loggingOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1S3logging) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1S3loggingOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) Period() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *int { return v.Period }).(pulumi.IntPtrOutput)
}

func (o Servicev1S3loggingOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) Redundancy() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.Redundancy }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) S3AccessKey() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.S3AccessKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) S3SecretKey() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.S3SecretKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1S3loggingOutput) TimestampFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1S3logging) *string { return v.TimestampFormat }).(pulumi.StringPtrOutput)
}

type Servicev1S3loggingArrayOutput struct { *pulumi.OutputState}

func (Servicev1S3loggingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1S3logging)(nil)).Elem()
}

func (o Servicev1S3loggingArrayOutput) ToServicev1S3loggingArrayOutput() Servicev1S3loggingArrayOutput {
	return o
}

func (o Servicev1S3loggingArrayOutput) ToServicev1S3loggingArrayOutputWithContext(ctx context.Context) Servicev1S3loggingArrayOutput {
	return o
}

func (o Servicev1S3loggingArrayOutput) Index(i pulumi.IntInput) Servicev1S3loggingOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1S3logging {
		return vs[0].([]Servicev1S3logging)[vs[1].(int)]
	}).(Servicev1S3loggingOutput)
}

type Servicev1Snippet struct {
	Content string `pulumi:"content"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Priority *int `pulumi:"priority"`
	Type string `pulumi:"type"`
}

type Servicev1SnippetInput interface {
	pulumi.Input

	ToServicev1SnippetOutput() Servicev1SnippetOutput
	ToServicev1SnippetOutputWithContext(context.Context) Servicev1SnippetOutput
}

type Servicev1SnippetArgs struct {
	Content pulumi.StringInput `pulumi:"content"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Priority pulumi.IntPtrInput `pulumi:"priority"`
	Type pulumi.StringInput `pulumi:"type"`
}

func (Servicev1SnippetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Snippet)(nil)).Elem()
}

func (i Servicev1SnippetArgs) ToServicev1SnippetOutput() Servicev1SnippetOutput {
	return i.ToServicev1SnippetOutputWithContext(context.Background())
}

func (i Servicev1SnippetArgs) ToServicev1SnippetOutputWithContext(ctx context.Context) Servicev1SnippetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SnippetOutput)
}

type Servicev1SnippetArrayInput interface {
	pulumi.Input

	ToServicev1SnippetArrayOutput() Servicev1SnippetArrayOutput
	ToServicev1SnippetArrayOutputWithContext(context.Context) Servicev1SnippetArrayOutput
}

type Servicev1SnippetArray []Servicev1SnippetInput

func (Servicev1SnippetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Snippet)(nil)).Elem()
}

func (i Servicev1SnippetArray) ToServicev1SnippetArrayOutput() Servicev1SnippetArrayOutput {
	return i.ToServicev1SnippetArrayOutputWithContext(context.Background())
}

func (i Servicev1SnippetArray) ToServicev1SnippetArrayOutputWithContext(ctx context.Context) Servicev1SnippetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SnippetArrayOutput)
}

type Servicev1SnippetOutput struct { *pulumi.OutputState }

func (Servicev1SnippetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Snippet)(nil)).Elem()
}

func (o Servicev1SnippetOutput) ToServicev1SnippetOutput() Servicev1SnippetOutput {
	return o
}

func (o Servicev1SnippetOutput) ToServicev1SnippetOutputWithContext(ctx context.Context) Servicev1SnippetOutput {
	return o
}

func (o Servicev1SnippetOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Snippet) string { return v.Content }).(pulumi.StringOutput)
}

// The unique name for the Service to create.
func (o Servicev1SnippetOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Snippet) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1SnippetOutput) Priority() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Snippet) *int { return v.Priority }).(pulumi.IntPtrOutput)
}

func (o Servicev1SnippetOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Snippet) string { return v.Type }).(pulumi.StringOutput)
}

type Servicev1SnippetArrayOutput struct { *pulumi.OutputState}

func (Servicev1SnippetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Snippet)(nil)).Elem()
}

func (o Servicev1SnippetArrayOutput) ToServicev1SnippetArrayOutput() Servicev1SnippetArrayOutput {
	return o
}

func (o Servicev1SnippetArrayOutput) ToServicev1SnippetArrayOutputWithContext(ctx context.Context) Servicev1SnippetArrayOutput {
	return o
}

func (o Servicev1SnippetArrayOutput) Index(i pulumi.IntInput) Servicev1SnippetOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Snippet {
		return vs[0].([]Servicev1Snippet)[vs[1].(int)]
	}).(Servicev1SnippetOutput)
}

type Servicev1Splunk struct {
	Format *string `pulumi:"format"`
	FormatVersion *int `pulumi:"formatVersion"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Placement *string `pulumi:"placement"`
	ResponseCondition *string `pulumi:"responseCondition"`
	Token string `pulumi:"token"`
	Url string `pulumi:"url"`
}

type Servicev1SplunkInput interface {
	pulumi.Input

	ToServicev1SplunkOutput() Servicev1SplunkOutput
	ToServicev1SplunkOutputWithContext(context.Context) Servicev1SplunkOutput
}

type Servicev1SplunkArgs struct {
	Format pulumi.StringPtrInput `pulumi:"format"`
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	Token pulumi.StringInput `pulumi:"token"`
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1SplunkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Splunk)(nil)).Elem()
}

func (i Servicev1SplunkArgs) ToServicev1SplunkOutput() Servicev1SplunkOutput {
	return i.ToServicev1SplunkOutputWithContext(context.Background())
}

func (i Servicev1SplunkArgs) ToServicev1SplunkOutputWithContext(ctx context.Context) Servicev1SplunkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SplunkOutput)
}

type Servicev1SplunkArrayInput interface {
	pulumi.Input

	ToServicev1SplunkArrayOutput() Servicev1SplunkArrayOutput
	ToServicev1SplunkArrayOutputWithContext(context.Context) Servicev1SplunkArrayOutput
}

type Servicev1SplunkArray []Servicev1SplunkInput

func (Servicev1SplunkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Splunk)(nil)).Elem()
}

func (i Servicev1SplunkArray) ToServicev1SplunkArrayOutput() Servicev1SplunkArrayOutput {
	return i.ToServicev1SplunkArrayOutputWithContext(context.Background())
}

func (i Servicev1SplunkArray) ToServicev1SplunkArrayOutputWithContext(ctx context.Context) Servicev1SplunkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SplunkArrayOutput)
}

type Servicev1SplunkOutput struct { *pulumi.OutputState }

func (Servicev1SplunkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Splunk)(nil)).Elem()
}

func (o Servicev1SplunkOutput) ToServicev1SplunkOutput() Servicev1SplunkOutput {
	return o
}

func (o Servicev1SplunkOutput) ToServicev1SplunkOutputWithContext(ctx context.Context) Servicev1SplunkOutput {
	return o
}

func (o Servicev1SplunkOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Splunk) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o Servicev1SplunkOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Splunk) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1SplunkOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Splunk) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1SplunkOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Splunk) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1SplunkOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Splunk) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1SplunkOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Splunk) string { return v.Token }).(pulumi.StringOutput)
}

func (o Servicev1SplunkOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Splunk) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1SplunkArrayOutput struct { *pulumi.OutputState}

func (Servicev1SplunkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Splunk)(nil)).Elem()
}

func (o Servicev1SplunkArrayOutput) ToServicev1SplunkArrayOutput() Servicev1SplunkArrayOutput {
	return o
}

func (o Servicev1SplunkArrayOutput) ToServicev1SplunkArrayOutputWithContext(ctx context.Context) Servicev1SplunkArrayOutput {
	return o
}

func (o Servicev1SplunkArrayOutput) Index(i pulumi.IntInput) Servicev1SplunkOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Splunk {
		return vs[0].([]Servicev1Splunk)[vs[1].(int)]
	}).(Servicev1SplunkOutput)
}

type Servicev1Sumologic struct {
	Format *string `pulumi:"format"`
	FormatVersion *int `pulumi:"formatVersion"`
	MessageType *string `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Placement *string `pulumi:"placement"`
	ResponseCondition *string `pulumi:"responseCondition"`
	Url string `pulumi:"url"`
}

type Servicev1SumologicInput interface {
	pulumi.Input

	ToServicev1SumologicOutput() Servicev1SumologicOutput
	ToServicev1SumologicOutputWithContext(context.Context) Servicev1SumologicOutput
}

type Servicev1SumologicArgs struct {
	Format pulumi.StringPtrInput `pulumi:"format"`
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	Url pulumi.StringInput `pulumi:"url"`
}

func (Servicev1SumologicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Sumologic)(nil)).Elem()
}

func (i Servicev1SumologicArgs) ToServicev1SumologicOutput() Servicev1SumologicOutput {
	return i.ToServicev1SumologicOutputWithContext(context.Background())
}

func (i Servicev1SumologicArgs) ToServicev1SumologicOutputWithContext(ctx context.Context) Servicev1SumologicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SumologicOutput)
}

type Servicev1SumologicArrayInput interface {
	pulumi.Input

	ToServicev1SumologicArrayOutput() Servicev1SumologicArrayOutput
	ToServicev1SumologicArrayOutputWithContext(context.Context) Servicev1SumologicArrayOutput
}

type Servicev1SumologicArray []Servicev1SumologicInput

func (Servicev1SumologicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Sumologic)(nil)).Elem()
}

func (i Servicev1SumologicArray) ToServicev1SumologicArrayOutput() Servicev1SumologicArrayOutput {
	return i.ToServicev1SumologicArrayOutputWithContext(context.Background())
}

func (i Servicev1SumologicArray) ToServicev1SumologicArrayOutputWithContext(ctx context.Context) Servicev1SumologicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SumologicArrayOutput)
}

type Servicev1SumologicOutput struct { *pulumi.OutputState }

func (Servicev1SumologicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Sumologic)(nil)).Elem()
}

func (o Servicev1SumologicOutput) ToServicev1SumologicOutput() Servicev1SumologicOutput {
	return o
}

func (o Servicev1SumologicOutput) ToServicev1SumologicOutputWithContext(ctx context.Context) Servicev1SumologicOutput {
	return o
}

func (o Servicev1SumologicOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Sumologic) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o Servicev1SumologicOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Sumologic) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

func (o Servicev1SumologicOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Sumologic) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1SumologicOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Sumologic) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1SumologicOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Sumologic) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1SumologicOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Sumologic) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1SumologicOutput) Url() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Sumologic) string { return v.Url }).(pulumi.StringOutput)
}

type Servicev1SumologicArrayOutput struct { *pulumi.OutputState}

func (Servicev1SumologicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Sumologic)(nil)).Elem()
}

func (o Servicev1SumologicArrayOutput) ToServicev1SumologicArrayOutput() Servicev1SumologicArrayOutput {
	return o
}

func (o Servicev1SumologicArrayOutput) ToServicev1SumologicArrayOutputWithContext(ctx context.Context) Servicev1SumologicArrayOutput {
	return o
}

func (o Servicev1SumologicArrayOutput) Index(i pulumi.IntInput) Servicev1SumologicOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Sumologic {
		return vs[0].([]Servicev1Sumologic)[vs[1].(int)]
	}).(Servicev1SumologicOutput)
}

type Servicev1Syslog struct {
	Address string `pulumi:"address"`
	Format *string `pulumi:"format"`
	FormatVersion *int `pulumi:"formatVersion"`
	MessageType *string `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
	Placement *string `pulumi:"placement"`
	Port *int `pulumi:"port"`
	ResponseCondition *string `pulumi:"responseCondition"`
	TlsCaCert *string `pulumi:"tlsCaCert"`
	TlsClientCert *string `pulumi:"tlsClientCert"`
	TlsClientKey *string `pulumi:"tlsClientKey"`
	TlsHostname *string `pulumi:"tlsHostname"`
	Token *string `pulumi:"token"`
	UseTls *bool `pulumi:"useTls"`
}

type Servicev1SyslogInput interface {
	pulumi.Input

	ToServicev1SyslogOutput() Servicev1SyslogOutput
	ToServicev1SyslogOutputWithContext(context.Context) Servicev1SyslogOutput
}

type Servicev1SyslogArgs struct {
	Address pulumi.StringInput `pulumi:"address"`
	Format pulumi.StringPtrInput `pulumi:"format"`
	FormatVersion pulumi.IntPtrInput `pulumi:"formatVersion"`
	MessageType pulumi.StringPtrInput `pulumi:"messageType"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
	Placement pulumi.StringPtrInput `pulumi:"placement"`
	Port pulumi.IntPtrInput `pulumi:"port"`
	ResponseCondition pulumi.StringPtrInput `pulumi:"responseCondition"`
	TlsCaCert pulumi.StringPtrInput `pulumi:"tlsCaCert"`
	TlsClientCert pulumi.StringPtrInput `pulumi:"tlsClientCert"`
	TlsClientKey pulumi.StringPtrInput `pulumi:"tlsClientKey"`
	TlsHostname pulumi.StringPtrInput `pulumi:"tlsHostname"`
	Token pulumi.StringPtrInput `pulumi:"token"`
	UseTls pulumi.BoolPtrInput `pulumi:"useTls"`
}

func (Servicev1SyslogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Syslog)(nil)).Elem()
}

func (i Servicev1SyslogArgs) ToServicev1SyslogOutput() Servicev1SyslogOutput {
	return i.ToServicev1SyslogOutputWithContext(context.Background())
}

func (i Servicev1SyslogArgs) ToServicev1SyslogOutputWithContext(ctx context.Context) Servicev1SyslogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SyslogOutput)
}

type Servicev1SyslogArrayInput interface {
	pulumi.Input

	ToServicev1SyslogArrayOutput() Servicev1SyslogArrayOutput
	ToServicev1SyslogArrayOutputWithContext(context.Context) Servicev1SyslogArrayOutput
}

type Servicev1SyslogArray []Servicev1SyslogInput

func (Servicev1SyslogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Syslog)(nil)).Elem()
}

func (i Servicev1SyslogArray) ToServicev1SyslogArrayOutput() Servicev1SyslogArrayOutput {
	return i.ToServicev1SyslogArrayOutputWithContext(context.Background())
}

func (i Servicev1SyslogArray) ToServicev1SyslogArrayOutputWithContext(ctx context.Context) Servicev1SyslogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1SyslogArrayOutput)
}

type Servicev1SyslogOutput struct { *pulumi.OutputState }

func (Servicev1SyslogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Syslog)(nil)).Elem()
}

func (o Servicev1SyslogOutput) ToServicev1SyslogOutput() Servicev1SyslogOutput {
	return o
}

func (o Servicev1SyslogOutput) ToServicev1SyslogOutputWithContext(ctx context.Context) Servicev1SyslogOutput {
	return o
}

func (o Servicev1SyslogOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Syslog) string { return v.Address }).(pulumi.StringOutput)
}

func (o Servicev1SyslogOutput) Format() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *string { return v.Format }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) FormatVersion() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *int { return v.FormatVersion }).(pulumi.IntPtrOutput)
}

func (o Servicev1SyslogOutput) MessageType() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *string { return v.MessageType }).(pulumi.StringPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1SyslogOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Syslog) string { return v.Name }).(pulumi.StringOutput)
}

func (o Servicev1SyslogOutput) Placement() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *string { return v.Placement }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *int { return v.Port }).(pulumi.IntPtrOutput)
}

func (o Servicev1SyslogOutput) ResponseCondition() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *string { return v.ResponseCondition }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) TlsCaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *string { return v.TlsCaCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) TlsClientCert() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *string { return v.TlsClientCert }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) TlsClientKey() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *string { return v.TlsClientKey }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) TlsHostname() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *string { return v.TlsHostname }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) Token() pulumi.StringPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *string { return v.Token }).(pulumi.StringPtrOutput)
}

func (o Servicev1SyslogOutput) UseTls() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1Syslog) *bool { return v.UseTls }).(pulumi.BoolPtrOutput)
}

type Servicev1SyslogArrayOutput struct { *pulumi.OutputState}

func (Servicev1SyslogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Syslog)(nil)).Elem()
}

func (o Servicev1SyslogArrayOutput) ToServicev1SyslogArrayOutput() Servicev1SyslogArrayOutput {
	return o
}

func (o Servicev1SyslogArrayOutput) ToServicev1SyslogArrayOutputWithContext(ctx context.Context) Servicev1SyslogArrayOutput {
	return o
}

func (o Servicev1SyslogArrayOutput) Index(i pulumi.IntInput) Servicev1SyslogOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Syslog {
		return vs[0].([]Servicev1Syslog)[vs[1].(int)]
	}).(Servicev1SyslogOutput)
}

type Servicev1Vcl struct {
	Content string `pulumi:"content"`
	Main *bool `pulumi:"main"`
	// The unique name for the Service to create.
	Name string `pulumi:"name"`
}

type Servicev1VclInput interface {
	pulumi.Input

	ToServicev1VclOutput() Servicev1VclOutput
	ToServicev1VclOutputWithContext(context.Context) Servicev1VclOutput
}

type Servicev1VclArgs struct {
	Content pulumi.StringInput `pulumi:"content"`
	Main pulumi.BoolPtrInput `pulumi:"main"`
	// The unique name for the Service to create.
	Name pulumi.StringInput `pulumi:"name"`
}

func (Servicev1VclArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Vcl)(nil)).Elem()
}

func (i Servicev1VclArgs) ToServicev1VclOutput() Servicev1VclOutput {
	return i.ToServicev1VclOutputWithContext(context.Background())
}

func (i Servicev1VclArgs) ToServicev1VclOutputWithContext(ctx context.Context) Servicev1VclOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1VclOutput)
}

type Servicev1VclArrayInput interface {
	pulumi.Input

	ToServicev1VclArrayOutput() Servicev1VclArrayOutput
	ToServicev1VclArrayOutputWithContext(context.Context) Servicev1VclArrayOutput
}

type Servicev1VclArray []Servicev1VclInput

func (Servicev1VclArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Vcl)(nil)).Elem()
}

func (i Servicev1VclArray) ToServicev1VclArrayOutput() Servicev1VclArrayOutput {
	return i.ToServicev1VclArrayOutputWithContext(context.Background())
}

func (i Servicev1VclArray) ToServicev1VclArrayOutputWithContext(ctx context.Context) Servicev1VclArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(Servicev1VclArrayOutput)
}

type Servicev1VclOutput struct { *pulumi.OutputState }

func (Servicev1VclOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*Servicev1Vcl)(nil)).Elem()
}

func (o Servicev1VclOutput) ToServicev1VclOutput() Servicev1VclOutput {
	return o
}

func (o Servicev1VclOutput) ToServicev1VclOutputWithContext(ctx context.Context) Servicev1VclOutput {
	return o
}

func (o Servicev1VclOutput) Content() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Vcl) string { return v.Content }).(pulumi.StringOutput)
}

func (o Servicev1VclOutput) Main() pulumi.BoolPtrOutput {
	return o.ApplyT(func (v Servicev1Vcl) *bool { return v.Main }).(pulumi.BoolPtrOutput)
}

// The unique name for the Service to create.
func (o Servicev1VclOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func (v Servicev1Vcl) string { return v.Name }).(pulumi.StringOutput)
}

type Servicev1VclArrayOutput struct { *pulumi.OutputState}

func (Servicev1VclArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]Servicev1Vcl)(nil)).Elem()
}

func (o Servicev1VclArrayOutput) ToServicev1VclArrayOutput() Servicev1VclArrayOutput {
	return o
}

func (o Servicev1VclArrayOutput) ToServicev1VclArrayOutputWithContext(ctx context.Context) Servicev1VclArrayOutput {
	return o
}

func (o Servicev1VclArrayOutput) Index(i pulumi.IntInput) Servicev1VclOutput {
	return pulumi.All(o, i).ApplyT(func (vs []interface{}) Servicev1Vcl {
		return vs[0].([]Servicev1Vcl)[vs[1].(int)]
	}).(Servicev1VclOutput)
}

func init() {
	pulumi.RegisterOutputType(ServiceACLEntriesv1EntryOutput{})
	pulumi.RegisterOutputType(ServiceACLEntriesv1EntryArrayOutput{})
	pulumi.RegisterOutputType(Servicev1AclOutput{})
	pulumi.RegisterOutputType(Servicev1AclArrayOutput{})
	pulumi.RegisterOutputType(Servicev1BackendOutput{})
	pulumi.RegisterOutputType(Servicev1BackendArrayOutput{})
	pulumi.RegisterOutputType(Servicev1BigqueryloggingOutput{})
	pulumi.RegisterOutputType(Servicev1BigqueryloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1BlobstorageloggingOutput{})
	pulumi.RegisterOutputType(Servicev1BlobstorageloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1CacheSettingOutput{})
	pulumi.RegisterOutputType(Servicev1CacheSettingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1ConditionOutput{})
	pulumi.RegisterOutputType(Servicev1ConditionArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DictionaryOutput{})
	pulumi.RegisterOutputType(Servicev1DictionaryArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DirectorOutput{})
	pulumi.RegisterOutputType(Servicev1DirectorArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DomainOutput{})
	pulumi.RegisterOutputType(Servicev1DomainArrayOutput{})
	pulumi.RegisterOutputType(Servicev1DynamicsnippetOutput{})
	pulumi.RegisterOutputType(Servicev1DynamicsnippetArrayOutput{})
	pulumi.RegisterOutputType(Servicev1GcsloggingOutput{})
	pulumi.RegisterOutputType(Servicev1GcsloggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1GzipOutput{})
	pulumi.RegisterOutputType(Servicev1GzipArrayOutput{})
	pulumi.RegisterOutputType(Servicev1HeaderOutput{})
	pulumi.RegisterOutputType(Servicev1HeaderArrayOutput{})
	pulumi.RegisterOutputType(Servicev1HealthcheckOutput{})
	pulumi.RegisterOutputType(Servicev1HealthcheckArrayOutput{})
	pulumi.RegisterOutputType(Servicev1LogentryOutput{})
	pulumi.RegisterOutputType(Servicev1LogentryArrayOutput{})
	pulumi.RegisterOutputType(Servicev1PapertrailOutput{})
	pulumi.RegisterOutputType(Servicev1PapertrailArrayOutput{})
	pulumi.RegisterOutputType(Servicev1RequestSettingOutput{})
	pulumi.RegisterOutputType(Servicev1RequestSettingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1ResponseObjectOutput{})
	pulumi.RegisterOutputType(Servicev1ResponseObjectArrayOutput{})
	pulumi.RegisterOutputType(Servicev1S3loggingOutput{})
	pulumi.RegisterOutputType(Servicev1S3loggingArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SnippetOutput{})
	pulumi.RegisterOutputType(Servicev1SnippetArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SplunkOutput{})
	pulumi.RegisterOutputType(Servicev1SplunkArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SumologicOutput{})
	pulumi.RegisterOutputType(Servicev1SumologicArrayOutput{})
	pulumi.RegisterOutputType(Servicev1SyslogOutput{})
	pulumi.RegisterOutputType(Servicev1SyslogArrayOutput{})
	pulumi.RegisterOutputType(Servicev1VclOutput{})
	pulumi.RegisterOutputType(Servicev1VclArrayOutput{})
}
